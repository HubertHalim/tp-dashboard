[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u0027site-name\u0027: \u0027Mod Manager\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F10-4/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "//        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 152,
      "zixinn": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Mod Manager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Mod Manager\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Mod Manager\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Mod Manager\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Mod Manager\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        logger.info(\"Starting Mod Manager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Mod Manager ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 8,
      "-": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_MODULE_COMMAND \u003d \"Unknown module command \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_FACILITATOR_COMMAND \u003d \"Unknown facilitator command \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \"The facilitator index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_FACILITATORS_LISTED_OVERVIEW \u003d \"%1$d facilitators listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_LESSON_COMMAND \u003d \"Unknown lesson command\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_CALENDAR_COMMAND \u003d \"Unknown calendar command\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_TASK_COMMAND \u003d \"Unknown task command\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 1,
      "-": 10,
      "zixinn": 6,
      "heidicrq": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of facilitators */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cFacilitator\u003e getFilteredFacilitatorList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lessons */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    List\u003cLesson\u003e getLessons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns the module to be viewed */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    Optional\u003cModule\u003e getModule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of facilitators */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cFacilitator\u003e getFacilitatorListForModule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 3,
      "NNpanpan": 6,
      "-": 48,
      "zixinn": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e getFilteredFacilitatorList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return model.getFilteredFacilitatorList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return model.getLessons();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Optional\u003cModule\u003e getModule() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return model.getModule();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e getFacilitatorListForModule() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return model.getFacilitatorListForModule();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 6,
      "NNpanpan": 7,
      "-": 78,
      "zixinn": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Clears the Mod Manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.CLEAR);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 20,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_GROUP_CAL \u003d \"cal\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_GROUP_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_GROUP_CMD \u003d \"cmd\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_GROUP_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_GROUP_FACIL \u003d \"facil\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_GROUP_MOD \u003d \"mod\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_GROUP_TASK \u003d \"task\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_GROUPS \u003d List.of("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            COMMAND_GROUP_CAL, COMMAND_GROUP_CLASS, COMMAND_GROUP_CMD, COMMAND_GROUP_EXIT, COMMAND_GROUP_FACIL,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            COMMAND_GROUP_MOD, COMMAND_GROUP_TASK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String COMMAND_WORD_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_WORD_ALL \u003d \"all\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String COMMAND_WORD_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String COMMAND_WORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String COMMAND_WORD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String COMMAND_WORD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String COMMAND_WORD_GROUP \u003d \"group\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String COMMAND_WORD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String COMMAND_WORD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String COMMAND_WORD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static String getModCommands() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 18,
      "alushingg": 7,
      "-": 21,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final CommandType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public CommandResult(String feedbackToUser, CommandType type) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public CommandType getType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 type.equals(otherCommandResult.type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Objects.hash(feedbackToUser, type);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "zixinn": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResultUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents the result of a command execution for Ui."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CommandResultUi extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Arguments in commands to be used in Ui."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private final String argForUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a {@code CommandResultUi} with the specified fields."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public CommandResultUi(String feedbackToUser, CommandType type, String argForUi) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(feedbackToUser, type);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.argForUi \u003d argForUi;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String getArgForUi() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return argForUi;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents the different types of commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    MODULE, MODULE_VIEW, LESSON, TASK, FACILITATOR, CALENDAR, CLEAR, HELP, EXIT, CMD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Mod Manager as requested ...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, CommandType.EXIT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 15,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD_HELP + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD_HELP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, CommandType.HELP);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "-": 16,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/CalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a calendar command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public abstract class CalCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_WORDS \u003d List.of(COMMAND_WORD_VIEW, COMMAND_WORD_FIND);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/CalViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandResultUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Show calendar view to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalViewCommand extends CalCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_CAL + \" \" + COMMAND_WORD_VIEW"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + \": Views the calendar for a week. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + PREFIX_WEEK + \" this OR\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + PREFIX_WEEK + \" next\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar can be viewed\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private String week;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Creates a CalViewCommand to view the specified week."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public CalViewCommand(String week) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        requireNonNull(week);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return new CommandResultUi(MESSAGE_SUCCESS, CommandType.CALENDAR, week);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                || (other instanceof CalViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u0026\u0026 week.equals(((CalViewCommand) other).week));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cmd/CmdAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "package seedu.address.logic.commands.cmd;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * Lists all possible commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public class CmdAllCommand extends CmdCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        Command.ALL_COMMAND_GROUPS.forEach(str -\u003e builder.append(str + \" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return new CommandResult(builder.toString(), CommandType.CMD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cmd/CmdCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "package seedu.address.logic.commands.cmd;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * Represents a cmd command with hidden logic and ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public abstract class CmdCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String ALL_FORMAT \u003d String.format(\"%s %s\", COMMAND_GROUP_CMD, COMMAND_WORD_ALL);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String GROUP_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            String.format(\"%s %s COMMAND_GROUP\", COMMAND_GROUP_CMD, COMMAND_WORD_GROUP);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final List\u003cString\u003e ALL_FORMATS \u003d List.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            ALL_FORMAT, GROUP_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cmd/CmdGroupCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "package seedu.address.logic.commands.cmd;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * Lists all commands from a specific command group."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public class CmdGroupCommand extends CmdCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    private final String commandGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public CmdGroupCommand(String commandGroup) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        this.commandGroup \u003d commandGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        // To implement: Returns the correct command group"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        // in a try-catch block, throws Exception when not found group."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/facilitator/FacilAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Adds a facilitator to Mod Manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilAddCommand extends FacilCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_ADD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \": Adds a facilitator to Mod Manager. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + PREFIX_NAME + \" FACILITATOR_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \" PHONE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \" EMAIL] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_OFFICE + \" OFFICE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE + \" MODULE_CODE]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_ADD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + PREFIX_NAME + \" Martin Henz \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \" 98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + PREFIX_EMAIL + \" henz@comp.nus.edu.sg \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + PREFIX_OFFICE + \" COM2-0356 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + PREFIX_MODULE_CODE + \" CS1101S\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New facilitator added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_NOT_ADDED \u003d \"At least one of the optional fields must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FACILITATOR \u003d \"This facilitator already exists in Mod Manager.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"The module %1$s does not exist in Mod Manager.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final Facilitator toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Creates a FacilAddCommand to add the specified {@code facilitator}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilAddCommand(Facilitator facilitator) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(facilitator);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        toAdd \u003d facilitator;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (model.hasFacilitator(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FACILITATOR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (ModuleCode moduleCode : toAdd.getModuleCodes()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (!model.hasModuleCode(moduleCode.moduleCode)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_MODULE_DOES_NOT_EXIST, moduleCode.moduleCode));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.addFacilitator(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandType.FACILITATOR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof FacilAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 toAdd.equals(((FacilAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 8,
      "alushingg": 2,
      "-": 34,
      "zixinn": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/facilitator/FacilCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a facil command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public abstract class FacilCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String ADD_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String.format(\"%s %s %s FACILITATOR_NAME [%s EMAIL] [%s PHONE_NUMBER] [%s OFFICE] [%s MODULE_CODE]...\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                    COMMAND_GROUP_FACIL, COMMAND_WORD_ADD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                    PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_OFFICE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String DELETE_FORMAT \u003d String.format(\"%s %s INDEX\", COMMAND_GROUP_FACIL, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String EDIT_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String.format(\"%s %s %s FACILITATOR_NAME [%s EMAIL] [%s PHONE_NUMBER] [%s OFFICE] [%s MODULE_CODE]...\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                    COMMAND_GROUP_FACIL, COMMAND_WORD_EDIT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                    PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_OFFICE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String FIND_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            String.format(\"%s %s FACILITATOR_NAME\", COMMAND_GROUP_FACIL, COMMAND_WORD_FIND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String LIST_FORMAT \u003d String.format(\"%s %s\", COMMAND_GROUP_FACIL, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_WORDS \u003d List.of("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            COMMAND_WORD_ADD, COMMAND_WORD_EDIT, COMMAND_WORD_DELETE, COMMAND_WORD_FIND, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_FORMATS \u003d List.of("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            ADD_FORMAT, DELETE_FORMAT, EDIT_FORMAT, FIND_FORMAT, LIST_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 31,
      "alushingg": 6,
      "zixinn": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/facilitator/FacilDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Deletes a facilitator identified using it\u0027s displayed index from Mod Manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilDeleteCommand extends FacilCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_DELETE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \": Deletes the facilitator identified by the index number used in the displayed facilitator list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_DELETE + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_DELETE_FACILITATOR_SUCCESS \u003d \"Deleted Facilitator: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Creates a FacilDeleteCommand to delete the facilitator the specified {@code index}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cFacilitator\u003e lastShownList \u003d model.getFilteredFacilitatorList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.deleteFacilitator(facilitatorToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FACILITATOR_SUCCESS, facilitatorToDelete),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                CommandType.FACILITATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof FacilDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((FacilDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 4,
      "alushingg": 2,
      "-": 35,
      "zixinn": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/facilitator/FacilEditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FACILITATORS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Edits the details of an existing facilitator in Mod Manager."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilEditCommand extends FacilCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_EDIT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \": Edits the details of the facilitator identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"by the index number used in the displayed facilitator list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_NAME + \" FACILITATOR_NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \" PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \" EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_OFFICE + \" OFFICE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE + \" MODULE_CODE]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_EDIT + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_EDIT_FACILITATOR_SUCCESS \u003d \"Edited Facilitator: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FACILITATOR \u003d \"This facilitator already exists in Mod Manager.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_ALL_OPTIONAL_FIELDS_DELETED \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \"At least one of phone, email, office and module code should not be empty.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"The module %1$s does not exist in Mod Manager.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final EditFacilitatorDescriptor editFacilitatorDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Creates a FacilEditCommand to edit the facilitator at the specified {@code index}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param index of the facilitator in the filtered facilitator list to edit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param editFacilitatorDescriptor details to edit the facilitator with."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilEditCommand(Index index, EditFacilitatorDescriptor editFacilitatorDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(editFacilitatorDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.editFacilitatorDescriptor \u003d new EditFacilitatorDescriptor(editFacilitatorDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cFacilitator\u003e lastShownList \u003d model.getFilteredFacilitatorList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d createEditedFacilitator(facilitatorToEdit, editFacilitatorDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!facilitatorToEdit.isSameFacilitator(editedFacilitator) \u0026\u0026 model.hasFacilitator(editedFacilitator)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FACILITATOR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (editedFacilitator.getPhone().value \u003d\u003d null \u0026\u0026 editedFacilitator.getEmail().value \u003d\u003d null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 editedFacilitator.getOffice().value \u003d\u003d null \u0026\u0026 editedFacilitator.getModuleCodes().isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new CommandException(MESSAGE_ALL_OPTIONAL_FIELDS_DELETED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (ModuleCode moduleCode : editedFacilitator.getModuleCodes()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (!model.hasModuleCode(moduleCode.moduleCode)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_MODULE_DOES_NOT_EXIST, moduleCode.moduleCode));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.setFacilitator(facilitatorToEdit, editedFacilitator);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateFilteredFacilitatorList(PREDICATE_SHOW_ALL_FACILITATORS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FACILITATOR_SUCCESS, editedFacilitator),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                CommandType.FACILITATOR);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Creates and returns a {@code Facilitator} with the details of {@code facilitatorToEdit}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * edited with {@code editFacilitatorDescriptor}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static Facilitator createEditedFacilitator(Facilitator facilitatorToEdit,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                EditFacilitatorDescriptor editFacilitatorDescriptor) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assert facilitatorToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Name updatedName \u003d editFacilitatorDescriptor.getName().orElse(facilitatorToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Phone updatedPhone \u003d editFacilitatorDescriptor.getPhone().orElse(facilitatorToEdit.getPhone());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Email updatedEmail \u003d editFacilitatorDescriptor.getEmail().orElse(facilitatorToEdit.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Office updatedOffice \u003d editFacilitatorDescriptor.getOffice().orElse(facilitatorToEdit.getOffice());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Set\u003cModuleCode\u003e updatedModuleCodes \u003d editFacilitatorDescriptor.getModuleCodes()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .orElse(facilitatorToEdit.getModuleCodes());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Facilitator(updatedName, updatedPhone, updatedEmail, updatedOffice, updatedModuleCodes);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!(other instanceof FacilEditCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand e \u003d (FacilEditCommand) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 editFacilitatorDescriptor.equals(e.editFacilitatorDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Stores the details to edit the facilitator with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * corresponding field value of the facilitator."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static class EditFacilitatorDescriptor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private Office office;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private Set\u003cModuleCode\u003e moduleCodes;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public EditFacilitatorDescriptor() {}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "         * A defensive copy of {@code moduleCodes} is used internally."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public EditFacilitatorDescriptor(EditFacilitatorDescriptor toCopy) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            setOffice(toCopy.office);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            setModuleCodes(toCopy.moduleCodes);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, office, moduleCodes);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public void setOffice(Office office) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.office \u003d office;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public Optional\u003cOffice\u003e getOffice() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Optional.ofNullable(office);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "         * Sets {@code moduleCodes} to this object\u0027s {@code moduleCodes}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "         * A defensive copy of {@code moduleCodes} is used internally."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public void setModuleCodes(Set\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.moduleCodes \u003d (moduleCodes !\u003d null) ? new HashSet\u003c\u003e(moduleCodes) : null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zixinn"
        },
        "content": "         * Returns an unmodifiable module code set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zixinn"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code moduleCodes} is null."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public Optional\u003cSet\u003cModuleCode\u003e\u003e getModuleCodes() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return (moduleCodes !\u003d null) ? Optional.of(Collections.unmodifiableSet(moduleCodes)) : Optional.empty();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (!(other instanceof EditFacilitatorDescriptor)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            EditFacilitatorDescriptor e \u003d (EditFacilitatorDescriptor) other;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    \u0026\u0026 getOffice().equals(e.getOffice())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    \u0026\u0026 getModuleCodes().equals(e.getModuleCodes());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 4,
      "alushingg": 4,
      "-": 149,
      "zixinn": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/facilitator/FacilFindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Finds and lists all facilitators in Mod Manager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilFindCommand extends FacilCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_FIND"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \": Finds all facilitators whose names contain any of the \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"specified facilitator name (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"Parameters: FACILITATOR_NAME [MORE_FACILITATOR_NAMES]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_FACIL + \" \" + COMMAND_WORD_FIND + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilFindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateFilteredFacilitatorList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_FACILITATORS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                model.getFilteredFacilitatorList().size()), CommandType.FACILITATOR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof FacilFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 predicate.equals(((FacilFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 4,
      "alushingg": 2,
      "-": 26,
      "zixinn": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/facilitator/FacilListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FACILITATORS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Lists all facilitators in Mod Manager to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilListCommand extends FacilCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all facilitators\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateFilteredFacilitatorList(PREDICATE_SHOW_ALL_FACILITATORS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.FACILITATOR);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 2,
      "alushingg": 2,
      "-": 14,
      "zixinn": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lesson/LessonAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Adds a lesson to Mod Manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonAddCommand extends LessonCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_ADD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \": Adds a lesson to Mod Manager. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_MODULE_CODE + \" MOD_CODE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_TYPE + \" CLASS_TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_AT + \" DAY START_TIME END_TIME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"[\" + PREFIX_VENUE + \" VENUE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"[\" + PREFIX_FACIL + \"FACILITATOR_NAME] \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_ADD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_MODULE_CODE + \" CS2103T \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_TYPE + \" LEC \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_AT + \" FRIDAY 14:00 16:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_VENUE + \" I3-AUD \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_FACIL + \" Akshay Narayan \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in Mod Manager\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonAddCommand(Lesson lesson) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        toAdd \u003d lesson;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (model.hasLesson(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        model.addLesson(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandType.LESSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                || (other instanceof LessonAddCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 toAdd.equals(((LessonAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lesson/LessonCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Represents a lesson command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public abstract class LessonCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String ADD_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            String.format(\"%s %s %s MOD_CODE %s CLASS_TYPE %s DAY START_TIME END_TIME [%s VENUE] [%s FACILITATOR_NAME]\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    COMMAND_GROUP_CLASS, COMMAND_WORD_ADD,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    PREFIX_MODULE_CODE, PREFIX_TYPE, PREFIX_AT, PREFIX_VENUE, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String DELETE_FORMAT \u003d String.format(\"%s %s %s MOD_CODE %s CLASS_TYPE\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            COMMAND_GROUP_CLASS, COMMAND_WORD_DELETE, PREFIX_MODULE_CODE, PREFIX_TYPE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String EDIT_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            String.format(\"%s %s %s MOD_CODE %s CLASS_TYPE [%s DAY START_TIME END_TIME] [%s VENUE] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                            + \"[%s FACILITATOR_NAME]\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    COMMAND_GROUP_CLASS, COMMAND_WORD_EDIT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    PREFIX_MODULE_CODE, PREFIX_TYPE, PREFIX_AT, PREFIX_VENUE, PREFIX_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String FIND_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            String.format(\"%s %s [%s] [%s DAY]\", COMMAND_GROUP_CLASS, COMMAND_WORD_FIND, PREFIX_NEXT, PREFIX_AT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String LIST_FORMAT \u003d String.format(\"%s %s\", COMMAND_GROUP_CLASS, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_WORDS \u003d List.of("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            COMMAND_WORD_ADD, COMMAND_WORD_EDIT, COMMAND_WORD_DELETE, COMMAND_WORD_FIND, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_FORMATS \u003d List.of("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            ADD_FORMAT, DELETE_FORMAT, EDIT_FORMAT, FIND_FORMAT, LIST_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lesson/LessonDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Deletes a lesson identified using it\u0027s displayed index from Mod Manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonDeleteCommand extends LessonCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_DELETE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \": Deletes the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_DELETE + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            \"The lesson index provided is invalid\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted Lesson: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d model.getLessons();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lessons.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Lesson lessonToDelete \u003d lessons.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        model.removeLesson(lessonToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                CommandType.LESSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                || (other instanceof LessonDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((LessonDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lesson/LessonEditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.LessonType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Edits the details of an existing lesson in Mod Manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonEditCommand extends LessonCommand {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_EDIT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \": Edits the details of the lesson identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"by the index number used in the displayed lesson list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"[\" + PREFIX_MODULE_CODE + \" MOD_CODE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \" CLASS_TYPE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"[\" + PREFIX_AT + \" DAY START_TIME END_TIME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"[\" + PREFIX_VENUE + \" VENUE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"[\" + PREFIX_FACIL + \" FACILITATOR_NAME]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_EDIT + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_MODULE_CODE + \" CS9000 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + PREFIX_AT + \" TUESDAY 01:00 02:00\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_EDIT_LESSON_SUCCESS \u003d \"Edited Lesson: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            \"The lesson index provided is invalid\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private final EditLessonDescriptor editLessonDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param index of the lesson in the lesson list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param editLessonDescriptor details to edit the lesson with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonEditCommand(Index index, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireAllNonNull(index, editLessonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.editLessonDescriptor \u003d new EditLessonDescriptor(editLessonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d model.getLessons();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lessons.size() || index.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Lesson lessonToEdit \u003d lessons.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Lesson editedLesson \u003d createEditedLesson(lessonToEdit, editLessonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!lessonToEdit.equals(editedLesson) \u0026\u0026 model.hasLesson(editedLesson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new CommandException(\"This lesson already exists in Mod Manager\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        model.setLesson(lessonToEdit, editedLesson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LESSON_SUCCESS, editedLesson), CommandType.LESSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Creates and returns a {@code Lesson} with the details of {@code lessonToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * edited with {@code editLessonDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private static Lesson createEditedLesson(Lesson lessonToEdit, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        assert lessonToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editLessonDescriptor.getModuleCode().orElse(lessonToEdit.getModuleCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LessonType updatedLessonType \u003d editLessonDescriptor.getLessonType().orElse(lessonToEdit.getType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        DayOfWeek updatedDay \u003d editLessonDescriptor.getDay().orElse(lessonToEdit.getDay());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LocalTime updatedStartTime \u003d editLessonDescriptor.getStartTime().orElse(lessonToEdit.getStartTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LocalTime updatedEndTime \u003d editLessonDescriptor.getEndTime().orElse(lessonToEdit.getEndTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String updatedVenue \u003d editLessonDescriptor.getVenue().orElse(lessonToEdit.getVenue());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Facilitator updatedFacilitator \u003d editLessonDescriptor.getFacilitator().orElse(lessonToEdit.getFacilitator());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new Lesson(updatedModuleCode, updatedLessonType, updatedDay, updatedStartTime, updatedEndTime,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                updatedVenue, updatedFacilitator);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!(other instanceof LessonEditCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LessonEditCommand e \u003d (LessonEditCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 editLessonDescriptor.equals(e.editLessonDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Stores the details to edit the lesson with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * corresponding field value of the lesson."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static class EditLessonDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private LessonType type;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private DayOfWeek day;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private LocalTime startTime;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private LocalTime endTime;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private String venue; // optional"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private Facilitator facilitator; // optional"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public EditLessonDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public EditLessonDescriptor(EditLessonDescriptor copy) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            setModuleCode(copy.moduleCode);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            setLessonType(copy.type);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            setDay(copy.day);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            setStartTime(copy.startTime);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            setEndTime(copy.endTime);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            setVenue(copy.venue);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            setFacilitator(copy.facilitator);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleCode, type, day, startTime, endTime, venue, facilitator);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public void setLessonType(LessonType type) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public Optional\u003cLessonType\u003e getLessonType() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public void setDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public Optional\u003cDayOfWeek\u003e getDay() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return Optional.ofNullable(day);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public void setStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public Optional\u003cLocalTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public Optional\u003cLocalTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public void setVenue(String venue) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public Optional\u003cString\u003e getVenue() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public void setFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.facilitator \u003d facilitator;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public Optional\u003cFacilitator\u003e getFacilitator() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return Optional.ofNullable(facilitator);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (!(other instanceof EditLessonDescriptor)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            EditLessonDescriptor e \u003d (EditLessonDescriptor) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return getModuleCode().equals(e.getModuleCode())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    \u0026\u0026 getLessonType().equals(e.getLessonType())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    \u0026\u0026 getDay().equals(e.getDay())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    \u0026\u0026 getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    \u0026\u0026 getVenue().equals(e.getVenue())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    \u0026\u0026 getFacilitator().equals(e.getFacilitator());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lesson/LessonFindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Finds the next lesson in Mod Manager that is happening soon."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonFindCommand extends LessonCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_FIND"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \": Finds the next class\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_FIND + \" \" + PREFIX_NEXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            + \" or \" + COMMAND_GROUP_CLASS + \" \" + COMMAND_WORD_FIND + \" \" + PREFIX_AT + \" MONDAY\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private final DayOfWeek day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonFindCommand(DayOfWeek day) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            Lesson lesson;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            lesson \u003d model.findNextLesson();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                result \u003d \"No more lessons this week\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                result \u003d \"Next lesson:\\n\" + lesson.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            List\u003cLesson\u003e lessonsOfTheDay \u003d model.findLessonByDay(day);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (lessonsOfTheDay.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                result \u003d \"No lessons on \" + day.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                result \u003d \"Lessons on \" + day.toString() + \"\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                for (Lesson l : lessonsOfTheDay) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    result \u003d result + \"\\u2022 \" + l.toString() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new CommandResult(result, CommandType.LESSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                || (other instanceof LessonFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 day \u003d\u003d ((LessonFindCommand) other).day); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lesson/LessonListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.commands.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Lists all lessons in Mod Manager to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonListCommand extends LessonCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all lessons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d model.getLessons();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String lessonListString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (lessons.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            lessonListString \u003d \"There is currently no lessons\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            lessonListString \u003d \"Lessons include:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                lessonListString \u003d lessonListString + \"\\u2022 \" + lesson + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new CommandResult(lessonListString, CommandType.LESSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 33,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/module/ModuleAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Adds a module to Mod Manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleAddCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_MOD + \" \" + COMMAND_WORD_ADD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \": Adds a module to Mod Manager. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + PREFIX_MODULE_CODE + \" MOD_CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \" DESCRIPTION] \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_MOD + \" \" + COMMAND_WORD_ADD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + PREFIX_MODULE_CODE + \" CS2103T \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + PREFIX_DESCRIPTION + \" Software Engineering \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in Mod Manager.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Creates a ModuleAddCommand to add the specified {@code module}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleAddCommand(Module module) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandType.MODULE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof ModuleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ModuleAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 2,
      "zixinn": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/module/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a module command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_WORDS \u003d List.of("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            COMMAND_WORD_ADD, COMMAND_WORD_DELETE, COMMAND_WORD_EDIT, COMMAND_WORD_LIST, COMMAND_WORD_VIEW);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/module/ModuleListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Lists all modules in Mod Manager to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleListCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, CommandType.MODULE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/module/ModuleViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.ModuleCodesContainKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Shows all information of a module in Mod Manager to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleViewCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_MOD + \" \" + COMMAND_WORD_VIEW"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \": Views a module in Mod Manager. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + PREFIX_MODULE_CODE + \" MOD_CODE \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_MOD + \" \" + COMMAND_WORD_VIEW + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + PREFIX_MODULE_CODE + \" CS2103T \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"The module %1$s does not exist in Mod Manager.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewed module: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final ModuleCode toView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleViewCommand(ModuleCode toView) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toView);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.toView \u003d toView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Optional\u003cModule\u003e module \u003d model.findModule(toView);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (module.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_MODULE_DOES_NOT_EXIST, toView.moduleCode));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateModule(module.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateFacilitatorListForModule(new ModuleCodesContainKeywordPredicate(toView.moduleCode));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toView), CommandType.MODULE_VIEW);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof ModuleViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 toView.equals(((ModuleViewCommand) other).toView));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/TaskAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Adds a module to Mod Manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskAddCommand extends TaskCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_GROUP_TASK + \" \" + COMMAND_WORD_ADD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \": Adds a task to Mod Manager. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + PREFIX_MODULE_CODE + \" MOD_CODE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + PREFIX_DESCRIPTION + \" TASK_DESCRIPTION \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \"[\" + PREFIX_BY + \" DD/MM/YYYY] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \"[\" + PREFIX_AT + \" hh/mm] \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \"Example: \" + COMMAND_GROUP_TASK + \" \" + COMMAND_WORD_ADD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + PREFIX_MODULE_CODE + \" CS3230 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            + PREFIX_DESCRIPTION + \" CS3230 Programming Assignment 2 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + PREFIX_BY + \" 01/04/2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            + PREFIX_AT + \" 23:59\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in Mod Manager. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \"Please choose another name, or another time slot. Thanks!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_NOT_ADDED \u003d \"Unable to add this task. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \"There is no information received. Please try again!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Creates a TaskAddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskAddCommand(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandType.TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                || (other instanceof TaskAddCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 toAdd.equals(((TaskAddCommand) other).toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 55,
      "NNpanpan": 2,
      "alushingg": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/task/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.logic.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Represents a Task command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public abstract class TaskCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String ADD_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            String.format(\"%s %s %s TASK_NAME [%s EMAIL] [%s PHONE_NUMBER] [%s OFFICE] [%s MODULE_CODE ...]\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            COMMAND_GROUP_TASK, COMMAND_WORD_ADD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_OFFICE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String DELETE_FORMAT \u003d String.format(\"%s %s INDEX\", COMMAND_GROUP_FACIL, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String EDIT_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            String.format(\"%s %s %s TASK_NAME [%s EMAIL] [%s PHONE_NUMBER] [%s OFFICE] [%s MODULE_CODE ...]\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    COMMAND_GROUP_TASK, COMMAND_WORD_EDIT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_OFFICE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String FIND_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            String.format(\"%s %s TASK_NAME\", COMMAND_GROUP_FACIL, COMMAND_WORD_FIND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String LIST_FORMAT \u003d String.format(\"%s %s\", COMMAND_GROUP_FACIL, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_WORDS \u003d List.of("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            COMMAND_WORD_ADD, COMMAND_WORD_EDIT, COMMAND_WORD_DELETE, COMMAND_WORD_FIND, COMMAND_WORD_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_FORMATS \u003d List.of("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        ADD_FORMAT, DELETE_FORMAT, EDIT_FORMAT, FIND_FORMAT, LIST_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.calendar.CalCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.facilitator.FacilCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.lesson.LessonCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.module.ModuleCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.task.TaskCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(\\\\s*)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_CLEAR:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        case Command.COMMAND_GROUP_EXIT:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_HELP:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        case Command.COMMAND_GROUP_MOD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new ModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        case Command.COMMAND_GROUP_FACIL:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FacilCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        case Command.COMMAND_GROUP_CLASS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return new LessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_GROUP_CAL:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new CalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        case Command.COMMAND_GROUP_TASK:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new TaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 3,
      "NNpanpan": 3,
      "alushingg": 10,
      "-": 52,
      "heidicrq": 3,
      "zixinn": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return values.isEmpty() ? null : values.get(values.size() - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (getValue(new Prefix(\"\")) \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return getValue(new Prefix(\"\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "zixinn": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"/code\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"/desc\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"/task\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"/type\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"/venue\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final Prefix PREFIX_NEXT \u003d new Prefix(\"/next\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final Prefix PREFIX_BY \u003d new Prefix(\"/by\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final Prefix PREFIX_AT \u003d new Prefix(\"/at\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"/date\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"/month\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"/year\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public static final Prefix PREFIX_WEEK \u003d new Prefix(\"/week\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static final Prefix PREFIX_FACIL \u003d new Prefix(\"/facil\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"/name\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"/phone\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"/email\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Prefix PREFIX_OFFICE \u003d new Prefix(\"/office\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 1,
      "NNpanpan": 7,
      "-": 11,
      "zixinn": 8,
      "heidicrq": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.calendar.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.LessonType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.TaskDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses a {@code String moduleCode} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses a {@code String description} into a {@code description}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String trimmedDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedDescription \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String trimmedPhone;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedPhone \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses a {@code String office} into an {@code Office}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the given {@code office} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static Office parseOffice(String office) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String trimmedOffice;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (office \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedOffice \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedOffice \u003d office.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (!Office.isValidOffice(trimmedOffice)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                throw new ParseException(Office.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Office(trimmedOffice);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String trimmedEmail;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedEmail \u003d null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e moduleCodes} into a {@code Set\u003cModuleCode\u003e}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static Set\u003cModuleCode\u003e parseModuleCodes(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(moduleCodes);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Set\u003cModuleCode\u003e moduleCodeSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (String moduleCode : moduleCodes) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            moduleCodeSet.add(parseModuleCode(moduleCode));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return moduleCodeSet;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses {@code String lessonType} into a {@code LessonType}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static LessonType parseLessonType(String lessonType) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lessonType);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String trimmedType \u003d lessonType.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!Lesson.isValidType(lessonType)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(\"Class types should be either LEC, TUT, SEC, REC or LAB\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return Lesson.convertStringToLessonType(lessonType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses {@code String dayAndTime} into a {@code DayOfWeek}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static DayOfWeek parseDay(String dayAndTime) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(dayAndTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String trimmed \u003d dayAndTime.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String day \u003d trimmed.split(\" \")[0];"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        boolean isDayValid \u003d false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        DayOfWeek assignedDay;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (DayOfWeek.values()[i].toString().equals(day)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                isDayValid \u003d true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!isDayValid) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(\"Day provided should be its full name and in capital\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return DayOfWeek.valueOf(day);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses {@code String dayAndTime} into {@code LocalTime}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static LocalTime parseStartTime(String dayAndTime) throws ParseException, DateTimeParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(dayAndTime);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String trimmed \u003d dayAndTime.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String timeString \u003d trimmed.split(\" \")[1];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return LocalTime.parse(timeString);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(\"Time provided is in the wrong format\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses {@code String dayAndTime} into {@code LocalTime}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static LocalTime parseEndTime(String dayAndTime) throws ParseException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(dayAndTime);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String trimmed \u003d dayAndTime.trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String timeString \u003d trimmed.split(\" \")[2];"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return LocalTime.parse(timeString);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(\"Time provided is in the wrong format\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses {@code String venue} into {@code String}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static String parseVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (venue.equals(\"\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(\"Venue cannot be empty\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return venue.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses {@code String facilName} into {@code Facilitator}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static Facilitator parseFacilitator(String facilName) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String facilString \u003d facilName.trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        // for now"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Parses {@code String week} into a {@code Set\u003cModuleCode\u003e} and returns it."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws ParseException if the given {@code week} is invalid."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static String parseWeek(String week) throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        requireNonNull(week);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String trimmedWeek \u003d week.trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (trimmedWeek.equals(\"this\") || trimmedWeek.equals(\"next\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return trimmedWeek;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new ParseException(Calendar.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses a {@code String taskTime} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @throws ParseException if the given {@code taskTime} is invalid."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static TaskDateTime parseDateForTask(String taskTime) throws ParseException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        String trimmedTime;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            trimmedTime \u003d null;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            trimmedTime \u003d taskTime.trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            if (!Description.isValidDescription(trimmedTime)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskDateTime(trimmedTime);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses a {@code String taskTime} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @throws ParseException if the given {@code taskTime} is invalid."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static TaskDateTime parseDateTimeForTask(String taskTime, String taskTimeInDay) throws ParseException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        String trimmedTime;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            trimmedTime \u003d null;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            trimmedTime \u003d taskTime.trim();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            if (!TaskDateTime.isValidTaskTime(trimmedTime)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                throw new ParseException(TaskDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        String trimmedTimeInDay;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTimeInDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            trimmedTimeInDay \u003d null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            trimmedTimeInDay \u003d taskTime.trim();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            if (!TaskDateTime.isValidTaskTime(trimmedTimeInDay)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                throw new ParseException(TaskDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskDateTime(trimmedTime, trimmedTimeInDay);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 43,
      "NNpanpan": 1,
      "alushingg": 14,
      "-": 98,
      "heidicrq": 86,
      "zixinn": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/calendar/CalCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_CALENDAR_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.calendar.CalCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Parses input arguments and creates a new CalCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalCommandParser implements Parser\u003cCalCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final Pattern BASIC_CAL_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public CalCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        final Matcher matcher \u003d BASIC_CAL_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_VIEW:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return new CalViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_CALENDAR_COMMAND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/calendar/CalViewCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.calendar.CalViewCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Parses input arguments and creates a new CalViewCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalViewCommandParser implements Parser\u003cCalViewCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CalViewCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * and returns a CalViewCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public CalViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                args, PREFIX_WEEK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WEEK) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String week \u003d ParserUtil.parseWeek(argMultimap.getValue(PREFIX_WEEK));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return new CalViewCommand(week);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix) !\u003d null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/facilitator/FacilAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new FacilAddCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilAddCommandParser implements Parser\u003cFacilAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FacilAddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * and returns a FacilAddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_OFFICE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PHONE) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_OFFICE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(FacilAddCommand.MESSAGE_NOT_ADDED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Office office \u003d ParserUtil.parseOffice(argMultimap.getValue(PREFIX_OFFICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Set\u003cModuleCode\u003e moduleCodeList \u003d ParserUtil.parseModuleCodes(argMultimap.getAllValues(PREFIX_MODULE_CODE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitator \u003d new Facilitator(name, phone, email, office, moduleCodeList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new FacilAddCommand(facilitator);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix) !\u003d null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 3,
      "alushingg": 2,
      "zixinn": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/facilitator/FacilCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_FACILITATOR_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new FacilCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilCommandParser implements Parser\u003cFacilCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Pattern BASIC_FACIL_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Matcher matcher \u003d BASIC_FACIL_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_FACILITATOR_COMMAND, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FacilAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_EDIT:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FacilEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_DELETE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FacilDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_FIND:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FacilFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case Command.COMMAND_WORD_LIST:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FacilListCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_FACILITATOR_COMMAND, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 9,
      "zixinn": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/facilitator/FacilDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new FacilDeleteCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilDeleteCommandParser implements Parser\u003cFacilDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FacilDeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * and returns a FacilDeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new FacilDeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "zixinn": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/facilitator/FacilEditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new FacilEditCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilEditCommandParser implements Parser\u003cFacilEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FacilEditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * and returns an FacilEditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_OFFICE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor editFacilitatorDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilEditCommand.EditFacilitatorDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME) !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            editFacilitatorDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            editFacilitatorDescriptor.setPhone(ParserUtil.parsePhone("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    parseFieldForEdit(argMultimap.getValue(PREFIX_PHONE))));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL) !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            editFacilitatorDescriptor.setEmail(ParserUtil.parseEmail("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    parseFieldForEdit(argMultimap.getValue(PREFIX_EMAIL))));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OFFICE) !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            editFacilitatorDescriptor.setOffice(ParserUtil.parseOffice("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    parseFieldForEdit(argMultimap.getValue(PREFIX_OFFICE))));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        parseModuleCodesForEdit(argMultimap.getAllValues(PREFIX_MODULE_CODE))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .ifPresent(editFacilitatorDescriptor::setModuleCodes);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!editFacilitatorDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(FacilEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new FacilEditCommand(index, editFacilitatorDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e moduleCodes} into a {@code Set\u003cModuleCode\u003e} if {@code moduleCodes} is non-empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * If {@code moduleCodes} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code Set\u003cModuleCode\u003e} containing zero module codes."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Optional\u003cSet\u003cModuleCode\u003e\u003e parseModuleCodesForEdit(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assert moduleCodes !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (moduleCodes.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Collection\u003cString\u003e moduleCodeSet \u003d moduleCodes.size() \u003d\u003d 1 \u0026\u0026 moduleCodes.contains(\"\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                ? Collections.emptySet() : moduleCodes;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Optional.of(ParserUtil.parseModuleCodes(moduleCodeSet));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the given {@code String} of arguments and returns the {@code String} for the field for execution."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * If the given {@code String} of arguments is an empty string, it will be parsed into a null Object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param args the arguments for the field."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return the {@code String} for the field."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private String parseFieldForEdit(String args) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return args;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "zixinn": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/facilitator/FacilFindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new FacilFindCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilFindCommandParser implements Parser\u003cFacilFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FacilFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * and returns a FacilFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new FacilFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "zixinn": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lesson/LessonAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.lesson.LessonAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.LessonType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Adds a lesson to Mod Manager."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonAddCommandParser implements Parser\u003cLessonAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonAddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * and returns a LessonAddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                args, PREFIX_MODULE_CODE, PREFIX_AT, PREFIX_VENUE, PREFIX_TYPE, PREFIX_NAME, PREFIX_NEXT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                || !arePrefixesPresent(argMultimap, PREFIX_TYPE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                || !arePrefixesPresent(argMultimap, PREFIX_AT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Facilitator facilitator \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        String venue \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_VENUE)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_FACIL)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            facilitator \u003d ParserUtil.parseFacilitator(argMultimap.getValue(PREFIX_FACIL));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LessonType lessonType \u003d ParserUtil.parseLessonType(argMultimap.getValue(PREFIX_TYPE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        DayOfWeek day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_AT));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LocalTime startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_AT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LocalTime endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_AT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Lesson lesson \u003d new Lesson(moduleCode, lessonType, day, startTime, endTime, venue, facilitator);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new LessonAddCommand(lesson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix) !\u003d null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lesson/LessonCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_LESSON_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.lesson.LessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.lesson.LessonListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Parses input arguments and creates a new LessonCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonCommandParser implements Parser\u003cLessonCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private static final Pattern BASIC_LESSON_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        final Matcher matcher \u003d BASIC_LESSON_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        case Command.COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return new LessonAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        case Command.COMMAND_WORD_EDIT:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return new LessonEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        case Command.COMMAND_WORD_LIST:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return new LessonListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        case Command.COMMAND_WORD_DELETE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return new LessonDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        case Command.COMMAND_WORD_FIND:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return new LessonFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_LESSON_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lesson/LessonDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.lesson.LessonDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Parses input arguments and creates a new LessonDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonDeleteCommandParser implements Parser\u003cLessonDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonDeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * and returns a LessonDeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return new LessonDeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lesson/LessonEditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.lesson.LessonEditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Parses input arguments and creates a new LessonEditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonEditCommandParser implements Parser\u003cLessonEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonEditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * and returns an LessonEditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                args, PREFIX_MODULE_CODE, PREFIX_AT, PREFIX_VENUE, PREFIX_TYPE, PREFIX_NAME, PREFIX_NEXT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                    LessonEditCommand.MESSAGE_USAGE), pe));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LessonEditCommand.EditLessonDescriptor editLessonDescriptor \u003d new LessonEditCommand.EditLessonDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE) !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            editLessonDescriptor.setModuleCode(ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE) !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            editLessonDescriptor.setLessonType(ParserUtil.parseLessonType(argMultimap.getValue(PREFIX_TYPE)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AT) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            // need to change"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            editLessonDescriptor.setDay(ParserUtil.parseDay(argMultimap.getValue(PREFIX_AT)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            editLessonDescriptor.setStartTime(ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_AT)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            editLessonDescriptor.setEndTime(ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_AT)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            editLessonDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME) !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            editLessonDescriptor.setFacilitator(ParserUtil.parseFacilitator(argMultimap.getValue(PREFIX_NAME)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new LessonEditCommand(index, editLessonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lesson/LessonFindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.logic.parser.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEXT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.commands.lesson.LessonFindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Parses input arguments and creates a new LessonFindNextCommand object or LessonNextCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonFindCommandParser implements Parser\u003cLessonFindCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonFindCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * and returns a LessonFindCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_AT, PREFIX_NEXT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_AT) \u0026\u0026 !arePrefixesPresent(argumentMultimap, PREFIX_NEXT)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else if (arePrefixesPresent(argumentMultimap, PREFIX_AT)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 arePrefixesPresent(argumentMultimap, PREFIX_NEXT)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        DayOfWeek day \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (arePrefixesPresent(argumentMultimap, PREFIX_AT)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            day \u003d ParserUtil.parseDay(argumentMultimap.getValue(PREFIX_AT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return new LessonFindCommand(day);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/module/ModuleAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new ModuleAddCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleAddCommandParser implements Parser\u003cModuleAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleAddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * and returns a ModuleAddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module module \u003d new Module(moduleCode, description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new ModuleAddCommand(module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix) !\u003d null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 1,
      "zixinn": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/module/ModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_MODULE_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new ModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleCommandParser implements Parser\u003cModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Pattern BASIC_MODULE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Matcher matcher \u003d BASIC_MODULE_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_MODULE_COMMAND, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case Command.COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new ModuleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case Command.COMMAND_WORD_LIST:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new ModuleListCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        case Command.COMMAND_WORD_VIEW:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new ModuleViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_MODULE_COMMAND, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/module/ModuleViewCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Parses input arguments and creates a new ModuleViewCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleViewCommandParser implements Parser\u003cModuleViewCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleViewCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * and returns a ModuleViewCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE) \u003d\u003d null || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new ModuleViewCommand(moduleCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.task.TaskAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.TaskDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Parses input arguments and creates a new TaskAddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskAddCommandParser implements Parser\u003cTaskAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TaskAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * and returns a TaskAddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                args, PREFIX_MODULE_CODE, PREFIX_DESCRIPTION, PREFIX_BY, PREFIX_AT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TaskAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_BY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_AT)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException(TaskAddCommand.MESSAGE_NOT_ADDED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_BY)) { // date not supplied"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new TaskAddCommand(new Task(description));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AT)) { // time not supplied, only date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new TaskAddCommand((new Task(description, new TaskDateTime(argMultimap.getValue(PREFIX_BY)))));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // time and date supplied"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskAddCommand((new Task(description,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new TaskDateTime(argMultimap.getValue(PREFIX_BY),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                        argMultimap.getValue(PREFIX_AT)))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix) !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 61,
      "NNpanpan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_TASK_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.task.TaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Parses input arguments and creates a new FacilCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskCommandParser implements Parser\u003cTaskCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private static final Pattern BASIC_TASK_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        final Matcher matcher \u003d BASIC_TASK_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_TASK_COMMAND, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        case Command.COMMAND_WORD_ADD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new TaskAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        case Command.COMMAND_WORD_EDIT:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new TaskEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        case Command.COMMAND_WORD_DELETE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new TaskDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        case Command.COMMAND_WORD_FIND:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new TaskFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        case Command.COMMAND_WORD_LIST:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new FacilListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_UNKNOWN_TASK_COMMAND, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Parses input arguments and creates a new FacilDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskDeleteCommandParser implements Parser\u003cFacilDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FacilDeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * and returns a FacilDeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public FacilDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return new FacilDeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskEditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Parses input arguments and creates a new FacilEditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskEditCommandParser implements Parser\u003cFacilEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FacilEditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * and returns an FacilEditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public FacilEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_OFFICE, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor editFacilitatorDescriptor \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new FacilEditCommand.EditFacilitatorDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME) !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            editFacilitatorDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE) !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            editFacilitatorDescriptor.setPhone(ParserUtil.parsePhone("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    parseFieldForEdit(argMultimap.getValue(PREFIX_PHONE))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL) !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            editFacilitatorDescriptor.setEmail(ParserUtil.parseEmail("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    parseFieldForEdit(argMultimap.getValue(PREFIX_EMAIL))));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OFFICE) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            editFacilitatorDescriptor.setOffice(ParserUtil.parseOffice("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    parseFieldForEdit(argMultimap.getValue(PREFIX_OFFICE))));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        parseModuleCodesForEdit(argMultimap.getAllValues(PREFIX_MODULE_CODE))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .ifPresent(editFacilitatorDescriptor::setModuleCodes);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!editFacilitatorDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException(FacilEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new FacilEditCommand(index, editFacilitatorDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e moduleCodes} into a {@code Set\u003cModuleCode\u003e} if {@code moduleCodes} is non-empty."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * If {@code moduleCodes} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code Set\u003cModuleCode\u003e} containing zero module codes."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private Optional\u003cSet\u003cModuleCode\u003e\u003e parseModuleCodesForEdit(Collection\u003cString\u003e moduleCodes) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assert moduleCodes !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (moduleCodes.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Collection\u003cString\u003e moduleCodeSet \u003d moduleCodes.size() \u003d\u003d 1 \u0026\u0026 moduleCodes.contains(\"\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                ? Collections.emptySet() : moduleCodes;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return Optional.of(ParserUtil.parseModuleCodes(moduleCodeSet));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses the given {@code String} of arguments and returns the {@code String} for the field for execution."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * If the given {@code String} of arguments is an empty string, it will be parsed into a null Object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param args the arguments for the field"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @return the {@code String} for the field"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private String parseFieldForEdit(String args) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return args;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/task/TaskFindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.logic.parser.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Parses input arguments and creates a new FacilFindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskFindCommandParser implements Parser\u003cFacilFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FacilFindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * and returns a FacilFindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public FacilFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new FacilFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.UniqueFacilitatorList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Duplicates are not allowed (by .isSameModule and .isSameFacilitator and .isSameTask comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final UniqueFacilitatorList facilitators;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private final LessonList lessons;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitators \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessons \u003d new LessonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Creates an AddressBook using the Modules and Facilitators in the {@code toBeCopied}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the contents of the facilitator list with {@code facilitators}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code facilitators} must not contain duplicate facilitators."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators(List\u003cFacilitator\u003e facilitators) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.facilitators.setFacilitators(facilitators);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Replaces the contents of the lesson list with {@code lessons}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "      * Replaces the contents of the lesson list with {@code lessons}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        setFacilitators(newData.getFacilitatorList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        setLessons(newData.getLessonList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a module with the same module code as {@code moduleCode} exists in Mod Manager."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return modules.containsModuleCode(moduleCode);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in Mod Manager."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds a module to the Mod Manager."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The module must not already exist in Mod Manager."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void addModule(Module p) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modules.add(p);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * {@code key} must exist in Mod Manager."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the module with the specified {@code moduleCode}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Optional\u003cModule\u003e findModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return modules.find(moduleCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the list of modules in this {@code AddressBook}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return the list of modules."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public List\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return modules.getModuleList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    //// facilitator-level operations"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a facilitator with the same identity as {@code facilitator} exists in Mod Manager."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(facilitator);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return facilitators.contains(facilitator);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds a facilitator to the Mod Manager."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The facilitator must not already exist in Mod Manager."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void addFacilitator(Facilitator p) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitators.add(p);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the given facilitator {@code target} in the list with {@code editedFacilitator}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The facilitator identity of {@code editedFacilitator} must not be the same as another existing facilitator"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator(Facilitator target, Facilitator editedFacilitator) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(editedFacilitator);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitators.setFacilitator(target, editedFacilitator);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code key} must exist in Mod Manager."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void removeFacilitator(Facilitator key) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitators.remove(key);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the list of modules in this {@code AddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return the list of modules."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public List\u003cFacilitator\u003e getFacilitators() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return facilitators.getFacilitatorList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if a facilitator with the same identity as {@code facilitator} exists in Mod Manager."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Adds a task to the Mod Manager."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The task must not already exist in Mod Manager."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code key} must exist in Mod Manager."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns the list of modules in this {@code AddressBook}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @return the list of modules."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return tasks.getTaskList();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in Mod Manager."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessons.contains(lesson);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Adds a lesson to the list of lessons."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param lesson The lesson to be added."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessons.addLesson(lesson);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Replaces the given lesson {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * The lesson identity of {@code edited} must not be the same as another existing lesson"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void setLesson(Lesson target, Lesson edited) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessons.setLesson(target, edited);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Removes a lesson from the list of lessons."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param lesson The lesson to be added."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void removeLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessons.deleteLesson(lesson);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Finds the next lesson in Mod Manager that is going to happen."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public Lesson findNextLesson() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessons.findNextLesson();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Finds lessons that is happening on a particular day."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e findLessonByDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessons.findLessonsByDay(day);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Gets the LessonList."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonList getLessons() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules \\n\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                + facilitators.asUnmodifiableObservableList().size() + \" facilitators \\n\""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                + tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e getFacilitatorList() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return facilitators.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessons.getLessonList();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 modules.equals(((AddressBook) other).modules)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 facilitators.equals(((AddressBook) other).facilitators)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 tasks.equals(((AddressBook) other).tasks));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return Objects.hash(modules, facilitators, tasks);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 57,
      "alushingg": 3,
      "-": 113,
      "heidicrq": 70,
      "zixinn": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    Predicate\u003cFacilitator\u003e PREDICATE_SHOW_ALL_FACILITATORS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    Predicate\u003cFacilitator\u003e PREDICATE_SHOW_NO_FACILITATORS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a module with the same module code as {@code moduleCode} exists in Mod Manager."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    boolean hasModuleCode(String moduleCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in Mod Manager."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The module must exist in Mod Manager."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code module} must not already exist in Mod Manager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns the module to be viewed. */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    Optional\u003cModule\u003e getModule();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Finds the module with the given {@code moduleCode}. */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    Optional\u003cModule\u003e findModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Updates the module in the model to the given {@code module}. */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void updateModule(Module module);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns true if a facilitator with the same identity as {@code facilitator} exists in Mod Manager."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    boolean hasFacilitator(Facilitator facilitator);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Deletes the given facilitator."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * The facilitator must exist in Mod Manager."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void deleteFacilitator(Facilitator target);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds the given facilitator."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * {@code facilitator} must not already exist in Mod Manager."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void addFacilitator(Facilitator facilitator);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the given facilitator {@code target} with {@code editedFacilitator}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The facilitator identity of {@code editedFacilitator} must not be the same as another existing facilitator"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void setFacilitator(Facilitator target, Facilitator editedFacilitator);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered facilitator list. */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cFacilitator\u003e getFilteredFacilitatorList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Updates the filter of the filtered facilitator list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void updateFilteredFacilitatorList(Predicate\u003cFacilitator\u003e predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /** Returns an unmodifiable view of the filtered facilitator list. */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cFacilitator\u003e getFacilitatorListForModule();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Updates the filter of the filtered facilitator list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    void updateFacilitatorListForModule(Predicate\u003cFacilitator\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if a task with the same identity as {@code module} exists in Mod Manager."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    boolean hasTask(Task module);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The module must exist in Mod Manager."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code module} must not already exist in Mod Manager."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void addTask(Task module);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    boolean hasLesson(Lesson lesson);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    void setLesson(Lesson target, Lesson edited);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    void removeLesson(Lesson lesson);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    Lesson findNextLesson();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    List\u003cLesson\u003e findLessonByDay(DayOfWeek day);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    List\u003cLesson\u003e getLessons();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 31,
      "NNpanpan": 1,
      "alushingg": 5,
      "-": 82,
      "heidicrq": 16,
      "zixinn": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.LessonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents the in-memory model of Mod Manager data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final FilteredList\u003cFacilitator\u003e filteredFacilitators;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    private final List\u003cLesson\u003e filteredLesson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Optional\u003cModule\u003e module;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final FilteredList\u003cFacilitator\u003e facilitatorsForModule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        logger.fine(\"Initializing with Mod Manager: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        filteredFacilitators \u003d new FilteredList\u003c\u003e(this.addressBook.getFacilitatorList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.addressBook.getModuleList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        filteredLesson \u003d this.addressBook.getLessonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        module \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitatorsForModule \u003d new FilteredList\u003c\u003e(this.addressBook.getFacilitatorList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitatorsForModule.setPredicate(PREDICATE_SHOW_NO_FACILITATORS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return addressBook.hasModuleCode(moduleCode);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return addressBook.hasModule(module);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.removeModule(target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addModule(module);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Optional\u003cModule\u003e getModule() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Optional\u003cModule\u003e findModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return addressBook.findModule(moduleCode);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateModule(Module module) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.module \u003d Optional.of(module);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Facilitator \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(facilitator);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return addressBook.hasFacilitator(facilitator);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void deleteFacilitator(Facilitator target) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.removeFacilitator(target);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void addFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addFacilitator(facilitator);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        updateFilteredFacilitatorList(PREDICATE_SHOW_ALL_FACILITATORS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator(Facilitator target, Facilitator editedFacilitator) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(target, editedFacilitator);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.setFacilitator(target, editedFacilitator);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Facilitator List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Facilitator} backed by the internal list of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e getFilteredFacilitatorList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return filteredFacilitators;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateFilteredFacilitatorList(Predicate\u003cFacilitator\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        filteredFacilitators.setPredicate(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Facilitator} backed by the internal list of"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e getFacilitatorListForModule() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return facilitatorsForModule;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateFacilitatorListForModule(Predicate\u003cFacilitator\u003e predicate) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitatorsForModule.setPredicate(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Lesson \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return addressBook.hasLesson(lesson);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        addressBook.addLesson(lesson);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void setLesson(Lesson target, Lesson edited) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        addressBook.setLesson(target, edited);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void removeLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        addressBook.removeLesson(lesson);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public Lesson findNextLesson() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LessonList lessons \u003d addressBook.getLessons();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessons.findNextLesson();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e findLessonByDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return addressBook.getLessons().findLessonsByDay(day);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return addressBook.getLessonList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 filteredFacilitators.equals(other.filteredFacilitators)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 facilitatorsForModule.equals(other.facilitatorsForModule);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Task \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return addressBook.hasTask(task);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        addressBook.removeTask(task);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        addressBook.addTask(task);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        addressBook.setTask(target, editedTask);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 43,
      "NNpanpan": 2,
      "alushingg": 2,
      "-": 154,
      "heidicrq": 43,
      "zixinn": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an unmodifiable view of the facilitators list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * This list will not contain any duplicate facilitators."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    ObservableList\u003cFacilitator\u003e getFacilitatorList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Returns a list of lesson list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * This list will not contain any duplicate lessons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return List of lessons."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    List\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 7,
      "-": 16,
      "heidicrq": 7,
      "zixinn": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Calendar.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents the Calendar in Mod Manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Calendar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Week should be \u0027this\u0027 or \u0027next\u0027 only\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private LocalDate localDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Calendar(LocalDate localDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the calendar with the now date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static Calendar getNowCalendar() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return new Calendar(LocalDate.now());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the calendar with the date of next week."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static Calendar getNextWeekCalendar() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return new Calendar(LocalDate.now().plusDays(7));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns the index of the day of the week."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return the index of the day of the week."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public int getDayOfWeek() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return localDate.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns an array of days in the same week as the current date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return the array of days in the same week as the current date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public Calendar[] getWeek() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar[] week \u003d new Calendar[7];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        int index \u003d getDayOfWeek();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        week[index - 1] \u003d this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (int i \u003d 1; i \u003c index; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            week[index - 1 - i] \u003d new Calendar(getLocalDate().minusDays(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7 - index; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            week[index - 1 + i] \u003d new Calendar(getLocalDate().plusDays(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return week;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Checks if task is within the localDate."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public boolean isWithinDate(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (task.getTimeOutput().equals(\"\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(task.getTimeOutput(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                DateTimeFormatter.ofPattern(\"dd/MM/yyyy[ HH:mm]\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (localDate.compareTo(date) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (!(other instanceof Calendar)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar otherCalendar \u003d (Calendar) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return otherCalendar.getLocalDate().equals(getLocalDate());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a Facilitator\u0027s email in Mod Manager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        checkArgument(email \u003d\u003d null || isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 ((value \u003d\u003d null \u0026\u0026 ((Email) other).value \u003d\u003d null)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (value !\u003d null \u0026\u0026 ((Email) other).value !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)))); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return value !\u003d null ? value.hashCode() : 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 60,
      "zixinn": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/Facilitator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a Facilitator in Mod Manager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Facilitator {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final Office office;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final Set\u003cModuleCode\u003e moduleCodes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Facilitator(Name name, Phone phone, Email email, Office office, Set\u003cModuleCode\u003e moduleCodes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(name, phone, email, office, moduleCodes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.office \u003d office;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.moduleCodes.addAll(moduleCodes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Office getOffice() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return office;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an immutable module code set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Set\u003cModuleCode\u003e getModuleCodes() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Collections.unmodifiableSet(moduleCodes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if both facilitators have the same name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * This defines a weaker notion of equality between two facilitators."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean isSameFacilitator(Facilitator otherFacilitator) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (otherFacilitator \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return otherFacilitator !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 otherFacilitator.getName().equals(getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if both facilitators have the same identity and data fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * This defines a stronger notion of equality between two facilitators."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!(other instanceof Facilitator)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator otherFacilitator \u003d (Facilitator) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return otherFacilitator.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 otherFacilitator.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 otherFacilitator.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 otherFacilitator.getOffice().equals(getOffice())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 otherFacilitator.getModuleCodes().equals(getModuleCodes());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Objects.hash(name, phone, email, office, moduleCodes);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        builder.append(getName()).append(\"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (getPhone().value !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            builder.append(\"Phone: \").append(getPhone()).append(\"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (getEmail().value !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            builder.append(\"Email: \").append(getEmail()).append(\"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (getOffice().value !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            builder.append(\"Office: \").append(getOffice()).append(\"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!getModuleCodes().isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            builder.append(\"Module codes: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            getModuleCodes().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 76,
      "zixinn": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/ModuleCodesContainKeywordPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Tests that a {@code Facilitator}\u0027s {@code Module Code} matches the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleCodesContainKeywordPredicate implements Predicate\u003cFacilitator\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleCodesContainKeywordPredicate(String keyword) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean test(Facilitator facilitator) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return facilitator.getModuleCodes().stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .anyMatch(moduleCode -\u003e StringUtil.containsWordIgnoreCase(moduleCode.moduleCode, keyword));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof ModuleCodesContainKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 keyword.equals(((ModuleCodesContainKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a Facilitator\u0027s name in Mod Manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 57,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Tests that a {@code Facilitator}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFacilitator\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean test(Facilitator facilitator) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(facilitator.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "zixinn": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/Office.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a Facilitator\u0027s office in Mod Manager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOffice(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Office {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Offices can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The first character of the office must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs an {@code Office}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param office A valid office."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Office(String office) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        checkArgument(office \u003d\u003d null || isValidOffice(office), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        value \u003d office;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a given string is a valid office."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static boolean isValidOffice(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof Office // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 ((value \u003d\u003d null \u0026\u0026 ((Office) other).value \u003d\u003d null)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (value !\u003d null \u0026\u0026 ((Office) other).value !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 value.equals(((Office) other).value)))); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return value !\u003d null ? value.hashCode() : 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 39,
      "zixinn": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/Phone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a Facilitator\u0027s phone number in Mod Manager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        checkArgument(phone \u003d\u003d null || isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 ((value \u003d\u003d null \u0026\u0026 ((Phone) other).value \u003d\u003d null)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (value !\u003d null \u0026\u0026 ((Phone) other).value !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)))); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return value !\u003d null ? value.hashCode() : 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 46,
      "zixinn": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/UniqueFacilitatorList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.exceptions.DuplicateFacilitatorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.exceptions.FacilitatorNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A list of facilitators that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A facilitator is considered unique by comparing using {@code Facilitator#isSameFacilitator(Facilitator)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * As such, adding and updating of facilitators uses Facilitator#isSameFacilitator(Facilitator) for equality so as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * to ensure that the facilitator being added or updated is unique in terms of identity in the UniqueFacilitatorList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * However, the removal of a facilitator uses Facilitator#equals(Object) so as to ensure that the facilitator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * @see Facilitator#isSameFacilitator(Facilitator)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class UniqueFacilitatorList implements Iterable\u003cFacilitator\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final ObservableList\u003cFacilitator\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final ObservableList\u003cFacilitator\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if the list contains an equivalent facilitator as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean contains(Facilitator toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFacilitator);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds a facilitator to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The facilitator must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void add(Facilitator toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new DuplicateFacilitatorException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the facilitator {@code target} in the list with {@code editedFacilitator}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The facilitator identity of {@code editedFacilitator} must not be the same as another existing facilitator"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator(Facilitator target, Facilitator editedFacilitator) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(target, editedFacilitator);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new FacilitatorNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!target.isSameFacilitator(editedFacilitator) \u0026\u0026 contains(editedFacilitator)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new DuplicateFacilitatorException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.set(index, editedFacilitator);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Removes the equivalent facilitator from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The facilitator must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove(Facilitator toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new FacilitatorNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators(UniqueFacilitatorList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the contents of this list with {@code facilitators}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code facilitators} must not contain duplicate facilitator."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators(List\u003cFacilitator\u003e facilitators) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(facilitators);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!facilitatorsAreUnique(facilitators)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new DuplicateFacilitatorException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.setAll(facilitators);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the list of facilitators."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return the list of facilitators."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public List\u003cFacilitator\u003e getFacilitatorList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Iterator\u003cFacilitator\u003e iterator() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof UniqueFacilitatorList // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFacilitatorList) other).internalList));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if {@code facilitators} contains only unique facilitators."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private boolean facilitatorsAreUnique(List\u003cFacilitator\u003e facilitators) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (int i \u003d 0; i \u003c facilitators.size() - 1; i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            for (int j \u003d i + 1; j \u003c facilitators.size(); j++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (facilitators.get(i).isSameFacilitator(facilitators.get(j))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/exceptions/DuplicateFacilitatorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Signals that the operation will result in duplicate Facilitators"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * (Facilitators are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DuplicateFacilitatorException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public DuplicateFacilitatorException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Operation would result in duplicate facilitators.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/facilitator/exceptions/FacilitatorNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Signals that the operation is unable to find the specified facilitator."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilitatorNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Operation is unable to find the specified facilitator.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.exceptions.InvalidLessonTypeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.DailySchedulableInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Represents a Lesson in Mod Manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public class Lesson implements Comparable\u003cLesson\u003e, DailySchedulableInterface {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private LessonType type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private DayOfWeek day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private String venue; // optional"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private Facilitator facilitator; // optional"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public Lesson(ModuleCode moduleCode, LessonType type, DayOfWeek day, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireAllNonNull(moduleCode, type, day, startTime, endTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.venue \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.facilitator \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public Lesson(ModuleCode moduleCode, LessonType type, DayOfWeek day, LocalTime startTime, LocalTime endTime,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                  String venue, Facilitator facilitator) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireAllNonNull(moduleCode, type, day, startTime, endTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.facilitator \u003d facilitator;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonType getType() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public DayOfWeek getDay() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public Facilitator getFacilitator() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return facilitator;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean doesFacilitatorExist() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return getFacilitator() !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean doesVenueExist() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return getVenue() !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Checks if the venue of the lessons are the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param otherLesson The other lesson to compare with."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return True if lessons are at the same venue and false otherwise."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private boolean isSameVenue(Lesson otherLesson) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        boolean isSameVenue \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (otherLesson.doesVenueExist() \u0026\u0026 doesVenueExist()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            isSameVenue \u003d otherLesson.getVenue().equals(getVenue());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else if (!otherLesson.doesVenueExist() \u0026\u0026 !doesVenueExist()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            isSameVenue \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return isSameVenue;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Checks if the facilitators of the lessons are the same."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param otherLesson The other lesson to compare with."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return True if lessons have the same facilitator and false otherwise."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private boolean isSameFacilitator(Lesson otherLesson) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        boolean isSameFacilitator \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (otherLesson.doesFacilitatorExist() \u0026\u0026 doesFacilitatorExist()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            isSameFacilitator \u003d otherLesson.getFacilitator().equals(getFacilitator());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else if (!otherLesson.doesFacilitatorExist() \u0026\u0026 !doesFacilitatorExist()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            isSameFacilitator \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return isSameFacilitator;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return otherLesson.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 otherLesson.getType().equals(getType())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 otherLesson.getDay().equals(getDay())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 otherLesson.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 isSameFacilitator(otherLesson)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                \u0026\u0026 isSameVenue(otherLesson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Compares the instance of lesson to {@code lesson}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public int compareTo(Lesson lesson) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        DayOfWeek day \u003d lesson.getDay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LocalTime time \u003d lesson.getStartTime();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        int val \u003d this.getDay().compareTo(day);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (val \u003e 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else if (val \u003c 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return this.getStartTime().compareTo(time);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Checks if type is a valid lesson type."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return True if it is valid and false otherwise."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static boolean isValidType(String type) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (LessonType t : LessonType.values()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (t.name().equals(type)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Converts string to a lesson type."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public static LessonType convertStringToLessonType(String type) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (LessonType t : LessonType.values()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (t.name().equals(type)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new InvalidLessonTypeException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return getModuleCode() + \" \" + getType() + \" \" + getDay() + \" \" + getStartTime() + \"-\" + getEndTime();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public Optional\u003cLocalTime\u003e getComparableTime() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return Optional.of(getStartTime());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 8,
      "alushingg": 2,
      "heidicrq": 180,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/LessonList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * A list of lessons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private List\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        this.lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Adds a lesson to the list of lessons."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param lesson The lesson to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (contains(lesson)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Edits an existing lesson."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param target Lesson to be changed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param edited Lesson with the new details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void setLesson(Lesson target, Lesson edited) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        if (!contains(target)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else if (contains(edited)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            int index \u003d lessons.indexOf(target);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            lessons.set(index, edited);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e replacement) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessons \u003d replacement;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessons;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Deletes a lesson from the list of lessons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param lesson The lesson to be deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void deleteLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessons.remove(lesson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Finds a list of lessons by day."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param day The day of the lessons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return The list of lessons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e findLessonsByDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        List\u003cLesson\u003e lessonsOnDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (lesson.getDay().equals(day)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                lessonsOnDate.add(lesson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessonsOnDate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Finds next lesson that is going to happen."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return The next lesson happening."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public Lesson findNextLesson() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        Collections.sort(lessons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LocalDate curDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        DayOfWeek curDay \u003d curDate.getDayOfWeek();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        LocalTime curTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (lesson.getDay().compareTo(curDay) \u003d\u003d 0 \u0026\u0026 lesson.getStartTime().compareTo(curTime) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return lesson;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            } else if (lesson.getDay().compareTo(curDay) \u003e 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return lesson;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Finds lesson by module code."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param moduleCode The module code of the lessons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return The list of lessons with the particular module code."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e findLessonByModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        List\u003cLesson\u003e lessonWithCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (lesson.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                lessonWithCode.add(lesson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return lessonWithCode;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Checks if lesson list contains a lesson."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param lesson lesson to be checked."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return True is lesson is in the list and false otherwise."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean contains(Lesson lesson) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (Lesson l : lessons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (lesson.equals(l)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * Finds the index of a lesson in the list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @param lesson Lesson to be checked."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     * @return The index found."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public int findIndex(Lesson lesson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        for (Lesson l : lessons) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            if (l.equals(lesson)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/LessonType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * Represents the different types of lessons."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public enum LessonType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    LEC, TUT, SEC, REC, LAB"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 8,
      "alushingg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Signals that the operation will result in duplicate Lessons"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * (Facilitators are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        super(\"Operation would result in duplicate lessons.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/InvalidLessonTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Signals that the operation cannot proceed because the lesson type provided is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class InvalidLessonTypeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public InvalidLessonTypeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        super(\"Lesson type provided is invalid.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Signals that the operation is unable to find the specified Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        super(\"Operation is unable to find the specified Lesson.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a Module in Mod Manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Module(ModuleCode moduleCode, Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(moduleCode, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns true if both modules have the same module code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param otherModule The other module to compare with."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @return true if both modules have the same module code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param other The other object to compare with."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return true if both modules are equal."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u0026\u0026 otherModule.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Objects.hash(moduleCode, description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        builder.append(getModuleCode()).append(\"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (getDescription().value !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            builder.append(\"Description: \").append(getDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 1,
      "NNpanpan": 1,
      "alushingg": 67,
      "zixinn": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/ModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Represents a ModuleCode in the Mod Manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \"Module codes should be alphanumeric with no spaces and should not exceed 10 characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 10;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "zixinn": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * As such, adding and updating of modules uses Module#isSameModule(Module) for equality so as"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * to ensure that the module being added or updated is unique in terms of identity in the UniqueModuleList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * However, the removal of a module uses Module#equals(Object) so as to ensure that the module"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean containsModuleCode(String toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList.stream().anyMatch(module -\u003e module.getModuleCode().moduleCode.equals(toCheck));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the module with the specified {@code moduleCode}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Optional\u003cModule\u003e find(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (Module module : internalList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                return Optional.of(module);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * {@code modules} must not contain duplicate module."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the list of modules."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @return the list of modules."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public List\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Signals that the operation will result in duplicate Modules"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * (Modules are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(\"Operation is unable to find the specified module.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.DailySchedulableInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Represents a Task in Mod Manager. A Task in Mod Manager is strictly composed in a Module."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public class Task implements TaskInterface, DailySchedulableInterface {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private static DateTimeFormatter dateTimeFormatter \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .appendPattern(\"dd/MM/yyyy[ HH:mm]\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected Description description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected TaskDateTime taskTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Creates a new Task with {@code description} associated with a Module."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The Task is assumed to be uncompleted when created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param description the description/details of our task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public Task(Description description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public Task(Description description, TaskDateTime taskTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Retrieves the description of our Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return description.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * checks if our Task is completed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @return boolean to indicate whether our Task is completed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Marks our Task as completed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * returns true if the Task is marked as done, false if the task has already been marked as done"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (isTaskDone()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Gets the status icon of our Task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected LocalDateTime getTime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskTime.getLocalDateTime();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected boolean isTimeAvailable() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskTime !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * outputs the Time of the Task (hour:minute) in human readable form."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public String getTimeOutput() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskTime.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * outputs the Date in the week of the task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected String getDateInWeek() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskTime.getDateInWeek();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * returns a String representation of a Task instance."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @return String String representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        String time \u003d isTimeAvailable() ? \" \" + getTimeOutput() + \"\\n\" : \"\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                + time;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * returns a String representation of a Task instance in our database."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @return String a Task representation in our database"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected String toDatabase() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        int isDoneInt \u003d (isDone) ? 1 : 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return isDoneInt + \" | \" + description + \" | \" + getTimeOutput() + \" | \" + getTimeOutput();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if both tasks are the same"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param otherTask The other task to compare with."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @return true if both tasks have the same description and time slot"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 otherTask.getTime().equals(getTime());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "     * Compares the two timestamps for order."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "     * Earlier timestamps are considered smaller"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assert (other instanceof Task);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return getTime().compareTo(otherTask.getTime());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return otherTask.getDescription().equals(getDescription()) // same definition"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 otherTask.compareTo(this) \u003d\u003d 0; // same time"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public Optional\u003cLocalTime\u003e getComparableTime() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return Optional.of(taskTime.toLocalTime());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 161,
      "NNpanpan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Represents a Module\u0027s taskTime in Mod Manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTaskTime(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskDateTime implements Comparable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            \"Task can take any values, and it should not be more than 64 characters\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The first character of the taskTime must not be a whitespace,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\"; // to impose stricter requirements!!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private static DateTimeFormatter dateTimeFormatter \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .appendPattern(\"dd/MM/yyyy[ HH:mm]\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public final LocalDateTime taskTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Constructs a {@code LocalDateTime}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskDateTime(String date) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        checkArgument(date \u003d\u003d null || isValidTaskTime(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.taskTime \u003d LocalDate.parse(date, dateTimeFormatter.ofPattern(\"dd/MM/yyyy\")).atStartOfDay();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Constructs a {@code LocalDateTime}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param timeInDay time period in day"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskDateTime(String date, String timeInDay) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        checkArgument(date \u003d\u003d null || isValidTaskTime(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        LocalTime timeInTheDay \u003d LocalTime.parse(timeInDay, dateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.taskTime \u003d LocalDateTime.of(LocalDate.parse(date, dateTimeFormatter.ofPattern(\"dd/MM/yyyy\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                timeInTheDay);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if a given string is a valid taskTime."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static boolean isValidTaskTime(String test) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // to have further check on this!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 64;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public LocalTime toLocalTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return taskTime.toLocalTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * outputs the Date in the week of the task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected String getDateInWeek() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        DayOfWeek dayInWeek \u003d taskTime.getDayOfWeek();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        String title \u003d dayInWeek.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return title.charAt(0) + title.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskTime;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Compares the two Deadlines for order."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Nearer deadlines are considered smaller"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assert (other instanceof TaskDateTime); // can only compare between Tasks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        TaskDateTime otherTask \u003d (TaskDateTime) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime.isAfter(otherTask.taskTime)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else if (taskTime.isBefore(otherTask.taskTime)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // note for Command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // prevent users from creating 00:00 time. For this time period, the user should create an all day Task instead."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime.isEqual(taskTime.toLocalDate().atStartOfDay())) { // no time in day"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return taskTime.format(dateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskTime.format(dateTimeFormatter.ofPattern(\"dd/MM/yyyy[ HH:mm]\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                || (other instanceof Task // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 ((taskTime \u003d\u003d null \u0026\u0026 ((Task) other).taskTime \u003d\u003d null)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                || (taskTime !\u003d null \u0026\u0026 ((Task) other).taskTime !\u003d null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 taskTime.equals(((Task) other).taskTime)))); // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskTime !\u003d null ? taskTime.hashCode() : 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 125,
      "NNpanpan": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Interface for Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public interface TaskInterface extends Comparable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    String getDescription();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    boolean isTaskDone();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    boolean markAsDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    String getTimeOutput();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 10,
      "NNpanpan": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * TaskList is a wrapper class for a List of Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskList implements TaskListInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected TaskList(Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.tasks \u003d storage.getAllTasksFromFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        message.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        message.append(task + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        message.append(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        //return message.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            result.append((i + 1) + \". \" + tasks.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        //return result.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskList viewTasksByName(String word) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskList(tasks.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .filter(task -\u003e task.getDescription().contains(word))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskList viewTasksByDay(int day) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskList(tasks.stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .filter(task -\u003e task.isTimeAvailable())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .filter(task -\u003e task.getTime().getDayOfMonth() \u003d\u003d day)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskList viewTasksByMonth(int month) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskList(tasks.stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .filter(task -\u003e task.isTimeAvailable())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .filter(task -\u003e task.getTime().getMonthValue() \u003d\u003d month)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskList viewTasksByYear(int year) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskList(tasks.stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .filter(task -\u003e task.isTimeAvailable())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .filter(task -\u003e task.getTime().getYear() \u003d\u003d year)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskList viewUpcomingTasks() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        List\u003cTask\u003e sortedResult \u003d new ArrayList\u003cTask\u003e(tasks);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Collections.sort(sortedResult);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new TaskList(sortedResult);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected List\u003cTask\u003e viewAllTasks() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected int getTasksLength() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    protected Task getTaskAtPosition(int taskNumber) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return tasks.get(taskNumber);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void modifyTask(int taskNumber) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void makeTaskDone(int taskNumber) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        //return \"Nice! I\u0027ve marked this task as done: \" + \"\\n\" + tasks.get(taskNumber);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        message.append(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        message.append(tasks.get(taskNumber) + \"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        message.append(\"Now you have \" + tasks.size() + \" tasks in the list. \\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        //return message.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskListInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Interface for a TaskList, which is a List of Tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public interface TaskListInterface {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void printTasks();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    TaskListInterface viewTasksByName(String word);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    TaskListInterface viewTasksByDay(int day);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    TaskListInterface viewTasksByMonth(int month);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    TaskListInterface viewTasksByYear(int year);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    TaskListInterface viewUpcomingTasks();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void modifyTask(int taskNumber);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void makeTaskDone(int taskNumber);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void deleteTask(int taskNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskListStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Stub class for TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskListStub {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Prints class in the Module tab."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // output for Module\u0027s class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \"1. Programming Assignment 1, 21/03/2020 18:00 \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                + \"2. Written Assignment 1, 01/03/2020 23:59 \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                + \"3. Review Lecture 7, 05/03/2020 \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        );"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Stub class for Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskStub implements TaskInterface {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return \"CS3230 Programming Assignment 2\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return true; // can only call once"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public String getTimeOutput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return \"21/03/2020 18:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public int compareTo(Object o) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return 0; // ?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * As such, adding and updating of tasks uses Task#isSameTask(Task) for equality so as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * to ensure that the task being added or updated is unique in terms of identity in the UniqueTaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * However, the removal of a task uses Task#equals(Object) so as to ensure that the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code tasks} must not contain duplicate task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns the list of tasks."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @return the list of tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Signals that the operation will result in duplicate Tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * (Tasks are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        super(\"Operation is unable to find the specified task.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DailySchedulableComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * A comparator to compare two items in a Calendar day"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public class DailySchedulableComparator implements Comparator\u003cDailySchedulableInterface\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public int compare(DailySchedulableInterface o1, DailySchedulableInterface o2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        Optional\u003cLocalTime\u003e o1Time \u003d o1.getComparableTime();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        Optional\u003cLocalTime\u003e o2Time \u003d o2.getComparableTime();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        if (o1Time.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        if (o2Time.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        return o1Time.get().compareTo(o2Time.get());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DailySchedulableInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * Interface for objects that can be scheduled and shown on calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * Objects of this type should return information to compare within the same date,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " * i.e. beginning time and ending time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "public interface DailySchedulableInterface {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    Optional\u003cLocalTime\u003e getComparableTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Represents a Module\u0027s description in Mod Manager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \"Description can take any values, and it should not be more than 64 characters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        checkArgument(description \u003d\u003d null || isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d 64;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 ((value \u003d\u003d null \u0026\u0026 ((Description) other).value \u003d\u003d null)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                || (value !\u003d null \u0026\u0026 ((Description) other).value !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)))); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return value !\u003d null ? value.hashCode() : 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 1,
      "zixinn": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.TaskDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Module[] modules \u003d new Module[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            new Module(new ModuleCode(\"CS2103T\"), new Description(\"Software Engineering\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            new Module(new ModuleCode(\"CS2101\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            new Description(\"Effective Communication for Computing Professionals\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            new Module(new ModuleCode(\"ES2660\"), new Description(\"Communicating in Information Age\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            new Module(new ModuleCode(\"MA1521\"), new Description(\"Calculus for Computing\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            new Module(new ModuleCode(\"ST2334\"), new Description(\"Probability and Statistics\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static Facilitator[] getSampleFacilitators() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Facilitator[] {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            new Facilitator(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                new Office(\"COM2-03-04\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                getModuleCodeSet(\"CS2103T\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            new Facilitator(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        new Office(\"COM1-02-18\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                        getModuleCodeSet(\"CS2103T\", \"CS2101\")), new Facilitator(new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        new Office(\"AS6-04-11\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        getModuleCodeSet(\"ES2660\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            new Facilitator(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        new Office(\"S16-04-03\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        getModuleCodeSet(\"MA1521\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            new Facilitator(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        new Office(\"S17-03-15\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                        getModuleCodeSet(\"ST2334\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            new Facilitator(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        new Office(\"AS4-01-13\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        getModuleCodeSet(\"CS2101\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new Task[]{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            new Task(new Description(\"Programming Assignment 2\"), new TaskDateTime(\"18/03/2020\")),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            new Task(new Description(\"Programming Assignment 3\"), new TaskDateTime(\"21/03/2020\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (Facilitator sampleFacilitator : getSampleFacilitators()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            sampleAb.addFacilitator(sampleFacilitator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            sampleAb.addModule(sampleModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns a module code set containing the list of strings given."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static Set\u003cModuleCode\u003e getModuleCodeSet(String... strings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .map(ModuleCode::new)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 11,
      "alushingg": 20,
      "-": 34,
      "zixinn": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFacilitator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Jackson-friendly version of {@link Facilitator}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class JsonAdaptedFacilitator {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Facilitator\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final String office;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final List\u003cJsonAdaptedModuleCode\u003e moduleCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a {@code JsonAdaptedFacilitator} with the given facilitator details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public JsonAdaptedFacilitator(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                                  @JsonProperty(\"email\") String email, @JsonProperty(\"office\") String office,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                                  @JsonProperty(\"moduleCode\") List\u003cJsonAdaptedModuleCode\u003e moduleCode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.office \u003d office;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.moduleCode.addAll(moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Converts a given {@code Facilitator} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public JsonAdaptedFacilitator(Facilitator source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        office \u003d source.getOffice().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCode.addAll(source.getModuleCodes().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .map(JsonAdaptedModuleCode::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Converts this Jackson-friendly adapted facilitator object into the model\u0027s {@code Facilitator} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted facilitator."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Facilitator toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final List\u003cModuleCode\u003e facilitatorModuleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (JsonAdaptedModuleCode moduleCode : moduleCode) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            facilitatorModuleCodes.add(moduleCode.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (phone !\u003d null \u0026\u0026 !Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (email !\u003d null \u0026\u0026 !Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (office !\u003d null \u0026\u0026 !Office.isValidOffice(office)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new IllegalValueException(Office.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Office modelOffice \u003d new Office(office);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Set\u003cModuleCode\u003e modelModuleCodes \u003d new HashSet\u003c\u003e(facilitatorModuleCodes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Facilitator(modelName, modelPhone, modelEmail, modelOffice, modelModuleCodes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "zixinn": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class JsonAdaptedModule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                             @JsonProperty(\"description\") String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (description !\u003d null \u0026\u0026 !Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Module(modelModuleCode, modelDescription);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 1,
      "zixinn": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Jackson-friendly version of {@link ModuleCode}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "class JsonAdaptedModuleCode {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Constructs a {@code JsonAdaptedModuleCode} with the given {@code moduleCode}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public JsonAdaptedModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Converts a given {@code ModuleCode} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public JsonAdaptedModuleCode(ModuleCode source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCode \u003d source.moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Converts this Jackson-friendly adapted module code object into the model\u0027s {@code ModuleCode} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleCode toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.TaskDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class JsonAdaptedTask {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final String taskTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given module details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                           @JsonProperty(\"taskTime\") String taskTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.taskTime \u003d source.getTimeOutput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!TaskDateTime.isValidTaskTime(taskTime)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new IllegalValueException(TaskDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        final TaskDateTime modelTaskTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (taskTime.length() \u003c\u003d 10) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            modelTaskTime \u003d new TaskDateTime(taskTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            modelTaskTime \u003d new TaskDateTime(taskTime.split(\" \")[0], taskTime.split(\" \")[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (description !\u003d null \u0026\u0026 !Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        System.out.println(\"time received \" + modelTaskTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return new Task(modelDescription, modelTaskTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 64,
      "NNpanpan": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "@JsonRootName(value \u003d \"modmanager\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FACILITATOR \u003d \"Facilitator list contains duplicate facilitator(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Task list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \"Facilitator list contains facilitator(s) whose module code does not exist in Mod Manager.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public static final String MESSAGE_TASK_DOES_NOT_EXIST \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            \"Task list contains task(s) whose does not belong to any module in Mod Manager.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private final List\u003cJsonAdaptedFacilitator\u003e facilitators \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given modules and facilitators."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                                       @JsonProperty(\"facilitators\") List\u003cJsonAdaptedFacilitator\u003e facilitators,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                                       @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (modules !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            this.modules.addAll(modules);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (facilitators !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            this.facilitators.addAll(facilitators);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        facilitators.addAll(source.getFacilitatorList().stream().map(JsonAdaptedFacilitator::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        AddressBook modManager \u003d new AddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (modManager.hasModule(module)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            modManager.getModules().add(module);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (JsonAdaptedFacilitator jsonAdaptedFacilitator : facilitators) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Facilitator facilitator \u003d jsonAdaptedFacilitator.toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (modManager.hasFacilitator(facilitator)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FACILITATOR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            for (ModuleCode moduleCode : facilitator.getModuleCodes()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (!modManager.hasModuleCode(moduleCode.moduleCode)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            modManager.getFacilitators().add(facilitator);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            if (modManager.hasTask(task)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            /* to check later, 17 Mar 00:43"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            for (ModuleCode moduleCode : tasks.getModuleCodes()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                if (!modManager.hasModuleCode(moduleCode.moduleCode)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    throw new IllegalValueException(MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            modManager.getTasks().add(task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return modManager;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 26,
      "alushingg": 32,
      "-": 44,
      "zixinn": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.DailySchedulableInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * An UI component that displays information of a class or task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalendarCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final String FXML \u003d \"CalendarCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private StackPane cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private VBox card;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "     * Constructs a card for Schedulable item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public CalendarCard(DailySchedulableInterface item) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        if (item instanceof Task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            initTaskCard((Task) item);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        if (item instanceof Lesson) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            initLessonCard((Lesson) item);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "     * Initializes a Calendar Card for a task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    private void initTaskCard(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        description.setText(task.getDescription());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (!task.getTimeOutput().equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            time.setText(task.getTimeOutput());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        card.setStyle(\"-fx-background-color: #ffffd1; -fx-background-radius: 8;\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "     * Initializes a Calendar Card for a lesson"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    private void initLessonCard(Lesson lesson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String code \u003d lesson.getModuleCode().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        switch (lesson.getType()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case LAB:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            description.setText(String.format(\"%s LAB\", code));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case REC:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            description.setText(String.format(\"%s REC\", code));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case LEC:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            description.setText(String.format(\"%s LEC\", code));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case SEC:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            description.setText(String.format(\"%s SEC\", code));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        case TUT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            description.setText(String.format(\"%s TUT\", code));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        time.setText(lesson.getStartTime().toString() + \" - \" + lesson.getEndTime().toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //     * Constructs a card for task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //    public CalendarCard(Task task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        super(FXML);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        description.setText(task.getDescription());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        if (!task.getTimeOutput().equals(\"\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            time.setText(task.getTimeOutput());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        card.setStyle(\"-fx-background-color: #ffffd1; -fx-background-radius: 8;\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //     * Constructs a card for lesson."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //    public CalendarCard(Lesson lesson) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        super(FXML);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        String code \u003d lesson.getModuleCode().toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        switch (lesson.getType()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        case LAB:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            description.setText(String.format(\"%s LAB\", code));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        case REC:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            description.setText(String.format(\"%s REC\", code));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        case LEC:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            description.setText(String.format(\"%s LEC\", code));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        case SEC:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            description.setText(String.format(\"%s SEC\", code));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        case TUT:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            description.setText(String.format(\"%s TUT\", code));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //        time.setText(lesson.getStartTime().toString() + \" - \" + lesson.getEndTime().toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 59,
      "alushingg": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarCardPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Panel to contain the list of cards of tasks and classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalendarCardPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final String FXML \u003d \"CalendarCardPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private VBox cardHolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs the CalendarCardPanel."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public CalendarCardPanel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Adds a class or task card to the panel."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param card the class or task card."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void addCard(CalendarCard card) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        cardHolder.getChildren().add(card.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Clears the cards for a new view."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void clearCards() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        cardHolder.getChildren().clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarLabel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Label for the days of the week on the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalendarLabel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final String FXML \u003d \"CalendarLabel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Label calendarLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public CalendarLabel(String label) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.calendarLabel.setText(label);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.calendar.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.DailySchedulableComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.DailySchedulableInterface;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * The view for the calendar."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final String FXML \u003d \"Calendar.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private List\u003cCalendarCardPanel\u003e cardPanels \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Label calendarTitle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Constructs the CalendarView."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    public CalendarView(String week, List\u003cTask\u003e tasks, List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        calendarTitle.setText(String.format(\"Viewing: %s week\", week));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String[] daysOfWeek \u003d new String[] {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \"Saturday\", \"Sunday\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            CalendarLabel calendarLabel \u003d new CalendarLabel(daysOfWeek[col]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            calendarGrid.add(calendarLabel.getRoot(), col, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            CalendarCardPanel calendarCardPanel \u003d new CalendarCardPanel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            cardPanels.add(calendarCardPanel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            calendarGrid.add(calendarCardPanel.getRoot(), col, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        addCards(week, tasks, lessons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Adds cards to the calendar."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void addCards(String week, List\u003cTask\u003e tasks, List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (week.equals(\"this\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            calendar \u003d Calendar.getNowCalendar();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            calendar \u003d Calendar.getNextWeekCalendar();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar[] calendars \u003d calendar.getWeek();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            final int cnt \u003d i;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            CalendarCardPanel panel \u003d cardPanels.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            Calendar c \u003d calendars[i];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            List\u003cDailySchedulableInterface\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            lessons.forEach(x -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                if (x.getDay().getValue() \u003d\u003d cnt) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                    items.add(x);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            tasks.forEach(x -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                if (c.isWithinDate(x)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                    items.add(x);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            items.sort(new DailySchedulableComparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            for (DailySchedulableInterface item : items) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                panel.addCard(new CalendarCard(item));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 26,
      "alushingg": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "    private String cached \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            String txt \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            if (txt.equals(cached)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            cached \u003d txt;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 6,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FacilitatorCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * An UI component that displays information of a {@code Facilitator}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilitatorCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String FXML \u003d \"FacilitatorListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public final Facilitator facilitator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FlowPane phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FlowPane email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FlowPane office;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FlowPane moduleCodes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorCard(Facilitator facilitator, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.facilitator \u003d facilitator;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        name.setText(facilitator.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (facilitator.getPhone().value !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            phone.getChildren().add(new Label(facilitator.getPhone().value));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (facilitator.getEmail().value !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            email.getChildren().add(new Label(facilitator.getEmail().value));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (facilitator.getOffice().value !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            office.getChildren().add(new Label(facilitator.getOffice().value));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitator.getModuleCodes().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .sorted(Comparator.comparing(moduleCode -\u003e moduleCode.moduleCode))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .forEach(moduleCode -\u003e moduleCodes.getChildren().add(new Label(moduleCode.moduleCode)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!(other instanceof FacilitatorCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilitatorCard card \u003d (FacilitatorCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 facilitator.equals(card.facilitator);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "zixinn": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FacilitatorListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Panel containing the list of facilitators."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilitatorListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String FXML \u003d \"FacilitatorListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ListView\u003cFacilitator\u003e facilitatorListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorListPanel(ObservableList\u003cFacilitator\u003e facilitatorList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitatorListView.setItems(facilitatorList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitatorListView.setCellFactory(listView -\u003e new FacilitatorListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Facilitator} using a {@code FacilitatorCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    class FacilitatorListViewCell extends ListCell\u003cFacilitator\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        protected void updateItem(Facilitator facilitator, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            super.updateItem(facilitator, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (empty || facilitator \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                setGraphic(new FacilitatorCard(facilitator, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FacilitatorModCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * An UI component that displays information of a {@code Facilitator} for a module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class FacilitatorModCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final String FXML \u003d \"FacilitatorListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public final Facilitator facilitator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private VBox cardbox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private FlowPane phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private FlowPane email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private FlowPane office;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private FlowPane moduleCodes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public FacilitatorModCard(Facilitator facilitator, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        this.facilitator \u003d facilitator;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        name.setText(facilitator.getName().fullName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (facilitator.getPhone().value !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            phone.getChildren().add(new Label(facilitator.getPhone().value));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (facilitator.getEmail().value !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            email.getChildren().add(new Label(facilitator.getEmail().value));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (facilitator.getOffice().value !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            office.getChildren().add(new Label(facilitator.getOffice().value));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        cardbox.setMinHeight(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        if (!(other instanceof FacilitatorCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        FacilitatorModCard card \u003d (FacilitatorModCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u0026\u0026 facilitator.equals(card.facilitator);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FacilitatorPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": " * Panel containing the list of facilitators for a module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class FacilitatorPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private static final String FXML \u003d \"FacilitatorPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private ListView\u003cFacilitator\u003e facilitatorsView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public FacilitatorPanel(ObservableList\u003cFacilitator\u003e facilitatorList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        facilitatorsView.setItems(facilitatorList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        facilitatorsView.setCellFactory(listView -\u003e new FacilitatorListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Facilitator} using a {@code FacilitatorCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    class FacilitatorListViewCell extends ListCell\u003cFacilitator\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        protected void updateItem(Facilitator facilitator, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            super.updateItem(facilitator, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            if (empty || facilitator \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                setGraphic(new FacilitatorModCard(facilitator, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f10-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class LessonPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private static final String FXML \u003d \"LessonPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private ListView\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public LessonPanel() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void updateLessonPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //lessons.setText(\"\\u2022 lessons .... \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 4,
      "heidicrq": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandResultUi;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FacilitatorListPanel facilitatorListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private ModuleDetailsPanel moduleDetailsPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private LessonPanel lessonPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private TaskDetailsPanel taskPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private FacilitatorPanel facilitatorPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private StackPane facilitatorListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private StackPane calendarViewPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private TabPane mainTabPane;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Tab module;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Tab oneModule;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Tab facilitator;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Tab calendar;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private Tab task;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private StackPane moduleDetailsPlaceholder;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private StackPane lessonPanelPlaceholder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private StackPane taskPanelPlaceholder;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private StackPane facilitatorPanelPlaceholder;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitatorListPanel \u003d new FacilitatorListPanel(logic.getFilteredFacilitatorList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitatorListPanelPlaceholder.getChildren().add(facilitatorListPanel.getRoot());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        calendarView \u003d new CalendarView(\"this\", logic.getFilteredTaskList(), logic.getLessons());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        calendarViewPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        moduleDetailsPanel \u003d new ModuleDetailsPanel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        moduleDetailsPlaceholder.getChildren().add(moduleDetailsPanel.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessonPanel \u003d new LessonPanel();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        lessonPanelPlaceholder.getChildren().add(lessonPanel.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        taskPanel \u003d new TaskDetailsPanel();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        taskPanelPlaceholder.getChildren().add(taskPanel.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        facilitatorPanel \u003d new FacilitatorPanel(logic.getFacilitatorListForModule());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        facilitatorPanelPlaceholder.getChildren().add(facilitatorPanel.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        System.out.println(\"Tasks available\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        System.out.println(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Switches to module view"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void handleSwitchToModule() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        mainTabPane.getSelectionModel().select(module);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Switches to module view"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void handleSwitchToOneModule() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        mainTabPane.getSelectionModel().select(oneModule);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        moduleDetailsPanel.changeDisplayModule(logic.getModule());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Switches to facilitator view"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void handleSwitchToFacilitator() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        mainTabPane.getSelectionModel().select(facilitator);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Switches to calendar view"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void handleSwitchToCalendar() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        mainTabPane.getSelectionModel().select(calendar);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Switches to task view"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void handleSwitchToTask() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        mainTabPane.getSelectionModel().select(task);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Changes the calendar view to the specified week."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * @param week The week to be viewed"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void viewCalendar(String week) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        calendarView \u003d new CalendarView(week, logic.getFilteredTaskList(), logic.getLessons());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        calendarViewPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        calendarViewPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorListPanel getFacilitatorListPanel() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return facilitatorListPanel;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            viewCalendar(\"this\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            switch (commandResult.getType()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case CLEAR:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case MODULE:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                handleSwitchToModule();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case MODULE_VIEW:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case LESSON:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                handleSwitchToOneModule();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case TASK:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                handleSwitchToTask();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case FACILITATOR:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                handleSwitchToFacilitator();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case CALENDAR:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                CommandResultUi result \u003d (CommandResultUi) commandResult;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                handleSwitchToCalendar();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                viewCalendar(result.getArgForUi());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 22,
      "NNpanpan": 2,
      "alushingg": 34,
      "-": 187,
      "zixinn": 84,
      "heidicrq": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FlowPane description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCode.setText(module.getModuleCode().moduleCode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (module.getDescription().value !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            description.getChildren().add(new Label(module.getDescription().value));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleDetailsPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A ui for the module details bar that is displayed at the top of the module tab."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "heidicrq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "public class ModuleDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    private static final String FXML \u003d \"ModuleDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Label moduleDetails;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public ModuleDetailsPanel() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleDetails.setText(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        GridPane.setHalignment(moduleDetails, HPos.CENTER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     * Sets the module code and description of the module to be displayed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void changeDisplayModule(Optional\u003cModule\u003e module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        module.ifPresent(value -\u003e moduleDetails.setText(value.getModuleCode().moduleCode + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + value.getDescription().value));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 7,
      "heidicrq": 20,
      "zixinn": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListPanel.ModuleListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private Label taskTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (task.getDescription() !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            description.setText(task.getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            description.setText(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!task.getTimeOutput().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            taskTime.setText(task.getTimeOutput());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            taskTime.setText(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskDetailsPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * A ui for the module details bar that is displayed at the top of the modules tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskDetailsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private static final String FXML \u003d \"TaskDetailsPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private ListView\u003cTask\u003e tasksView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public TaskDetailsPanel() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void changeDisplayModule(String string) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //setTaskDetails.setText(string);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 22,
      "alushingg": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListPanel.TaskListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 41
    }
  },
  {
    "path": "src/main/resources/view/Calendar.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "\u003cVBox fx:id\u003d\"calendarBase\" alignment\u003d\"TOP_CENTER\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cStackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003cLabel fx:id\u003d\"calendarTitle\" alignment\u003d\"TOP_CENTER\" contentDisplay\u003d\"TOP\" style\u003d\"-fx-text-fill: white\" text\u003d\"Calendar\"\u003e \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cInsets top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"calendarScrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" pannable\u003d\"true\" style\u003d\"-fx-background-color: #383838;\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            \u003cGridPane fx:id\u003d\"calendarGrid\" alignment\u003d\"TOP_CENTER\" gridLinesVisible\u003d\"true\" style\u003d\"-fx-background-color: #3c3e3f;\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" valignment\u003d\"TOP\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                  \u003cRowConstraints valignment\u003d\"TOP\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 14,
      "alushingg": 32
    }
  },
  {
    "path": "src/main/resources/view/CalendarCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003cStackPane fx:id\u003d\"cardPane\" alignment\u003d\"TOP_LEFT\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cVBox fx:id\u003d\"card\" style\u003d\"-fx-background-color: #f9f7f8; -fx-background-radius: 8\" StackPane.alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alushingg": 23
    }
  },
  {
    "path": "src/main/resources/view/CalendarCardPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarCardPanel\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003cStackPane alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"1.5\" minHeight\u003d\"1.5\" prefHeight\u003d\"1.5\" style\u003d\"-fx-background-color: #80d8ff;\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"20.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003cStackPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cVBox fx:id\u003d\"cardHolder\" spacing\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                            \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                            \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"20.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alushingg": 30
    }
  },
  {
    "path": "src/main/resources/view/CalendarLabel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003cStackPane alignment\u003d\"TOP_CENTER\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cLabel fx:id\u003d\"calendarLabel\" alignment\u003d\"TOP_CENTER\" text\u003d\"day\" style\u003d\"-fx-text-fill: white\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"20.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alushingg": 18
    }
  },
  {
    "path": "src/main/resources/view/FacilitatorListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cVBox fx:id\u003d\"cardbox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"moduleCodes\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"office\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 30,
      "zixinn": 5
    }
  },
  {
    "path": "src/main/resources/view/FacilitatorListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "  \u003cListView fx:id\u003d\"facilitatorListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/resources/view/FacilitatorPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cLabel wrapText\u003d\"true\" style\u003d\"-fx-text-fill: white; -fx-font: 12pt Default; -fx-font-weight: bold;\" text\u003d\"Facilitators\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cListView fx:id\u003d\"facilitatorsView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alushingg": 16
    }
  },
  {
    "path": "src/main/resources/view/LessonPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" styleClass\u003d\"lesson-panel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" wrapText\u003d\"true\" style\u003d\"-fx-text-fill: white; -fx-font: 12pt Default; -fx-font-weight: bold;\" text\u003d\"Classes\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cListView fx:id\u003d\"lessons\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c/VBox \u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alushingg": 14,
      "heidicrq": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Mod Manager\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cURL value\u003d\"@TabTheme.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "            \u003cTabPane fx:id\u003d\"mainTabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u003cTab fx:id\u003d\"module\" text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003cVBox fx:id\u003d\"moduleList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u003cTab fx:id\u003d\"oneModule\" text\u003d\"Module\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    \u003cVBox fx:id\u003d\"moduleDetails\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"moduleDetailsPlaceholder\" maxHeight\u003d\"25\" style\u003d\"-fx-border-radius: 8; -fx-background-radius: 8; -fx-background-color: rgba(232, 236, 241, .05);\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                      \u003cGridPane fx:id\u003d\"modbase\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"lessonPanelPlaceholder\" maxHeight\u003d\"50\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-border-radius: 8; -fx-background-radius: 8; -fx-background-color: rgba(232, 236, 241, .05);\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"taskPanelPlaceholder\" maxHeight\u003d\"50\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-border-radius: 8; -fx-background-radius: 8; -fx-background-color: rgba(232, 236, 241, .05);\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"facilitatorPanelPlaceholder\" maxHeight\u003d\"50\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-border-radius: 8; -fx-background-radius: 8; -fx-background-color: rgba(232, 236, 241, .05);\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u003cTab fx:id\u003d\"facilitator\" text\u003d\"Facilitators\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    \u003cVBox fx:id\u003d\"facilitatorList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"facilitatorListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "              \u003cTab fx:id\u003d\"task\" text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003ccontent\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                  \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                \u003c/content\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u003cTab fx:id\u003d\"calendar\" text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"calendarViewPlaceholder\" alignment\u003d\"BOTTOM_LEFT\" GridPane.halignment\u003d\"LEFT\" GridPane.rowSpan\u003d\"2\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                \u003c/Tab\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 17,
      "NNpanpan": 3,
      "alushingg": 39,
      "-": 45,
      "zixinn": 11,
      "heidicrq": 3
    }
  },
  {
    "path": "src/main/resources/view/ModuleDetailsPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003cGridPane styleClass\u003d\"module-details-panel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003cLabel fx:id\u003d\"moduleDetails\" wrapText\u003d\"true\" style\u003d\"-fx-text-fill: white; -fx-font: bold 12pt Default;\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "heidicrq": 11,
      "zixinn": 1
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"55\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zixinn": 33
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zixinn": 8
    }
  },
  {
    "path": "src/main/resources/view/TaskDetailsPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003cVBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" wrapText\u003d\"true\" style\u003d\"-fx-text-fill: white; -fx-font: 12pt Default; -fx-font-weight: bold;\" text\u003d\"Tasks\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    \u003cListView fx:id\u003d\"tasksView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 4,
      "alushingg": 12
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"55\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "      \u003cLabel fx:id\u003d\"taskTime\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 32
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final Index fifthFacilitatorIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(fifthFacilitatorIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(fifthFacilitatorIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(fifthFacilitatorIndex.equals(fifthFacilitatorIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(fifthFacilitatorIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(fifthFacilitatorIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(fifthFacilitatorIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "zixinn": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFICE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String deleteCommand \u003d Command.COMMAND_GROUP_FACIL + \" \" + Command.COMMAND_WORD_DELETE + \" 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        String listCommand \u003d Command.COMMAND_GROUP_FACIL + \" \" + Command.COMMAND_WORD_LIST;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(listCommand, FacilListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        String facilAddCommand \u003d Command.COMMAND_GROUP_FACIL + \" \" + Command.COMMAND_WORD_ADD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + OFFICE_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator expectedFacilitator \u003d new FacilitatorBuilder(AMY).withModuleCodes().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.addFacilitator(expectedFacilitator);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(facilAddCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFilteredFacilitatorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFacilitatorList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModule_emptyModule_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.empty(), model.getModule());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModule_nonEmptyModule_returnsModule() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateModule(CS2103T);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.of(CS2103T), model.getModule());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFacilitatorListForModule_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFacilitatorListForModule().remove(0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 2,
      "alushingg": 3,
      "-": 147,
      "zixinn": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, CommandType.CLEAR, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, CommandType.CLEAR, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "zixinn": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", CommandType.EXIT);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", CommandType.EXIT)));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\", CommandType.EXIT)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different type value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", CommandType.MODULE)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", CommandType.EXIT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\", CommandType.EXIT).hashCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\", CommandType.EXIT).hashCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different type value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", CommandType.MODULE).hashCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "zixinn": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.EditFacilitatorDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2103T \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String VALID_DESCRIPTION_CS2101 \u003d \"Effective Communication for Computing Professionals\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String VALID_OFFICE_AMY \u003d \"COM3-04-04\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public static final String VALID_OFFICE_BOB \u003d \"COM3-03-03\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS2103T \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS2101 \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2103T \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2103T;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String DESCRIPTION_DESC_CS2101 \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String OFFICE_DESC_AMY \u003d \" \" + PREFIX_OFFICE + VALID_OFFICE_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String OFFICE_DESC_BOB \u003d \" \" + PREFIX_OFFICE + VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \" + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \"cs2103*\"; // \u0027*\u0027 not allowed in module codes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"very very very very\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \" very very very very very very very very very long description\"; // string more than 64 characters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String INVALID_OFFICE_DESC \u003d \" \" + PREFIX_OFFICE; // empty string not allowed for offices"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final FacilEditCommand.EditFacilitatorDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final FacilEditCommand.EditFacilitatorDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        DESC_AMY \u003d new EditFacilitatorDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withOffice(VALID_OFFICE_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        DESC_BOB \u003d new EditFacilitatorDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T, VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                CommandType type, Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, type);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * - the address book, filtered facilitator list and selected facilitator in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cFacilitator\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFacilitatorList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFacilitatorList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the facilitator at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static void showFacilitatorAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFacilitatorList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitator \u003d model.getFilteredFacilitatorList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final String[] splitName \u003d facilitator.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateFilteredFacilitatorList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(1, model.getFilteredFacilitatorList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 5,
      "-": 93,
      "zixinn": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, CommandType.EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "zixinn": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, CommandType.HELP);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "zixinn": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/calendar/CalViewCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandResultUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalViewCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void constructor_nullWeek_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CalViewCommand(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void execute_calView_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultUi("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                CalViewCommand.MESSAGE_SUCCESS, CommandType.CALENDAR, \"this\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertCommandSuccess(new CalViewCommand(\"this\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/facilitator/EditFacilitatorDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.EditFacilitatorDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class EditFacilitatorDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilEditCommand.EditFacilitatorDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor editedAmy \u003d new EditFacilitatorDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAmy \u003d new EditFacilitatorDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAmy \u003d new EditFacilitatorDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different office -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAmy \u003d new EditFacilitatorDescriptorBuilder(DESC_AMY).withOffice(VALID_OFFICE_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different module codes -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        editedAmy \u003d new EditFacilitatorDescriptorBuilder(DESC_AMY).withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 3,
      "-": 44,
      "zixinn": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/facilitator/FacilAddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FacilAddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_newFacilitator_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator validFacilitator \u003d new FacilitatorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.addFacilitator(validFacilitator);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(new FacilAddCommand(validFacilitator), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(FacilAddCommand.MESSAGE_SUCCESS, validFacilitator),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_duplicateFacilitator_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorInList \u003d model.getAddressBook().getFacilitatorList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(new FacilAddCommand(facilitatorInList), model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                FacilAddCommand.MESSAGE_DUPLICATE_FACILITATOR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 31,
      "zixinn": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/facilitator/FacilAddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilAddCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_nullFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FacilAddCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_facilitatorAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStubAcceptingFacilitatorAdded modelStub \u003d new ModelStubAcceptingFacilitatorAdded();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator validFacilitator \u003d new FacilitatorBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult commandResult \u003d new FacilAddCommand(validFacilitator).execute(modelStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(String.format(FacilAddCommand.MESSAGE_SUCCESS, validFacilitator),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Arrays.asList(validFacilitator), modelStub.facilitatorsAdded);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_duplicateFacilitator_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator validFacilitator \u003d new FacilitatorBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilAddCommand facilAddCommand \u003d new FacilAddCommand(validFacilitator);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFacilitator(validFacilitator);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                FacilAddCommand.MESSAGE_DUPLICATE_FACILITATOR, () -\u003e facilAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_moduleDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator validFacilitator \u003d new FacilitatorBuilder().withModuleCodes(\"CS2101\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilAddCommand facilAddCommand \u003d new FacilAddCommand(validFacilitator);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithoutModule(CS2103T);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(CommandException.class, String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                FacilAddCommand.MESSAGE_MODULE_DOES_NOT_EXIST, \"CS2101\"), () -\u003e facilAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator alice \u003d new FacilitatorBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator bob \u003d new FacilitatorBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilAddCommand addAliceCommand \u003d new FacilAddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilAddCommand addBobCommand \u003d new FacilAddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilAddCommand addAliceCommandCopy \u003d new FacilAddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitator -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * A Model stub that contains a single facilitator."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private class ModelStubWithFacilitator extends ModelStub {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final Facilitator facilitator;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStubWithFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(facilitator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.facilitator \u003d facilitator;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(facilitator);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return this.facilitator.isSameFacilitator(facilitator);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * A Model stub that always accept the facilitator being added."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private class ModelStubAcceptingFacilitatorAdded extends ModelStub {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final ArrayList\u003cFacilitator\u003e facilitatorsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(facilitator);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return facilitatorsAdded.stream().anyMatch(facilitator::isSameFacilitator);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public void addFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(facilitator);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            facilitatorsAdded.add(facilitator);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * A Model stub that contains no modules."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private class ModelStubWithoutModule extends ModelStub {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final ArrayList\u003cFacilitator\u003e facilitatorsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStubWithoutModule(Module module) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return module.getModuleCode().moduleCode.equals(moduleCode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(facilitator);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return facilitatorsAdded.stream().anyMatch(facilitator::isSameFacilitator);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 72,
      "zixinn": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/facilitator/FacilDeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFacilitatorAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * {@code FacilDeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilDeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorToDelete \u003d model.getFilteredFacilitatorList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .get(INDEX_FIRST_FACILITATOR.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilDeleteCommand deleteCommand \u003d new FacilDeleteCommand(INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(FacilDeleteCommand.MESSAGE_DELETE_FACILITATOR_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                facilitatorToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.deleteFacilitator(facilitatorToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFacilitatorList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilDeleteCommand deleteCommand \u003d new FacilDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorToDelete \u003d model.getFilteredFacilitatorList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .get(INDEX_FIRST_FACILITATOR.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilDeleteCommand deleteCommand \u003d new FacilDeleteCommand(INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(FacilDeleteCommand.MESSAGE_DELETE_FACILITATOR_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                facilitatorToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.deleteFacilitator(facilitatorToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showNoFacilitator(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of facilitator list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getFacilitatorList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilDeleteCommand deleteCommand \u003d new FacilDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilDeleteCommand deleteFirstCommand \u003d new FacilDeleteCommand(INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilDeleteCommand deleteSecondCommand \u003d new FacilDeleteCommand(INDEX_SECOND_FACILITATOR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilDeleteCommand deleteFirstCommandCopy \u003d new FacilDeleteCommand(INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitator -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private void showNoFacilitator(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model.updateFilteredFacilitatorList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(model.getFilteredFacilitatorList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "-": 73,
      "zixinn": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/facilitator/FacilEditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFacilitatorAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.IDA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand.EditFacilitatorDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.EditFacilitatorDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * and unit tests for {@code FacilEditCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilEditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d new FacilitatorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withOffice(VALID_OFFICE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder(editedFacilitator).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(FacilEditCommand.MESSAGE_EDIT_FACILITATOR_SUCCESS, editedFacilitator);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.setFacilitator(model.getFilteredFacilitatorList().get(0), editedFacilitator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index indexLastFacilitator \u003d Index.fromOneBased(model.getFilteredFacilitatorList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator lastFacilitator \u003d model.getFilteredFacilitatorList().get(indexLastFacilitator.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilitatorBuilder facilitatorInList \u003d new FacilitatorBuilder(lastFacilitator);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d facilitatorInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(indexLastFacilitator, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(FacilEditCommand.MESSAGE_EDIT_FACILITATOR_SUCCESS, editedFacilitator);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.setFacilitator(lastFacilitator, editedFacilitator);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilEditCommand.EditFacilitatorDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d model.getFilteredFacilitatorList().get(INDEX_FIRST_FACILITATOR.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(FacilEditCommand.MESSAGE_EDIT_FACILITATOR_SUCCESS, editedFacilitator);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorInFilteredList \u003d model.getFilteredFacilitatorList()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .get(INDEX_FIRST_FACILITATOR.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d new FacilitatorBuilder(facilitatorInFilteredList).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new EditFacilitatorDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(FacilEditCommand.MESSAGE_EDIT_FACILITATOR_SUCCESS, editedFacilitator);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.setFacilitator(model.getFilteredFacilitatorList().get(0), editedFacilitator);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_invalidFacilitatorIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFacilitatorList().size() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * but smaller than size of facilitator list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_invalidFacilitatorIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getFacilitatorList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new EditFacilitatorDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FACILITATOR_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_duplicateFacilitatorUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator firstFacilitator \u003d model.getFilteredFacilitatorList().get(INDEX_FIRST_FACILITATOR.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder(firstFacilitator).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_SECOND_FACILITATOR, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model, FacilEditCommand.MESSAGE_DUPLICATE_FACILITATOR);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_duplicateFacilitatorFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        // edit facilitator in filtered list into a duplicate in mod manager"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorInList \u003d model.getAddressBook().getFacilitatorList().get(INDEX_SECOND_FACILITATOR"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new EditFacilitatorDescriptorBuilder(facilitatorInList).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model, FacilEditCommand.MESSAGE_DUPLICATE_FACILITATOR);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_allOptionalFieldsDeletedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d new FacilitatorBuilder().build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder(editedFacilitator).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.setFacilitator(model.getFilteredFacilitatorList().get(0), editedFacilitator);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model, FacilEditCommand.MESSAGE_ALL_OPTIONAL_FIELDS_DELETED);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_allOptionalFieldsDeletedFilteredList_failure() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitatorInFilteredList \u003d model.getFilteredFacilitatorList()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .get(INDEX_FIRST_FACILITATOR.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d new FacilitatorBuilder(facilitatorInFilteredList).withPhone(null)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withEmail(null).withOffice(null).withModuleCodes().build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new EditFacilitatorDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(null)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                        .withEmail(null).withOffice(null).withModuleCodes().build());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.setFacilitator(model.getFilteredFacilitatorList().get(0), editedFacilitator);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model, FacilEditCommand.MESSAGE_ALL_OPTIONAL_FIELDS_DELETED);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_moduleDoesNotExistUnfilteredList_failure() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d new FacilitatorBuilder(IDA).withModuleCodes(\"CS1231\").build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder(editedFacilitator).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_SECOND_FACILITATOR, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(FacilEditCommand.MESSAGE_MODULE_DOES_NOT_EXIST, \"CS1231\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_moduleDoesNotExistFilteredList_failure() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedFacilitator \u003d new FacilitatorBuilder(IDA).withModuleCodes(\"CS1231\").build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand editCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new EditFacilitatorDescriptorBuilder(editedFacilitator).build());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandFailure(editCommand, model,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(FacilEditCommand.MESSAGE_MODULE_DOES_NOT_EXIST, \"CS1231\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final FacilEditCommand standardCommand \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR, DESC_AMY);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        EditFacilitatorDescriptor copyDescriptor \u003d new EditFacilitatorDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand commandWithSameValues \u003d new FacilEditCommand(INDEX_FIRST_FACILITATOR, copyDescriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(standardCommand.equals(new FacilEditCommand(INDEX_SECOND_FACILITATOR, DESC_AMY)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(standardCommand.equals(new FacilEditCommand(INDEX_FIRST_FACILITATOR, DESC_BOB)));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 6,
      "-": 98,
      "zixinn": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/facilitator/FacilFindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FACILITATORS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FacilFindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilFindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilFindCommand findFirstCommand \u003d new FacilFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilFindCommand findSecondCommand \u003d new FacilFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilFindCommand findFirstCommandCopy \u003d new FacilFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitator -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_zeroKeywords_noFacilitatorFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FACILITATORS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilFindCommand command \u003d new FacilFindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.updateFilteredFacilitatorList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFacilitatorList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_multipleKeywords_multipleFacilitatorsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FACILITATORS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilFindCommand command \u003d new FacilFindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel.updateFilteredFacilitatorList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, CommandType.FACILITATOR, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredFacilitatorList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 58,
      "zixinn": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/facilitator/FacilListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.commands.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFacilitatorAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code FacilListCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(new FacilListCommand(), model, FacilListCommand.MESSAGE_SUCCESS, CommandType.FACILITATOR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        showFacilitatorAtIndex(model, INDEX_FIRST_FACILITATOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(new FacilListCommand(), model, FacilListCommand.MESSAGE_SUCCESS, CommandType.FACILITATOR,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "-": 30,
      "zixinn": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/module/ModuleAddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleAddCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleAddCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult commandResult \u003d new ModuleAddCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(String.format(ModuleAddCommand.MESSAGE_SUCCESS, validModule),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleAddCommand moduleAddCommand \u003d new ModuleAddCommand(validModule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                ModuleAddCommand.MESSAGE_DUPLICATE_MODULE, () -\u003e moduleAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module cs2103t \u003d new ModuleBuilder().withModuleCode(\"CS2103T\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module cs2101 \u003d new ModuleBuilder().withModuleCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleAddCommand addCs2103tCommand \u003d new ModuleAddCommand(cs2103t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleAddCommand addCs2101Command \u003d new ModuleAddCommand(cs2101);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(addCs2103tCommand.equals(addCs2103tCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleAddCommand addCs2103tCommandCopy \u003d new ModuleAddCommand(cs2103t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(addCs2103tCommand.equals(addCs2103tCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(addCs2103tCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(addCs2103tCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitator -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(addCs2103tCommand.equals(addCs2101Command));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/module/ModuleListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code ModuleListCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertCommandSuccess(new ModuleListCommand(), model, ModuleListCommand.MESSAGE_SUCCESS, CommandType.MODULE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/module/ModuleViewCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.commands.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleViewCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleViewCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_moduleCodeExist_success() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleViewCommandTest.ModelStubWithModule modelStub \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleViewCommandTest.ModelStubWithModule(CS2103T, ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode validModuleCode \u003d CS2103T.getModuleCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        CommandResult commandResult \u003d new ModuleViewCommand(validModuleCode).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(String.format(ModuleViewCommand.MESSAGE_SUCCESS, validModuleCode),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Arrays.asList(ALICE), modelStub.facilitatorList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void execute_moduleCodeDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode validModuleCode \u003d CS2103T.getModuleCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleViewCommand moduleViewCommand \u003d new ModuleViewCommand(validModuleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStub modelStub \u003d new ModuleViewCommandTest.ModelStubWithoutModule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(ModuleViewCommand.MESSAGE_MODULE_DOES_NOT_EXIST,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                CS2103T.getModuleCode().moduleCode), () -\u003e moduleViewCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode cs2103t \u003d new ModuleCode(\"CS2103T\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode cs2101 \u003d new ModuleCode(\"CS2101\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleViewCommand viewCs2103tCommand \u003d new ModuleViewCommand(cs2103t);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleViewCommand viewCs2101Command \u003d new ModuleViewCommand(cs2101);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(viewCs2103tCommand.equals(viewCs2103tCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleViewCommand viewCs2103tCommandCopy \u003d new ModuleViewCommand(cs2103t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(viewCs2103tCommand.equals(viewCs2103tCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(viewCs2103tCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(viewCs2103tCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitator -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(viewCs2103tCommand.equals(viewCs2101Command));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final ArrayList\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final ArrayList\u003cFacilitator\u003e facilitatorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private Optional\u003cModule\u003e module;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModelStubWithModule(Module module, Facilitator facilitator) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireAllNonNull(module, facilitator);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.moduleList.add(module);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.facilitatorList.add(facilitator);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.module \u003d Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return moduleList.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public Optional\u003cModule\u003e findModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            for (Module module : moduleList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    return Optional.of(module);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public void updateModule(Module module) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.module \u003d Optional.of(module);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public void updateFacilitatorListForModule(Predicate\u003cFacilitator\u003e predicate) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            ModuleCode toCheck;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (module.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                facilitatorList.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                toCheck \u003d module.get().getModuleCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                facilitatorList.removeIf(facilitator -\u003e !facilitator.getModuleCodes().contains(toCheck));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private class ModelStubWithoutModule extends ModelStub {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final ArrayList\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private Optional\u003cModule\u003e module;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return moduleList.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public Optional\u003cModule\u003e findModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            for (Module module : moduleList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                    return Optional.of(module);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_WORD_CLEAR) instanceof ClearCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_WORD_CLEAR + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_GROUP_EXIT) instanceof ExitCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_GROUP_EXIT + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_WORD_HELP) instanceof HelpCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_WORD_HELP + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseCommand_mod() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_GROUP_MOD + \" \" + Command.COMMAND_WORD_LIST)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof ModuleCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_GROUP_MOD + \" \" + Command.COMMAND_WORD_LIST + \" 3\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof ModuleCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseCommand_facil() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_GROUP_FACIL + \" \" + Command.COMMAND_WORD_LIST)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof FacilCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "        assertTrue(parser.parseCommand(Command.COMMAND_GROUP_FACIL + \" \" + Command.COMMAND_WORD_LIST + \" 3\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof FacilCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 6,
      "alushingg": 6,
      "-": 46,
      "zixinn": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertNull(argMultimap.getValue(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "zixinn": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"#CS2103T\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"very very very very\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \" very very very very very very\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            + \" very very very long description\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String INVALID_OFFICE \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String VALID_MODULE_CODE_1 \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String VALID_MODULE_CODE_2 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String VALID_OFFICE \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(INDEX_FIRST_FACILITATOR, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(INDEX_FIRST_FACILITATOR, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCode_validValueWithoutWhitespace_returnsModuleCode() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedModuleCode, ParserUtil.parseModuleCode(VALID_MODULE_CODE_1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCode_validValueWithWhitespace_returnsTrimmedModuleCode() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String moduleCodeWithWhitespace \u003d WHITESPACE + VALID_MODULE_CODE_1 + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedModuleCode, ParserUtil.parseModuleCode(moduleCodeWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseDescription_null_returnsNullDescription() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Description expectedDescription \u003d new Description(null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parsePhone_null_returnsNullPhone() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Phone expectedPhone \u003d new Phone(null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseOffice_null_returnsNullOffice() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Office expectedOffice \u003d new Office(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedOffice, ParserUtil.parseOffice(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseOffice_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOffice(INVALID_OFFICE));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseOffice_validValueWithoutWhitespace_returnsOffice() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Office expectedOffice \u003d new Office(VALID_OFFICE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedOffice, ParserUtil.parseOffice(VALID_OFFICE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseAOffice_validValueWithWhitespace_returnsTrimmedOffice() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String officeWithWhitespace \u003d WHITESPACE + VALID_OFFICE + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Office expectedOffice \u003d new Office(VALID_OFFICE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedOffice, ParserUtil.parseOffice(officeWithWhitespace));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseEmail_null_returnsNullEmail() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Email expectedEmail \u003d new Email(null);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCodes_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCodes(null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCodes_collectionWithInvalidModuleCodes_throwsParseException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCodes(Arrays.asList(VALID_MODULE_CODE_1,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                INVALID_MODULE_CODE)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCodes_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ParserUtil.parseModuleCodes(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parseModuleCodes_collectionWithValidModuleCodes_returnsModuleCodeSet() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Set\u003cModuleCode\u003e actualModuleCodeSet \u003d ParserUtil.parseModuleCodes(Arrays.asList("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                VALID_MODULE_CODE_1, VALID_MODULE_CODE_2));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Set\u003cModuleCode\u003e expectedModuleCodeSet \u003d new HashSet\u003cModuleCode\u003e(Arrays.asList("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleCode(VALID_MODULE_CODE_1), new ModuleCode(VALID_MODULE_CODE_2)));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedModuleCodeSet, actualModuleCodeSet);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 3,
      "NNpanpan": 1,
      "-": 137,
      "zixinn": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/calendar/CalCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_CALENDAR_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private CalCommandParser parser \u003d new CalCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void parse_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void parse_unknownCalendarCommand_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_CALENDAR_COMMAND, () -\u003e parser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .parse(\"cal unknownCommand\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/calendar/CalViewCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.calendar.CalViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalViewCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    private CalViewCommandParser parser \u003d new CalViewCommandParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void parse_validField_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseSuccess(parser, \" /week this\", new CalViewCommand(\"this\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseSuccess(parser, \" /week next\", new CalViewCommand(\"next\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/facilitator/FacilAddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OFFICE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFICE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFICE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilAddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilAddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FacilAddCommandParser parser \u003d new FacilAddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Facilitator expectedFacilitator \u003d new FacilitatorBuilder(BOB).withModuleCodes(VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + OFFICE_DESC_BOB + MODULE_CODE_DESC_CS2101, new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + OFFICE_DESC_BOB + MODULE_CODE_DESC_CS2101, new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + OFFICE_DESC_BOB + MODULE_CODE_DESC_CS2101, new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + OFFICE_DESC_BOB + MODULE_CODE_DESC_CS2101, new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // multiple offices - last office accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + OFFICE_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + OFFICE_DESC_BOB + MODULE_CODE_DESC_CS2101, new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // multiple module codes - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator expectedFacilitatorMultipleModuleCodes \u003d new FacilitatorBuilder(BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2101, VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + OFFICE_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        + MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilAddCommand(expectedFacilitatorMultipleModuleCodes));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // missing phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator expectedFacilitator \u003d new FacilitatorBuilder(AMY).withPhone(null).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + OFFICE_DESC_AMY + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // missing email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedFacilitator \u003d new FacilitatorBuilder(AMY).withEmail(null).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + OFFICE_DESC_AMY + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // missing office"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedFacilitator \u003d new FacilitatorBuilder(AMY).withOffice(null).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // multiple optional fields missing"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedFacilitator \u003d new FacilitatorBuilder(AMY).withPhone(null).withOffice(null).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // zero module codes"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedFacilitator \u003d new FacilitatorBuilder(AMY).withModuleCodes().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + OFFICE_DESC_AMY,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilAddCommand(expectedFacilitator));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + OFFICE_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_OFFICE_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_allOptionalFieldsMissing_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d FacilAddCommand.MESSAGE_NOT_ADDED;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // only name provided"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // all optional prefixes missing"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_OFFICE_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + OFFICE_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + OFFICE_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + OFFICE_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid office"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_OFFICE_DESC"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101, Office.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + OFFICE_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + INVALID_MODULE_CODE_DESC + VALID_MODULE_CODE_CS2101, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_OFFICE_DESC,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                        + OFFICE_DESC_BOB + MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 24,
      "-": 69,
      "zixinn": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/facilitator/FacilCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_FACILITATOR_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilAddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilDeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilFindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.EditFacilitatorDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FacilCommandParser parser \u003d new FacilCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_add() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitator \u003d new FacilitatorBuilder(AMY).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilAddCommand command \u003d (FacilAddCommand) parser.parse(FacilitatorUtil.getFacilAddCommand(facilitator));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new FacilAddCommand(facilitator), command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_delete() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        FacilDeleteCommand command \u003d (FacilDeleteCommand) parser.parse(Command.COMMAND_WORD_DELETE + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + INDEX_FIRST_FACILITATOR.getOneBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new FacilDeleteCommand(INDEX_FIRST_FACILITATOR), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_edit() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitator \u003d new FacilitatorBuilder(AMY).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder(facilitator)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        FacilEditCommand command \u003d (FacilEditCommand) parser.parse(Command.COMMAND_WORD_EDIT + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + INDEX_FIRST_FACILITATOR.getOneBased() + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + FacilitatorUtil.getEditFacilitatorDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new FacilEditCommand(INDEX_FIRST_FACILITATOR, descriptor), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_find() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        FacilFindCommand command \u003d (FacilFindCommand) parser.parse(Command.COMMAND_WORD_FIND + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new FacilFindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_list() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(parser.parse(Command.COMMAND_WORD_LIST)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof FacilListCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(parser.parse(Command.COMMAND_WORD_LIST + \" 3\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof FacilListCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_FACILITATOR_COMMAND,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_unknownFacilitatorCommand_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_FACILITATOR_COMMAND,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .parse(\"facil unknownCommand\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 12,
      "zixinn": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/facilitator/FacilDeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * outside of the FacilDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * same path through the FacilDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FacilDeleteCommandParser parser \u003d new FacilDeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FacilDeleteCommand(INDEX_FIRST_FACILITATOR));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "-": 22,
      "zixinn": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/facilitator/FacilEditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2101;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFICE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OFFICE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_FACILITATOR;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.EditFacilitatorDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilEditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String PHONE_EMPTY \u003d \" \" + PREFIX_PHONE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String EMAIL_EMPTY \u003d \" \" + PREFIX_EMAIL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String OFFICE_EMPTY \u003d \" \" + PREFIX_OFFICE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String MODULE_CODE_EMPTY \u003d \" \" + PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FacilEditCommandParser parser \u003d new FacilEditCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\", FacilEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_CODE_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS); // invalid module code"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // while parsing {@code PREFIX_MODULE_CODE} alone will reset the module codes of the {@code Facilitator} being"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // edited, parsing it together with a valid module code results in error"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2101 + MODULE_CODE_DESC_CS2103T"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + MODULE_CODE_EMPTY, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2101 + MODULE_CODE_EMPTY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + MODULE_CODE_DESC_CS2103T, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_EMPTY + MODULE_CODE_DESC_CS2101"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + MODULE_CODE_DESC_CS2103T, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_OFFICE_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + MODULE_CODE_DESC_CS2103T"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + EMAIL_DESC_AMY + OFFICE_DESC_AMY + NAME_DESC_AMY + MODULE_CODE_DESC_CS2101;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withOffice(VALID_OFFICE_AMY).withModuleCodes(VALID_MODULE_CODE_CS2103T, VALID_MODULE_CODE_CS2101)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FACILITATOR;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor \u003d new EditFacilitatorDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor \u003d new EditFacilitatorDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // office"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OFFICE_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor \u003d new EditFacilitatorDescriptorBuilder().withOffice(VALID_OFFICE_AMY).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // module codes"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_CS2101;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        descriptor \u003d new EditFacilitatorDescriptorBuilder().withModuleCodes(VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + OFFICE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + MODULE_CODE_DESC_CS2101 + PHONE_DESC_AMY + OFFICE_DESC_AMY + EMAIL_DESC_AMY + MODULE_CODE_DESC_CS2101"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                + PHONE_DESC_BOB + OFFICE_DESC_BOB + EMAIL_DESC_BOB + MODULE_CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2101, VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FACILITATOR;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + OFFICE_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor \u003d new EditFacilitatorDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withOffice(VALID_OFFICE_BOB).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_resetPhone_success() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_EMPTY;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withPhone(null).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_resetEmail_success() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EMAIL_EMPTY;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withEmail(null).build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_resetOffice_success() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FACILITATOR;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + OFFICE_EMPTY;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withOffice(null).build();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_resetModuleCodes_success() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FACILITATOR;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_CODE_EMPTY;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand.EditFacilitatorDescriptor descriptor \u003d new EditFacilitatorDescriptorBuilder()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withModuleCodes().build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilEditCommand expectedCommand \u003d new FacilEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 19,
      "zixinn": 240
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/facilitator/FacilFindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.logic.parser.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FacilFindCommandParser parser \u003d new FacilFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacilFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        FacilFindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new FacilFindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "-": 26,
      "zixinn": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/module/ModuleAddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleAddCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ModuleAddCommandParser parser \u003d new ModuleAddCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(CS2101).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS2101 + DESCRIPTION_DESC_CS2101,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // multiple module codes - last module code accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + DESCRIPTION_DESC_CS2101, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS2101 + DESCRIPTION_DESC_CS2103T"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + DESCRIPTION_DESC_CS2101, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // missing description"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder().withDescription(null).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS2103T, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS2101 + DESCRIPTION_DESC_CS2101, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS2101 + VALID_DESCRIPTION_CS2101,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_CODE_DESC + DESCRIPTION_DESC_CS2101,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS2101 + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_CODE_DESC + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MODULE_CODE_DESC_CS2101 + DESCRIPTION_DESC_CS2101,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 1,
      "zixinn": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/module/ModuleCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_MODULE_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ModuleCommandParser parser \u003d new ModuleCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_add() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleAddCommand command \u003d (ModuleAddCommand) parser.parse(ModuleUtil.getModuleAddCommand(module));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new ModuleAddCommand(module), command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_list() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(parser.parse(Command.COMMAND_WORD_LIST)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof ModuleListCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(parser.parse(Command.COMMAND_WORD_LIST + \" 3\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                instanceof ModuleListCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_view() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"CS2103T\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleViewCommand command \u003d (ModuleViewCommand) parser.parse("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                Command.COMMAND_WORD_VIEW + \" \" + PREFIX_MODULE_CODE + \" \" + moduleCode.moduleCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new ModuleViewCommand(moduleCode), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_MODULE_COMMAND,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_unknownModuleCommand_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_UNKNOWN_MODULE_COMMAND,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .parse(\"mod unknownCommand\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/module/ModuleViewCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.logic.parser.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.module.ModuleViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleViewCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ModuleViewCommandParser parser \u003d new ModuleViewCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_fieldPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(\"CS2101\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleViewCommand(expectedModuleCode));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // multiple module codes - last module code accepted"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS2103T + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleViewCommand(expectedModuleCode));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_fieldMissing_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS2101, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_CODE_DESC, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MODULE_CODE_DESC_CS2101,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.UniqueFacilitatorList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.exceptions.DuplicateFacilitatorException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getFacilitatorList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void resetData_withDuplicateFacilitators_throwsDuplicateFacilitatorException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // Two facilitators with the same identity fields"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedAlice \u003d new FacilitatorBuilder(ALICE).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cFacilitator\u003e newFacilitators \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(new ArrayList\u003c\u003e(), newFacilitators, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateFacilitatorException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // Two modules with the same identity fields"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module otherModule \u003d new ModuleBuilder(CS2103T).withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS2103T, otherModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newModules, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModuleCode_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasModuleCode(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModuleCode_moduleCodeNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(addressBook.hasModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModuleCode_moduleCodeInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(addressBook.hasModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasModule(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModule_moduleNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(addressBook.hasModule(CS2103T));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModule_moduleInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(addressBook.hasModule(CS2103T));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(addressBook.hasModule(editedModule));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void findModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.findModule(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void findModule_moduleNotInAddressBook_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.empty(), addressBook.findModule(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void findModule_moduleInAddressBook_returnsModule() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.of(CS2103T), addressBook.findModule(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModules_emptyList_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(modules.getModuleList(), addressBook.getModules());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModules_nonEmptyList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modules.add(CS2103T);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(modules.getModuleList(), addressBook.getModules());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasFacilitator_nullFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasFacilitator(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasFacilitator_facilitatorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(addressBook.hasFacilitator(ALICE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasFacilitator_facilitatorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addFacilitator(ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(addressBook.hasFacilitator(ALICE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasFacilitator_facilitatorWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addFacilitator(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedAlice \u003d new FacilitatorBuilder(ALICE).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(addressBook.hasFacilitator(editedAlice));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFacilitators_emptyList_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList facilitators \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(facilitators.getFacilitatorList(), addressBook.getFacilitators());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFacilitators_nonEmptyList_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addFacilitator(ALICE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList facilitators \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitators.add(ALICE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(facilitators.getFacilitatorList(), addressBook.getFacilitators());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getAddressBook_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(new AddressBook(), addressBook);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFacilitatorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getFacilitatorList().remove(0));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * A stub ReadOnlyAddressBook whose modules and facilitators list can violate interface constraints."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        private final ObservableList\u003cFacilitator\u003e facilitators \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        private List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        AddressBookStub(Collection\u003cModule\u003e modules, Collection\u003cFacilitator\u003e facilitators, List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            this.facilitators.setAll(facilitators);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            this.lessons \u003d lessons;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public ObservableList\u003cFacilitator\u003e getFacilitatorList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return facilitators;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "         * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "         * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        public List\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 11,
      "alushingg": 3,
      "-": 82,
      "zixinn": 136,
      "heidicrq": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FACILITATORS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_NO_FACILITATORS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.ModuleCodesContainKeywordPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModuleCode_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModuleCode(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModuleCode_moduleCodeNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(modelManager.hasModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModuleCode_moduleCodeInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.addModule(CS2103T);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(modelManager.hasModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModule_moduleNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasModule_moduleInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.addModule(CS2103T);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(modelManager.hasModule(CS2103T));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModule_emptyModule_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.empty(), modelManager.getModule());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModule_nonEmptyModule_returnsModule() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.updateModule(CS2103T);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.of(CS2103T), modelManager.getModule());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void findModule_moduleNotFound_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.empty(), modelManager.findModule(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void findModule_moduleFound_returnsModule() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.addModule(CS2103T);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.of(CS2103T), modelManager.findModule(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasFacilitator_nullFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFacilitator(null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasFacilitator_facilitatorNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(modelManager.hasFacilitator(ALICE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void hasFacilitator_facilitatorInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.addFacilitator(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(modelManager.hasFacilitator(ALICE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFilteredFacilitatorList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFacilitatorList().remove(0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFacilitatorListForModule_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFacilitatorListForModule().remove(0));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withFacilitator(ALICE).withFacilitator(BENSON)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withModule(CS2103T).withModule(CS2101).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different filteredFacilitatorList -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.updateFilteredFacilitatorList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.updateFilteredFacilitatorList(PREDICATE_SHOW_ALL_FACILITATORS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitatorListForModule -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String keyword \u003d CS2103T.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.updateFacilitatorListForModule(new ModuleCodesContainKeywordPredicate(keyword));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        modelManager.updateFacilitatorListForModule(PREDICATE_SHOW_NO_FACILITATORS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 131,
      "zixinn": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calendar/CalendarTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": "public class CalendarTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void getWeek() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(\"2020-03-12\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar \u003d new Calendar(localDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar0 \u003d new Calendar(LocalDate.parse(\"2020-03-09\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar1 \u003d new Calendar(LocalDate.parse(\"2020-03-10\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar2 \u003d new Calendar(LocalDate.parse(\"2020-03-11\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar4 \u003d new Calendar(LocalDate.parse(\"2020-03-13\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar5 \u003d new Calendar(LocalDate.parse(\"2020-03-14\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar6 \u003d new Calendar(LocalDate.parse(\"2020-03-15\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar[] calendars \u003d calendar.getWeek();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendars[0].equals(calendar0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendars[1].equals(calendar1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendars[2].equals(calendar2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendars[3].equals(calendar));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendars[4].equals(calendar4));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendars[5].equals(calendar5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendars[6].equals(calendar6));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(\"2020-02-02\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar calendar \u003d new Calendar(localDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar otherCalendar \u003d new Calendar(localDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //same date -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendar.equals(otherCalendar));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertTrue(calendar.equals(calendar));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertFalse(calendar.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //different calendar -\u003e return false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        Calendar diffCalendar \u003d new Calendar(LocalDate.parse(\"2020-03-03\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertFalse(calendar.equals(diffCalendar));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/EmailTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_null_returnsNullEmail() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Email email \u003d new Email(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertNull(email.value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "zixinn": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/FacilitatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilitatorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator facilitator \u003d new FacilitatorBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e facilitator.getModuleCodes().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void isSameFacilitator() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ALICE.isSameFacilitator(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(ALICE.isSameFacilitator(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedAlice \u003d new FacilitatorBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(ALICE.isSameFacilitator(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ALICE.isSameFacilitator(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ALICE.isSameFacilitator(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withPhone(VALID_PHONE_BOB).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ALICE.isSameFacilitator(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ALICE.isSameFacilitator(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator aliceCopy \u003d new FacilitatorBuilder(ALICE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitator -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedAlice \u003d new FacilitatorBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different office -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withOffice(VALID_OFFICE_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different module codes -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        editedAlice \u003d new FacilitatorBuilder(ALICE).withModuleCodes(VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 4,
      "-": 60,
      "zixinn": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/ModuleCodesContainKeywordPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleCodesContainKeywordPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String firstPredicateKeyword \u003d \"first\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String secondPredicateKeyword \u003d \"second\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCodesContainKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleCodesContainKeywordPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCodesContainKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleCodesContainKeywordPredicate(secondPredicateKeyword);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCodesContainKeywordPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new ModuleCodesContainKeywordPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void test_moduleCodesContainKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // One module code"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCodesContainKeywordPredicate predicate \u003d new ModuleCodesContainKeywordPredicate(\"CS2103T\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(predicate.test(new FacilitatorBuilder().withModuleCodes(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // Multiple module codes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        predicate \u003d new ModuleCodesContainKeywordPredicate(\"CS2103T\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(predicate.test(new FacilitatorBuilder().withModuleCodes(\"CS2103T\", \"CS2101\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        predicate \u003d new ModuleCodesContainKeywordPredicate(\"Cs2103t\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(predicate.test(new FacilitatorBuilder().withModuleCodes(\"CS2103T\", \"CS2101\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void test_moduleCodesDoesNotContainKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ModuleCodesContainKeywordPredicate predicate \u003d new ModuleCodesContainKeywordPredicate(\"CS2101\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(predicate.test(new FacilitatorBuilder().withModuleCodes(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // Keywords match name and office, but does not match module code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        predicate \u003d new ModuleCodesContainKeywordPredicate(\"CS2103T\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(predicate.test(new FacilitatorBuilder().withName(\"CS2103T\").withOffice(\"CS2103T\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withModuleCodes(\"CS2101\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(predicate.test(new FacilitatorBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(predicate.test(new FacilitatorBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(predicate.test(new FacilitatorBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(predicate.test(new FacilitatorBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(predicate.test(new FacilitatorBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(predicate.test(new FacilitatorBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // Keywords match phone, email and office, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(predicate.test(new FacilitatorBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .withEmail(\"alice@email.com\").withOffice(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "zixinn": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "zixinn": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/OfficeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class OfficeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_null_returnsNullOffice() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Office office \u003d new Office(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertNull(office.value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_invalidOffice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String invalidOffice \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Office(invalidOffice));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void isValidOffice() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // null office"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Office.isValidOffice(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid offices"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(Office.isValidOffice(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(Office.isValidOffice(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // valid offices"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Office.isValidOffice(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Office.isValidOffice(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Office.isValidOffice(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long office"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/PhoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_null_returnsNullPhone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Phone phone \u003d new Phone(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertNull(phone.value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "zixinn": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/facilitator/UniqueFacilitatorListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.facilitator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.exceptions.DuplicateFacilitatorException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.exceptions.FacilitatorNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.FacilitatorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class UniqueFacilitatorListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final UniqueFacilitatorList uniqueFacilitatorList \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_nullFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFacilitatorList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_facilitatorNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(uniqueFacilitatorList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_facilitatorInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(uniqueFacilitatorList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_facilitatorWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedAlice \u003d new FacilitatorBuilder(ALICE).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(uniqueFacilitatorList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void add_nullFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFacilitatorList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void add_duplicateFacilitator_throwsDuplicateFacilitatorException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateFacilitatorException.class, () -\u003e uniqueFacilitatorList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator_nullTargetFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFacilitatorList.setFacilitator(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator_nullEditedFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFacilitatorList.setFacilitator(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator_targetFacilitatorNotInList_throwsFacilitatorNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(FacilitatorNotFoundException.class, () -\u003e uniqueFacilitatorList.setFacilitator(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator_editedFacilitatorIsSameFacilitator_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.setFacilitator(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList expectedUniqueFacilitatorList \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueFacilitatorList, uniqueFacilitatorList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator_editedFacilitatorHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Facilitator editedAlice \u003d new FacilitatorBuilder(ALICE).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alushingg"
        },
        "content": "                .withModuleCodes(VALID_MODULE_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.setFacilitator(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList expectedUniqueFacilitatorList \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueFacilitatorList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueFacilitatorList, uniqueFacilitatorList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator_editedFacilitatorHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.setFacilitator(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList expectedUniqueFacilitatorList \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueFacilitatorList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueFacilitatorList, uniqueFacilitatorList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator_editedFacilitatorHasNonUniqueIdentity_throwsDuplicateFacilitatorException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateFacilitatorException.class, () -\u003e uniqueFacilitatorList.setFacilitator(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove_nullFacilitator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFacilitatorList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove_facilitatorDoesNotExist_throwsFacilitatorNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(FacilitatorNotFoundException.class, () -\u003e uniqueFacilitatorList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove_existingFacilitator_removesFacilitator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList expectedUniqueFacilitatorList \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueFacilitatorList, uniqueFacilitatorList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators_nullUniqueFacilitatorList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFacilitatorList"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .setFacilitators((UniqueFacilitatorList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators_uniqueFacilitatorList_replacesOwnListWithProvidedUniqueFacilitatorList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList expectedUniqueFacilitatorList \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueFacilitatorList.add(BOB);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.setFacilitators(expectedUniqueFacilitatorList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueFacilitatorList, uniqueFacilitatorList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFacilitatorList.setFacilitators((List\u003cFacilitator\u003e) null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cFacilitator\u003e facilitatorList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.setFacilitators(facilitatorList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueFacilitatorList expectedUniqueFacilitatorList \u003d new UniqueFacilitatorList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueFacilitatorList.add(BOB);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueFacilitatorList, uniqueFacilitatorList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitators_listWithDuplicateFacilitators_throwsDuplicateFacilitatorException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cFacilitator\u003e listWithDuplicateFacilitators \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateFacilitatorException.class, () -\u003e uniqueFacilitatorList"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .setFacilitators(listWithDuplicateFacilitators));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            -\u003e uniqueFacilitatorList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFacilitatorList_emptyList_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ObservableList\u003cFacilitator\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(internalList, uniqueFacilitatorList.getFacilitatorList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getFacilitatorList_nonEmptyList_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ObservableList\u003cFacilitator\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.add(ALICE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueFacilitatorList.add(ALICE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(internalList, uniqueFacilitatorList.getFacilitatorList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 3,
      "zixinn": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/DescriptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_null_returnsNullDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Description description \u003d new Description(null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertNull(description.value);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(Description.isValidDescription(\"very very very very\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                + \" very very very very very very very very very long description\")); // long description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Description.isValidDescription(\"software engineering\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Description.isValidDescription(\"software engineering 12345\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Software Engineering\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(Description.isValidDescription(\"software engineering*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 1,
      "NNpanpan": 1,
      "zixinn": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleCodeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // invalid module codes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS 2103T\")); // contains space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"longModuleCode\")); // long module code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs2103t*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // valid module codes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"cs\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"2103T\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"cs2103t\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alushingg"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Module(null, null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(CS2103T.isSameModule(CS2103T));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        //null -\u003e return false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(CS2103T.isSameModule(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module otherModule \u003d new ModuleBuilder().withModuleCode(VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(CS2103T.isSameModule(otherModule));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same name, different description -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        otherModule \u003d new ModuleBuilder().withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(CS2103T.isSameModule(otherModule));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same name, same description -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        otherModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(CS2103T.isSameModule(otherModule));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module otherModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(CS2103T.equals(otherModule));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different facilitator -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        otherModule \u003d CS2101;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(CS2103T.equals(otherModule));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        otherModule \u003d new ModuleBuilder().withModuleCode(VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(CS2103T.equals(otherModule));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        otherModule \u003d new ModuleBuilder().withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(CS2103T.equals(otherModule));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alushingg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alushingg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 21,
      "zixinn": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void containsModuleCode_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.containsModuleCode(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void containsModuleCode_moduleCodeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(uniqueModuleList.containsModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void containsModuleCode_moduleCodeInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(uniqueModuleList.containsModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_moduleNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_moduleInList_returnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void contains_moduleWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module otherModule \u003d new ModuleBuilder().withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertTrue(uniqueModuleList.contains(otherModule));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void add_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void add_duplicateModule_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(CS2103T));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule_nullTargetModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, CS2103T));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule_nullEditedModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(CS2103T, null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule_targetModuleNotInList_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.setModule(CS2103T, CS2103T));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule_editedModuleIsSameModule_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule_editedModuleHasSameIdentity_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module otherModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, otherModule);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueModuleList.add(otherModule);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule_editedModuleHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, CS2101);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule_editedModuleHasNonUniqueIdentity_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModule(CS2103T, CS2101));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove_moduleDoesNotExist_throwsModuleNotFoundException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(CS2103T));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void remove_existingModule_removesModule() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.remove(CS2103T);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void find_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.find(null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void find_moduleNotFound_returnsOptionalEmpty() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.empty(), uniqueModuleList.find(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void find_moduleFound_returnsModule() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(Optional.of(CS2103T), uniqueModuleList.find(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules_nullUniqueModuleList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules_uniqueModuleList_replacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(CS2101);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        expectedUniqueModuleList.add(CS2101);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModules_listWithDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                .setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModuleList_emptyList_success() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(internalList, uniqueModuleList.getModuleList());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void getModuleList_nonEmptyList_success() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        internalList.add(CS2103T);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(internalList, uniqueModuleList.getModuleList());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 218
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void addTask() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void printTasks() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void viewTasksByName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void viewTasksByDay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void viewTasksByMonth() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void viewTasksByYear() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void viewUpcomingTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void viewAllTasks() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTasksLength() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTaskAtPosition() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void modifyTask() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void makeTaskDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void testGetDescription_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"Tutorial 7\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\")).getDescription());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"Assignment 1\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Assignment 1\"), new TaskDateTime(\"12/04/2020\")).getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"Lecture Week 8\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Lecture Week 8\"), new TaskDateTime(\"12/03/2020\", \"23:59\")).getDescription());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void markAsDone_initiallyNotDoneTask_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Task task \u003d new Task(new Description(\"Tutorial 7\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertFalse(task.isTaskDone());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertTrue(task.isTaskDone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void markAsDone_alreadyDoneTask_notifyTaskMarkedAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        Task task \u003d new Task(new Description(\"Tutorial 7\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertFalse(task.isTaskDone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertFalse(task.markAsDone()); // false means Task is already done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void isTaskDone_newlyCreatedTask_false() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertFalse(new Task(new Description(\"Tutorial 7\")).isTaskDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertFalse(new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"12/03/2020\")).isTaskDone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertFalse(new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"12/03/2020\", \"23:59\")).isTaskDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void isTaskDone_markedAsDoneTask_true() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.add(new Task(new Description(\"Tutorial 7\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.add(new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"12/03/2020\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        tasks.add(new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"13/03/2020\", \"23:59\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            tasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            assertTrue(tasks.get(i).isTaskDone());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        // duplicating markAsDone"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            tasks.get(i).markAsDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "            assertTrue(tasks.get(i).isTaskDone());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTime_noTimeAvailableForTask_returnsNull() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertNull(new Task(new Description(\"Tutorial 7\")).getTime());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTime_onlyTaskDateAvailable_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(LocalDate.of(2020, 10, 10).atStartOfDay(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"10/10/2020\")).getTime());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTime_bothTaskDateAndTimeAvailable_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(LocalDate.of(2020, 10, 10).atTime(23, 59),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"10/10/2020\", \"23:59\")).getTime());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void isTimeAvailable_taskHasNoTime_false() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertFalse(new Task(new Description(\"Tutorial 7\")).isTimeAvailable());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void isTimeAvailable_onlyTaskDateAvailable_true() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertTrue(new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"26/06/2020\")).isTimeAvailable());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void isTimeAvailable_bothTaskDateAndTimeAvailable_true() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertTrue(new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"26/06/2020\", \"00:00\")).isTimeAvailable());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTimeOutput_taskHasNoTime_emptyString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"\", new Task(new Description(\"Tutorial 7\")).getTimeOutput());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTimeOutput_onlyTaskDateAvailable_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"20/05/2020\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\"), new TaskDateTime(\"20/05/2020\")).getTimeOutput());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getTimeOutput_bothTaskDateAndTimeAvailable_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"20/05/2020 09:00\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                        new TaskDateTime(\"20/05/2020\", \"09:00\")).getTimeOutput());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getDateInWeek_taskHasNoTime_emptyString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"\", new Task(new Description(\"Tutorial 7\")).getDateInWeek());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getDateInWeek_onlyTaskDateAvailable_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"Thursday\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                        new TaskDateTime(\"19/03/2020\")).getDateInWeek());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void getDateInWeek_bothTaskDateAndTimeAvailable_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"Friday\", new Task(new Description(\"Tutorial 7\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new TaskDateTime(\"20/03/2020\", \"00:00\")).getDateInWeek());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void testToString_taskHasNoTime_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"[\\u2718] Tutorial 7\" + \"\\n\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\")).toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void testToString_onlyTaskDateAvailable_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"[\\u2718] Tutorial 7 31/03/2020\" + \"\\n\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                        new TaskDateTime(\"31/03/2020\")).toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void testToString_bothTaskDateAndTimeAvailable_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        assertEquals(\"[\\u2718] Tutorial 7 01/04/2020 00:01\" + \"\\n\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                new Task(new Description(\"Tutorial 7\"),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "                        new TaskDateTime(\"01/04/2020\", \"00:01\")).toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void toDatabase() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void compareTo() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 166,
      "NNpanpan": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedFacilitatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFacilitator.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BENSON_NULL_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BENSON_NULL_OFFICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.BENSON_NULL_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class JsonAdaptedFacilitatorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String INVALID_OFFICE \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"#cs2103t\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String VALID_OFFICE \u003d BENSON.getOffice().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final List\u003cJsonAdaptedModuleCode\u003e VALID_MODULE_CODES \u003d BENSON.getModuleCodes().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .map(JsonAdaptedModuleCode::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_validFacilitatorDetails_returnsFacilitator() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d new JsonAdaptedFacilitator(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(BENSON, facilitator.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new JsonAdaptedFacilitator(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_OFFICE, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, facilitator::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d new JsonAdaptedFacilitator("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_OFFICE, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, facilitator::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new JsonAdaptedFacilitator(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_OFFICE, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, facilitator::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_nullPhone_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d new JsonAdaptedFacilitator("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                VALID_NAME, null, VALID_EMAIL, VALID_OFFICE, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(BENSON_NULL_PHONE, facilitator.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new JsonAdaptedFacilitator(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_OFFICE, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, facilitator::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_nullEmail_success() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d new JsonAdaptedFacilitator("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                VALID_NAME, VALID_PHONE, null, VALID_OFFICE, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(BENSON_NULL_EMAIL, facilitator.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_invalidOffice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new JsonAdaptedFacilitator(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_OFFICE, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d Office.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, facilitator::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_nullOffice_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d new JsonAdaptedFacilitator("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(BENSON_NULL_OFFICE, facilitator.toModelType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_invalidModuleCodes_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        List\u003cJsonAdaptedModuleCode\u003e invalidModuleCodes \u003d new ArrayList\u003c\u003e(VALID_MODULE_CODES);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        invalidModuleCodes.add(new JsonAdaptedModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedFacilitator facilitator \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                new JsonAdaptedFacilitator(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_OFFICE, invalidModuleCodes);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, facilitator::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "zixinn": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"#CS2103T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"very very very very\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            + \" very very very very very very very very very long description\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS2103T);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(CS2103T, module.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(INVALID_MODULE_CODE, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_nullModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_MODULE_CODE, INVALID_DESCRIPTION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_nullDescription_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_MODULE_CODE, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Module expectedModule \u003d new Module(new ModuleCode(VALID_MODULE_CODE), new Description(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(expectedModule, module.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 1,
      "zixinn": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void readAddressBook_invalidModuleAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidModuleAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void readAddressBook_invalidFacilitatorAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidFacilitatorAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void readAddressBook_invalidAndValidModuleAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \"invalidAndValidModuleAddressBook.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void readAddressBook_invalidAndValidFacilitatorAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                \"invalidAndValidFacilitatorAddressBook.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        original.addFacilitator(HOON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        original.removeFacilitator(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        original.addFacilitator(IDA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "zixinn": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Path TYPICAL_ADDRESS_BOOK_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .resolve(\"typicalAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Path INVALID_FACILITATOR_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFacilitatorAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Path DUPLICATE_FACILITATOR_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .resolve(\"duplicateFacilitatorAddressBook.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .resolve(\"duplicateModuleAddressBook.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private static final Path MODULE_DOES_NOT_EXIST_FILE \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .resolve(\"moduleDoesNotExistAddressBook.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_typicalAddressBookFile_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ADDRESS_BOOK_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        AddressBook typicalFacilitatorsAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertEquals(addressBookFromFile, typicalFacilitatorsAddressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_invalidFacilitatorFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FACILITATOR_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_duplicateModules_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_duplicateFacilitators_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FACILITATOR_FILE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_FACILITATOR,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void toModelType_moduleDoesNotExist_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(MODULE_DOES_NOT_EXIST_FILE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_MODULE_DOES_NOT_EXIST,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 2,
      "-": 39,
      "zixinn": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "zixinn": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withFacilitator(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds a new {@code Module} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public AddressBookBuilder withModule(Module module) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addModule(module);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Adds a new {@code Facilitator} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public AddressBookBuilder withFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        addressBook.addFacilitator(facilitator);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "zixinn": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFacilitatorDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class to help with building EditFacilitatorDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class EditFacilitatorDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private FacilEditCommand.EditFacilitatorDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor \u003d new FacilEditCommand.EditFacilitatorDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder(FacilEditCommand.EditFacilitatorDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.descriptor \u003d new FacilEditCommand.EditFacilitatorDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an {@code EditFacilitatorDescriptor} with fields containing {@code facilitator}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder(Facilitator facilitator) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor \u003d new FacilEditCommand.EditFacilitatorDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setName(facilitator.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setPhone(facilitator.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setEmail(facilitator.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setOffice(facilitator.getOffice());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setModuleCodes(facilitator.getModuleCodes());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFacilitatorDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditFacilitatorDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Email} of the {@code EditFacilitatorDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Office} of the {@code EditFacilitatorDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder withOffice(String office) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setOffice(new Office(office));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the {@code moduleCodes} into a {@code Set\u003cModuleCode\u003e} and set it to the {@code EditFacilitatorDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public EditFacilitatorDescriptorBuilder withModuleCodes(String... moduleCodes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        Set\u003cModuleCode\u003e moduleCodeSet \u003d Stream.of(moduleCodes).map(ModuleCode::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.setModuleCodes(moduleCodeSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilEditCommand.EditFacilitatorDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 1,
      "zixinn": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FacilitatorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Office;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class to help with building Facilitator objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilitatorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Office office;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Set\u003cModuleCode\u003e moduleCodes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        phone \u003d new Phone(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        email \u003d new Email(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        office \u003d new Office(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCodes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Initializes the FacilitatorBuilder with the data of {@code facilitatorToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorBuilder(Facilitator facilitatorToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        name \u003d facilitatorToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        phone \u003d facilitatorToCopy.getPhone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        email \u003d facilitatorToCopy.getEmail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        office \u003d facilitatorToCopy.getOffice();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCodes \u003d new HashSet\u003c\u003e(facilitatorToCopy.getModuleCodes());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Name} of the {@code Facilitator} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Phone} of the {@code Facilitator} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Email} of the {@code Facilitator} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Office} of the {@code Facilitator} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorBuilder withOffice(String office) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.office \u003d new Office(office);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Parses the {@code moduleCodes} into a {@code Set\u003cModuleCode\u003e} and set it to the {@code Facilitator}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public FacilitatorBuilder withModuleCodes(String ... moduleCodes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.moduleCodes \u003d SampleDataUtil.getModuleCodeSet(moduleCodes);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Facilitator build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Facilitator(name, phone, email, office, moduleCodes);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FacilitatorUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OFFICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import seedu.address.logic.commands.facilitator.FacilEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class for Facilitator."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class FacilitatorUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an add command string for adding the {@code facilitator}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String getFacilAddCommand(Facilitator facilitator) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alushingg"
        },
        "content": "        return Command.COMMAND_WORD_ADD + \" \" + getFacilitatorDetails(facilitator);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the part of command string for the given {@code facilitator}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String getFacilitatorDetails(Facilitator facilitator) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sb.append(PREFIX_NAME + \" \" + facilitator.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sb.append(PREFIX_PHONE + \" \" + facilitator.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sb.append(PREFIX_EMAIL + \" \" + facilitator.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sb.append(PREFIX_OFFICE + \" \" + facilitator.getOffice().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        facilitator.getModuleCodes().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            s -\u003e sb.append(PREFIX_MODULE_CODE + \" \" + s.moduleCode + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the part of command string for the given {@code EditFacilitatorDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String getEditFacilitatorDescriptorDetails(FacilEditCommand.EditFacilitatorDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        descriptor.getOffice().ifPresent(office -\u003e sb.append(PREFIX_OFFICE).append(office.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        if (descriptor.getModuleCodes().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            Set\u003cModuleCode\u003e moduleCodes \u003d descriptor.getModuleCodes().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            if (moduleCodes.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                sb.append(PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "                moduleCodes.forEach(s -\u003e sb.append(PREFIX_MODULE_CODE).append(s.moduleCode).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 3,
      "-": 35,
      "zixinn": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Optional\u003cModule\u003e getModule() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Optional\u003cModule\u003e findModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateModule(Module module) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public boolean hasFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void deleteFacilitator(Facilitator target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void addFacilitator(Facilitator facilitator) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void setFacilitator(Facilitator target, Facilitator editedFacilitator) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e getFilteredFacilitatorList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateFilteredFacilitatorList(Predicate\u003cFacilitator\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cFacilitator\u003e getFacilitatorListForModule() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public void updateFacilitatorListForModule(Predicate\u003cFacilitator\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in Mod Manager."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public boolean hasTask(Task module) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The module must exist in Mod Manager."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code module} must not already exist in Mod Manager."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void addTask(Task module) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * {@code target} must exist in Mod Manager."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * in Mod Manager."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     * @param editedTask"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dinhnhobao"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void setLesson(Lesson target, Lesson edited) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public void removeLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public Lesson findNextLesson() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "heidicrq"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    public List\u003cLesson\u003e findLessonByDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "heidicrq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dinhnhobao": 56,
      "zixinn": 150,
      "heidicrq": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.ModuleCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NNpanpan"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        moduleCode \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        description \u003d moduleToCopy.getDescription();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Sets the {@code Description} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public ModuleBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new Module(moduleCode, description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NNpanpan": 1,
      "zixinn": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String getModuleAddCommand(Module module) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Command.COMMAND_WORD_ADD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the part of command string for the given {@code facilitator}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE + \" \" + module.getModuleCode().moduleCode + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + \" \" + module.getDescription().value + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the middle index of the facilitator in the {@code model}\u0027s facilitator list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFacilitatorList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the last index of the facilitator in the {@code model}\u0027s facilitator list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFacilitatorList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns the facilitator in the {@code model}\u0027s facilitator list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static Facilitator getFacilitator(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return model.getFilteredFacilitatorList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "zixinn": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalFacilitators.getTypicalFacilitators;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalModules;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class containing an {@code AddressBook} object to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical facilitators."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            ab.addModule(module);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        for (Facilitator facilitator : getTypicalFacilitators()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            ab.addFacilitator(facilitator);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFacilitators.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alushingg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OFFICE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.facilitator.Facilitator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class containing a list of {@code Facilitator} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class TypicalFacilitators {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator ALICE \u003d new FacilitatorBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withOffice(\"COM2-08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withModuleCodes(\"CS2103T\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator BENSON \u003d new FacilitatorBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withOffice(\"COM3-02-25\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withModuleCodes(\"CS2101\", \"CS2103T\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator CARL \u003d new FacilitatorBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withEmail(\"heinz@example.com\").withOffice(\"AS6-06-11\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator DANIEL \u003d new FacilitatorBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withOffice(\"AS4-06-13\").withModuleCodes(\"CS2103T\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator ELLE \u003d new FacilitatorBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withEmail(\"werner@example.com\").withOffice(\"S16-03-03\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator FIONA \u003d new FacilitatorBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withEmail(\"lydia@example.com\").withOffice(\"S12-02-03\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator GEORGE \u003d new FacilitatorBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withEmail(\"anna@example.com\").withOffice(\"TP-SR4\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator HOON \u003d new FacilitatorBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withEmail(\"stefan@example.com\").withOffice(\"UT-SR12\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator IDA \u003d new FacilitatorBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withEmail(\"hans@example.com\").withOffice(\"COM1-01-03\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    // Manually added - Facilitator\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator AMY \u003d new FacilitatorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withOffice(VALID_OFFICE_AMY).withModuleCodes(VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator BOB \u003d new FacilitatorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withOffice(VALID_OFFICE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withModuleCodes(VALID_MODULE_CODE_CS2103T, VALID_MODULE_CODE_CS2101).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator BENSON_NULL_PHONE \u003d new FacilitatorBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withOffice(\"COM3-02-25\").withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withModuleCodes(\"CS2101\", \"CS2103T\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator BENSON_NULL_EMAIL \u003d new FacilitatorBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alushingg"
        },
        "content": "            .withOffice(\"COM3-02-25\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withModuleCodes(\"CS2101\", \"CS2103T\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Facilitator BENSON_NULL_OFFICE \u003d new FacilitatorBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withModuleCodes(\"CS2101\", \"CS2103T\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private TypicalFacilitators() {} // prevents instantiation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static List\u003cFacilitator\u003e getTypicalFacilitators() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alushingg": 14,
      "-": 29,
      "zixinn": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Index INDEX_FIRST_FACILITATOR \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Index INDEX_SECOND_FACILITATOR \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Index INDEX_THIRD_FACILITATOR \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "zixinn": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zixinn"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2101;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zixinn"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zixinn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zixinn"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zixinn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zixinn"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder().withModuleCode(VALID_MODULE_CODE_CS2103T)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CS2103T).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static final Module CS2101 \u003d new ModuleBuilder().withModuleCode(VALID_MODULE_CODE_CS2101)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zixinn"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CS2101).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zixinn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zixinn"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, CS2101));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zixinn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zixinn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zixinn": 28
    }
  }
]
