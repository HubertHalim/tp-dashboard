[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u0027site-name\u0027: \u0027ResuMe\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F10-1/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getResumeBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        ui \u003d new UiManager(logic); // Ui interacts with logic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Optional\u003cReadOnlyResumeBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ReadOnlyResumeBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            initialData \u003d new ResumeBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            initialData \u003d new ResumeBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "-": 175,
      "duongphammmm": 6,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"The index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_ITEMS_LISTED \u003d \"%1$d %2$s listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @see seedu.address.model.Model#getResumeBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ReadOnlyResumeBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    Person getUser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 3,
      "-": 45,
      "duongphammmm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.parser.ResumeBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final ResumeBookParser resumeBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumeBookParser \u003d new ResumeBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Command command \u003d resumeBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            storage.saveAddressBook(model.getResumeBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ReadOnlyResumeBook getAddressBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getResumeBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getFilteredItemList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Person getUser() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return model.getUser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getResumeBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 4,
      "nhamhung": 4,
      "-": 68,
      "duongphammmm": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Resume book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setResumeBook(new ResumeBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\", MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "-": 19,
      "duongphammmm": 1,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final String dataToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult(String dataToUser, String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.dataToUser \u003d requireNonNull(dataToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult(String dataToUser, String feedbackToUser) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this(dataToUser, feedbackToUser, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String getDataToUser() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return dataToUser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 9,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditUserCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GITHUB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIVERSITY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * This command edits the user profile information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditUserCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"me\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the user profile in our resuMeme. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_GITHUB + \"GITHUB \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_UNIVERSITY + \"UNIVERSITY \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_FROM + \"FROM \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_TO + \"TO \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_CAP + \"CAP \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_NAME + \"HUNG \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_PHONE + \"91648888 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_EMAIL + \"nhamhung.gttn@gmail.com \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_GITHUB + \"nhamhung \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_UNIVERSITY + \"NUS \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_MAJOR + \"CS \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_FROM + \"2018 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_TO + \"2022 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_CAP + \"5.0 \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited User Profile: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private EditUserDescriptor editUserDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param editUserDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserCommand(EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.editUserDescriptor \u003d editUserDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Person userToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Name name \u003d editUserDescriptor.getName().orElse(userToEdit.getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Phone phone \u003d editUserDescriptor.getPhone().orElse(userToEdit.getPhone());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Email email \u003d editUserDescriptor.getEmail().orElse(userToEdit.getEmail());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Github github \u003d editUserDescriptor.getGithub().orElse(userToEdit.getGithub());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String university \u003d editUserDescriptor.getUniversity().orElse(userToEdit.getUniversity());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String major \u003d editUserDescriptor.getMajor().orElse(userToEdit.getMajor());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Time from \u003d editUserDescriptor.getFrom().orElse(userToEdit.getFrom());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Time to \u003d editUserDescriptor.getTo().orElse(userToEdit.getTo());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        double cap \u003d editUserDescriptor.getCap().orElse(userToEdit.getCap());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Person editedUser \u003d new Person(name, phone, email, github, university, major, from, to, cap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.setUser(editedUser);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new CommandResult(editedUser.toString(), String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedUser));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditUserDescriptor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Descriptor for EditUserCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditUserDescriptor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Github github;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String university;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String major;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private double cap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserDescriptor() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserDescriptor(EditUserDescriptor toCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setEmail(toCopy.email);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setGithub(toCopy.github);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setUni(toCopy.university);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setMajor(toCopy.major);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setFrom(toCopy.from);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setTo(toCopy.to);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setCap(toCopy.cap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setGithub(Github github) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.github \u003d github;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cGithub\u003e getGithub() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(github);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setUni(String uni) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.university \u003d uni;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cString\u003e getUniversity() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(university);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setMajor(String major) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setFrom(Time from) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cTime\u003e getFrom() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(from);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setTo(Time to) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cTime\u003e getTo() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(to);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setCap(double cap) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.cap \u003d cap;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cDouble\u003e getCap() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(cap);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, phone, email, github, university,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                major, from, to, cap);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!(other instanceof EditUserDescriptor)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        EditUserDescriptor e \u003d (EditUserDescriptor) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getGithub().equals(e.getGithub())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getUniversity().equals(e.getUniversity())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getMajor().equals(e.getMajor())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getFrom().equals(e.getFrom())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getTo().equals(e.getTo())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getCap().equals(e.getCap());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Resume Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"Exiting\", MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\", SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Adds an Item to the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an Item to the address book. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"res \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Resume 1 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"frontend \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New %1$s added\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the address book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 15,
      "wardetu": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddInternshipCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds an Internship Item to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddInternshipCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an internship to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"COMPANY NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \"FROM \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \"TO \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESC \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"int \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Google \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \"Frontend Web Engineer \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \"06-2020 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \"12-2020 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"I did work, made money. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"frontend \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Internship toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code internship}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddInternshipCommand(Internship internship) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d internship;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasInternship(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addInternship(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddInternshipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddInternshipCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddProjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds a Project Item to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddProjectCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an project to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"PROJECT NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \"FROM \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESC \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"proj \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Duke \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TIME + \"06-2020 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_WEBSITE + \"abc.github.io \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"For a little module named CS2103T. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"java \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code project}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddProjectCommand(Project project) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d project;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProjectCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddResumeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds a Resume Item to the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddResumeCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a resume to the address book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"res \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Resume 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"frontend \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Resume toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code resume}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddResumeCommand(Resume resume) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d resume;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasResume(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addResume(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddResumeCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddSkillCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds a Skill Item to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddSkillCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a skill to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"SKILL NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_LEVEL + \"LEVEL \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"ski \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Git and Github \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_LEVEL + \"INTERMEDIATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"VCS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Skill toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code skill}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddSkillCommand(Skill skill) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d skill;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasSkill(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addSkill(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddSkillCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes an item identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: Double check if this command format is all right"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) i/ (item type)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 i/ res\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted %1$s item\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 7,
      "-": 17,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteInternshipCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes an Internship item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteInternshipCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteInternshipCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getInternshipSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship toDelete \u003d model.getInternship(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteInternship(toDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteInternshipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteInternshipCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 43,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteProjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes a Project item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteProjectCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteProjectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getProjectSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project toDelete \u003d model.getProject(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteProject(toDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteProjectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteResumeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes a Resume item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteResumeCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteResumeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume toDelete \u003d model.getResume(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteResume(toDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteResumeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteSkillCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes a Skill item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteSkillCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteSkillCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getSkillSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill toDelete \u003d model.getSkill(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteSkill(toDelete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteSkillCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Edits the details of an existing item in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item identified \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"by the index number used in the displayed item list. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_ITEM + \" TYPE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[ PREFIX/ OTHER PREFIX DATA]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \" int \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \" Google \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \" 03-2019 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \" 06-2019 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \" Intern \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \" Do things and get paid.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \" frontend \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index of the item in the filtered item list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditCommand(Index index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 26,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditInternshipCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Edits an Internship Item in the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditInternshipCommand extends EditCommand {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \" int \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \" Shopee \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \" I did some work \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \" 05-2020 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \" 08-2020 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \" Backend Engineer\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \" backend \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + EXAMPLE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_INTERNSHIP_SUCCESS \u003d \"Edited Internship: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditInternshipDescriptor editInternshipDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index                of the internship in the filtered internship list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editInternshipDescriptor details to edit the internship with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditInternshipCommand(Index index, EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editInternshipDescriptor \u003d editInternshipDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getInternshipSize()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship toEdit \u003d model.getInternship(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship editedInternship \u003d createEditedInternship(toEdit, editInternshipDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternship(toEdit, editedInternship);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(editedInternship.toString(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternship));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Internship item from the internship to be edited and the descriptor."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit Internship item to be edited"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editInternshipDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Internship item."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Internship createEditedInternship("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Internship toEdit, EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editInternshipDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Time updatedFrom \u003d editInternshipDescriptor.getFrom().orElse(toEdit.getFrom());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Time updatedTo \u003d editInternshipDescriptor.getTo().orElse(toEdit.getTo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String updatedDesc \u003d editInternshipDescriptor.getDescription().orElse(toEdit.getDescription());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String updatedRole \u003d editInternshipDescriptor.getRole().orElse(toEdit.getRole());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editInternshipDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Internship(updatedName, updatedRole, updatedFrom, updatedTo, updatedDesc, updatedTags, id);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 87,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditInternshipDescriptor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the internship with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the internship."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditInternshipDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditInternshipDescriptor() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditInternshipDescriptor(EditInternshipDescriptor toCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setRole(toCopy.role);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setFrom(toCopy.from);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setTo(toCopy.to);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setFrom(Time from) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cTime\u003e getFrom() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(from);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTo(Time to) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cTime\u003e getTo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(to);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setRole(String role) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cString\u003e getRole() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(role);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, role, from, to, description);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!(other instanceof EditInternshipDescriptor)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        EditInternshipDescriptor e \u003d (EditInternshipDescriptor) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getRole().equals(e.getRole())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getFrom().equals(e.getFrom())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getTo().equals(e.getTo())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 34,
      "chrisjwelly": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditItemDescriptor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Stores the details to edit the item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * corresponding field value of the item."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditItemDescriptor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditItemDescriptor() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!(other instanceof EditItemDescriptor)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        EditItemDescriptor e \u003d (EditItemDescriptor) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return getName().equals(e.getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditProjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Edits a Project Item in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditProjectCommand extends EditCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_ITEM + \" proj \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_NAME + \" LaundryBot \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_TIME + \" 02-2022\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + EXAMPLE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_PROJECT_SUCCESS \u003d \"Edited Project: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditProjectDescriptor editProjectDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index                of the project in the filtered project list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editProjectDescriptor details to edit the project with"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditProjectCommand(Index index, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editProjectDescriptor \u003d editProjectDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getProjectSize()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project toEdit \u003d model.getProject(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project editProject \u003d createEditedProject(toEdit, editProjectDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProject(toEdit, editProject);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(editProject.toString(), String.format(MESSAGE_EDIT_PROJECT_SUCCESS, editProject));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Project item from the project to be edited and the descriptor."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit Project item to be edited"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editProjectDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Project item."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Project createEditedProject("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Project toEdit, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editProjectDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Time updatedTime \u003d editProjectDescriptor.getTime().orElse(toEdit.getTime());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Website updatedWebsite \u003d editProjectDescriptor.getWebsite().orElse(toEdit.getWebsite());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String updatedDesc \u003d editProjectDescriptor.getDescription().orElse(toEdit.getDescription());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editProjectDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Project(updatedName, updatedTime, updatedWebsite, updatedDesc, updatedTags, id);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 70,
      "chrisjwelly": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditProjectDescriptor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the project with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditProjectDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Website website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditProjectDescriptor() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditProjectDescriptor(EditProjectDescriptor toCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTime(toCopy.time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setWebsite(toCopy.website);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTime(Time to) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.time \u003d to;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setWebsite(Website website) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cWebsite\u003e getWebsite() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(website);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, website, time, description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (!(other instanceof EditProjectDescriptor)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        EditProjectDescriptor e \u003d (EditProjectDescriptor) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getWebsite().equals(e.getWebsite())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditResumeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Edits a Resume Item in the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditResumeCommand extends EditCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \" res \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \" Resume 1 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \" frontend \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_RESUME_SUCCESS \u003d \"Edited Resume: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditResumeDescriptor editResumeDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index                of the resume in the filtered resume list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param editResumeDescriptor details to edit the resume with"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditResumeCommand(Index index, EditResumeDescriptor editResumeDescriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editResumeDescriptor \u003d editResumeDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume toEdit \u003d model.getResume(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume editedResume \u003d createEditedResume(toEdit, editResumeDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResume(toEdit, editedResume);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(editedResume.toString(), String.format(MESSAGE_EDIT_RESUME_SUCCESS, editedResume));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Resume item from the resume to be edited and the descriptor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit resume item to be edited"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editResumeDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Resume item."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Resume createEditedResume(Resume toEdit, EditResumeDescriptor editResumeDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editResumeDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editResumeDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Resume(updatedName, id, updatedTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 70,
      "chrisjwelly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditResumeDescriptor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the resume with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the resume."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditResumeDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditResumeDescriptor() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditResumeDescriptor(EditResumeDescriptor toCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!(other instanceof EditResumeDescriptor)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        EditResumeDescriptor e \u003d (EditResumeDescriptor) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "chrisjwelly": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditSkillCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Edits a Skill Item in the address book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * TODO: CONNECT LEVEL TO SKILL"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditSkillCommand extends EditCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_ITEM + \" ski \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_NAME + \" Software Engineering\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_SKILL_SUCCESS \u003d \"Edited Skill: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditSkillDescriptor editSkillDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index                of the skill in the filtered skill list to edit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editSkillDescriptor details to edit the skill with"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditSkillCommand(Index index, EditSkillDescriptor editSkillDescriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editSkillDescriptor \u003d editSkillDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getSkillSize()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill toEdit \u003d model.getSkill(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill editedSkill \u003d createEditedSkill(toEdit, editSkillDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkill(toEdit, editedSkill);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(editedSkill.toString(), String.format(MESSAGE_EDIT_SKILL_SUCCESS, editedSkill));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Skill item from the skill to be edited and the descriptor."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit Skill item to be edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editSkillDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Skill item."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Skill createEditedSkill(Skill toEdit, EditSkillDescriptor editSkillDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editSkillDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Level level \u003d editSkillDescriptor.getLevel().orElse(toEdit.getLevel());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editSkillDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Skill(updatedName, level, updatedTags, id);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 66,
      "chrisjwelly": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditSkillDescriptor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the skill with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the skill."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditSkillDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditSkillDescriptor() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditSkillDescriptor(EditSkillDescriptor toCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setLevel(toCopy.level);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setLevel(Level level) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cLevel\u003e getLevel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(level);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (!(other instanceof EditSkillDescriptor)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        EditSkillDescriptor e \u003d (EditSkillDescriptor) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Finds and lists all items in the storage whose name contains any of the argument keywords and whose type matches the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * specified type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all items whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]... \" + PREFIX_ITEM + \" TYPE\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Google \" + PREFIX_ITEM + \" int\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 7,
      "wardetu": 3,
      "-": 23,
      "duongphammmm": 1,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindInternshipCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Finds {@code Internship} items in the address book whose name contains the keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindInternshipCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindInternshipCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Internships\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 26,
      "wardetu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindProjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Finds {@code Project} items in the address book whose name contains the keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindProjectCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindProjectCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Projects\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 25,
      "wardetu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindResumeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Finds {@code Resume} items in the address book whose name contains the keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindResumeCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindResumeCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Resumes\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 25,
      "wardetu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindSkillCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Finds {@code Skill} items in the address book whose name contains the keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindSkillCommand extends FindCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindSkillCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Skills\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 26,
      "wardetu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Lists all items in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$s items\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListInternshipCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Internships."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListInternshipCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\", String.format(MESSAGE_SUCCESS, \"Internship\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListProjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Projects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListProjectCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\", String.format(MESSAGE_SUCCESS, \"Project\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListResumeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Resumes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListResumeCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\", String.format(MESSAGE_SUCCESS, \"Resume\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListSkillCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Skills."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListSkillCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new CommandResult(\"\", String.format(MESSAGE_SUCCESS, \"Skill\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 19,
      "wardetu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stubs/AddInternshipCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A stub class for AddInternshipCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class AddInternshipCommandStub extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Internship internship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public AddInternshipCommandStub(Internship internship) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.internship \u003d internship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Internship getInternship() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return internship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 9,
      "chrisjwelly": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stubs/AddResumeCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A stub class for AddResumeCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class AddResumeCommandStub extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Resume resume;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public AddResumeCommandStub(Resume resume) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.resume \u003d resume;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Resume getResume() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return resume;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 9,
      "chrisjwelly": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stubs/ListInternshipCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A stub class for ListInternshipCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ListInternshipCommandStub extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ListInternshipCommandStub() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 9,
      "chrisjwelly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stubs/ListResumeCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A stub class for ListResumeCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ListResumeCommandStub extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ListResumeCommandStub() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 9,
      "chrisjwelly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stubs/ViewInternshipCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Stub for ViewInternshipCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewInternshipCommandStub extends ViewCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewInternshipCommandStub(Index targetIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/stubs/ViewResumeCommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Stub for ViewResumeCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewResumeCommandStub extends ViewCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewResumeCommandStub(Index targetIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Views the details of an item in the ResuMe application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Viewing this item!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"INDEX i/ TYPE\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Example: view 1 i/int\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // This default constructor is needed for the stub"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "chrisjwelly": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewInternshipCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * The command for viewing the details of an Internship item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewInternshipCommand extends ViewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewInternshipCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getInternshipSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship toView \u003d model.getInternship(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new CommandResult(toView.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewInternshipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewInternshipCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "duongphammmm": 24,
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewProjectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * The command for viewing the details of a Project item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewProjectCommand extends ViewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewProjectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getProjectSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project toView \u003d model.getProject(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new CommandResult(toView.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewProjectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "duongphammmm": 24,
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewResumeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * The command for viewing the details of a Resume item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewResumeCommand extends ViewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewResumeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toView \u003d model.getResume(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new CommandResult(toView.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewResumeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "duongphammmm": 24,
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewSkillCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * The command for viewing the details of a Skill item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewSkillCommand extends ViewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewSkillCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getSkillSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill toView \u003d model.getSkill(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new CommandResult(toView.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewSkillCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "duongphammmm": 24,
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.add.AddProjectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddResumeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.add.AddSkillCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_ITEM, PREFIX_FROM, PREFIX_TO,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        PREFIX_ROLE, PREFIX_DESCRIPTION, PREFIX_WEBSITE, PREFIX_LEVEL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ITEM) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"res\"):"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResumeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d new Resume(name, tagList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddResumeCommand(resume);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"int\"):"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_FROM, PREFIX_TO, PREFIX_ROLE, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        AddInternshipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Time from \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_FROM).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Time to \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TO).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            String role \u003d argMultimap.getValue(PREFIX_ROLE).get().trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            // TODO: handle this toString() thingy better"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Internship internship \u003d new Internship(name, role, from, to, description, tagList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddInternshipCommand(internship);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"proj\"):"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIME, PREFIX_WEBSITE, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        AddProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Website website \u003d ParserUtil.parseWebsite(argMultimap.getValue(PREFIX_WEBSITE).get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Project project \u003d new Project(name, time, website, description, tagList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddProjectCommand(project);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case(\"ski\"):"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LEVEL) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        AddSkillCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Level level \u003d ParserUtil.parseLevel(argMultimap.getValue(PREFIX_LEVEL).get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Skill skill \u003d new Skill(name, level, tagList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddSkillCommand(skill);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "wardetu": 84,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* AB3\u0027s original prefixes */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Items */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_ITEM \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"#/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Internship */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Project */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_WEBSITE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Common between Internship and Project */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Skill */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_LEVEL \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /* Prefixes for different item types */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_INTERNSHIP \u003d new Prefix(\"int/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_PROJECT \u003d new Prefix(\"proj/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_RESUME \u003d new Prefix(\"res/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_SKILL \u003d new Prefix(\"ski/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /* User */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_GITHUB \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_UNIVERSITY \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_CAP \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 6,
      "nhamhung": 5,
      "-": 14,
      "chrisjwelly": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteInternshipCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteProjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteResumeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteSkillCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            switch (itemType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"res\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                return new DeleteResumeCommand(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"int\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return new DeleteInternshipCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"proj\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return new DeleteProjectCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"ski\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return new DeleteSkillCommand(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // Should not have reached here"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 3,
      "-": 26,
      "chrisjwelly": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditInternshipCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditProjectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditProjectDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditResumeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditResumeDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditSkillCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditSkillDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_ITEM, PREFIX_FROM, PREFIX_TO,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        PREFIX_ROLE, PREFIX_DESCRIPTION, PREFIX_WEBSITE, PREFIX_LEVEL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // TODO: Better error handling"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"res\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditResumeDescriptor editResumeDescriptor \u003d new EditResumeDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Not sure if I should create a method inside the respective descriptors for this checking."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Considerations: If I add a method inside the descriptor, then potentially need dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editResumeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editResumeDescriptor::setTags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editResumeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(EditResumeCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditResumeCommand(index, editResumeDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"int\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditInternshipDescriptor editInternshipDescriptor \u003d new EditInternshipDescriptor();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editInternshipDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editInternshipDescriptor.setRole(argMultimap.getValue(PREFIX_ROLE).get().trim());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                editInternshipDescriptor.setFrom(ParserUtil.parseTime(argMultimap.getValue(PREFIX_FROM).get().trim()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                editInternshipDescriptor.setTo(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TO).get().trim()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editInternshipDescriptor.setDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get().trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editInternshipDescriptor::setTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editInternshipDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(EditInternshipCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditInternshipCommand(index, editInternshipDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"proj\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditProjectDescriptor editProjectDescriptor \u003d new EditProjectDescriptor();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editProjectDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editProjectDescriptor.setDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get().trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_WEBSITE).isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editProjectDescriptor.setDescription(argMultimap.getValue(PREFIX_WEBSITE).get().trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editProjectDescriptor.setDescription(argMultimap.getValue(PREFIX_TIME).get().trim());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editProjectDescriptor::setTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editProjectDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(EditProjectCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditProjectCommand(index, editProjectDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"ski\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditSkillDescriptor editSkillDescriptor \u003d new EditSkillDescriptor();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editSkillDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_LEVEL).isPresent()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editSkillDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_LEVEL).get()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editSkillDescriptor::setTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editSkillDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(EditSkillCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditSkillCommand(index, editSkillDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "-": 65,
      "chrisjwelly": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditUserParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GITHUB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIVERSITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.EditUserCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.EditUserDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Parser for EditUserCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditUserParser implements Parser\u003cEditUserCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditUserCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * and returns an EditUserCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GITHUB,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        PREFIX_UNIVERSITY, PREFIX_MAJOR, PREFIX_FROM, PREFIX_TO, PREFIX_CAP, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(EditUserCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        EditUserDescriptor editUserDescriptor \u003d new EditUserDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setName(new Name(argumentMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setPhone(new Phone(argumentMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setEmail(new Email(argumentMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_GITHUB).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setGithub(new Github(argumentMultimap.getValue(PREFIX_GITHUB).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_UNIVERSITY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setUni(argumentMultimap.getValue(PREFIX_UNIVERSITY).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_MAJOR).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setMajor(argumentMultimap.getValue(PREFIX_MAJOR).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setFrom(new Time(argumentMultimap.getValue(PREFIX_FROM).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setTo(new Time(argumentMultimap.getValue(PREFIX_TO).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_CAP).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setCap(Double.valueOf(argumentMultimap.getValue(PREFIX_CAP).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new EditUserCommand(editUserDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindInternshipCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.find.FindProjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.find.FindResumeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.find.FindSkillCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String trimmedPreamble \u003d argMultimap.getPreamble().trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (trimmedPreamble.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String[] nameKeywords \u003d trimmedPreamble.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"res\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new FindResumeCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"int\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new FindInternshipCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"proj\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new FindProjectCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case \"ski\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new FindSkillCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 3,
      "-": 27,
      "duongphammmm": 1,
      "chrisjwelly": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListInternshipCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.list.ListProjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListResumeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.list.ListSkillCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch(itemType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case (\"int\"):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new ListInternshipCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"proj\"):"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ListProjectCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"res\"):"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ListResumeCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"ski\"):"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ListSkillCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 4,
      "wardetu": 8,
      "chrisjwelly": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Parses a {@code String level} into a {@code Level}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws ParseException if the given {@code level} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Level parseLevel(String level) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(level);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String trimmedLevel \u003d level.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Level value : Level.values()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (value.toString().equalsIgnoreCase(trimmedLevel)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        throw new ParseException(\"Level of proficiency can only be one of these three types: basic, intermediate, \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"advanced.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Parses a {@code String website} into a {@code Website}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws ParseException if the given {@code level} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Website parseWebsite(String website) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(website);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String trimmedWebsite \u003d website.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Website.isValidWebsite(trimmedWebsite)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(Website.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Website(trimmedWebsite);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses an {@code String itemType} into a {@code String}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String parseItemType(String itemType) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(itemType);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String trimmedItemType \u003d itemType.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!Item.isValidItemType(trimmedItemType)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"Not a valid item type!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return trimmedItemType;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses a {@code String time} in MM-YYYY format into a {@code Time}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 35,
      "-": 120,
      "duongphammmm": 4,
      "chrisjwelly": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResumeBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.EditUserCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ResumeBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case EditUserCommand.COMMAND_WORD: //\"me\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new EditUserParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 5,
      "wardetu": 1,
      "nhamhung": 4,
      "-": 69,
      "chrisjwelly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewInternshipCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewProjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewResumeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewSkillCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // The code is actually identical to DeleteCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            switch(itemType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"res\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return new ViewResumeCommand(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"int\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return new ViewInternshipCommand(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"proj\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return new ViewProjectCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            case \"ski\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return new ViewSkillCommand(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // Should not have reached here"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the user prefs\u0027 resume book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Path getResumeBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Sets the user prefs\u0027 resume book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResumeBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces resume book data with the data in {@code resumeBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResumeBook(ReadOnlyResumeBook resumeBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ReadOnlyResumeBook getResumeBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the current user with {@code person}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setUser(Person person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return Person in the model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    Person getUser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internships \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if an internship with the same identity as {@code internship} exists in the resume book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasInternship(Internship internship);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds the given internship."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code internship} must not already exist in the resume book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void addInternship(Internship internship);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given internship {@code target} with {@code editedInternship}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedInternship} must not be the same as another existing internship in the resume book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setInternship(Internship target, Internship editedInternship);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Deletes the given internship."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The internship must exist in the resume book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void deleteInternship(Internship internship);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return an Internship item at the specified index from the internship list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Internship item at {@code index}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Internship getInternship(Index index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the internship list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getInternshipSize();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the internship list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setInternshipToDisplay();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Projects \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the resume book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProject(Project project);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a project to the resume book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The project must not already exist in the resume book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addProject(Project project);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedProject} must not be the same as another existing project in the resume book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteProject(Project key);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Project item at the specified index from the project list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Project item at {@code index}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Project getProject(Index index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the project list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getProjectSize();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the project list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setProjectToDisplay();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Skills \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a skill with the same identity as {@code skill} exists in the resume book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkill(Skill skill);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a skill to the resume book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The skill must not already exist in the resume book."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSkill(Skill skill);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given skill {@code target} in the list with {@code editedSkill}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedSkill} must not be the same as another existing skill in the resume book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkill(Skill target, Skill editedSkill);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteSkill(Skill key);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Skill item at the specified index from the skill list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Skill item at {@code index}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Skill getSkill(Index index);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the skill list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getSkillSize();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the skill list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setSkillToDisplay();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resumes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a resume with the same identity as {@code resume} exists in the resume book."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasResume(Resume resume);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds the given resume."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code resume} must not already exist in the resume book."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void addResume(Resume resume);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given resume {@code target} with {@code editedResume}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedResume} must not be the same as another existing resume in the resume book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResume(Resume target, Resume editedResume);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Resume getResumeByIndex(int resumeIndex);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasResumeId(int resumeIndex);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Deletes the given resume."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The resume must exist in the resume book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void deleteResume(Resume resume);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Resume item at the specified index from the resume list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Resume item at {@code index}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Resume getResume(Index index);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the resume list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    int getResumeSize();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the resume list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResumeToDisplay();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item Lists \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /** Returns an unmodifiable view of the filtered item list */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the filter of the filtered item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void updateFilteredItemList(Predicate\u003cItem\u003e predicate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //// STUBS"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    boolean hasItem(Item item);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    void addItem(Item item);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    void deleteItem(Item item);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    void setItem(Item target, Item edit);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    void setItemsToDisplay(String type);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasInternshipId(int i);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasProjectId(int i);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasSkillId(int i);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 11,
      "wardetu": 7,
      "nhamhung": 6,
      "-": 73,
      "duongphammmm": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final ResumeBook resumeBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Initializes a ModelManager with the given resumeBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ModelManager(ReadOnlyResumeBook resumeBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(resumeBook, userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        logger.fine(\"Initializing with resume book: \" + resumeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumeBook \u003d new ResumeBook(resumeBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.resumeBook.getItemToDisplayList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this(new ResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Path getResumeBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return userPrefs.getResumeBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setResumeBookFilePath(Path resumeBookFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resumeBookFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userPrefs.setResumeBookFilePath(resumeBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ResumeBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeBook(ReadOnlyResumeBook resumeBook) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumeBook.resetData(resumeBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ReadOnlyResumeBook getResumeBook() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setUser(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setUser(person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Person getUser() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return resumeBook.getUser();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internships \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasInternship(Internship internship) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.hasInternship(internship);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addInternship(internship);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternship(Internship target, Internship editedInternship) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedInternship);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setInternship(target, editedInternship);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteInternship(Internship key) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.deleteInternship(key);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Internship getInternship(Index index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return resumeBook.getInternship(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getInternshipSize() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return resumeBook.getInternshipSize();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternshipToDisplay() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setInternshipToDisplay();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Projects \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.hasProject(project);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addProject(project);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setProject(target, editedProject);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteProject(Project key) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.deleteProject(key);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Project getProject(Index index) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.getProject(index);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getProjectSize() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.getProjectSize();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProjectToDisplay() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setProjectToDisplay();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Skill \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkill(Skill skill) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.hasSkill(skill);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addSkill(skill);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkill(Skill target, Skill editedSkill) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedSkill);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setSkill(target, editedSkill);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteSkill(Skill key) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.deleteSkill(key);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Skill getSkill(Index index) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.getSkill(index);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getSkillSize() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.getSkillSize();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkillToDisplay() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setSkillToDisplay();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resume \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasResume(Resume resume) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.hasResume(resume);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addResume(resume);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResume(Resume target, Resume editedResume) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedResume);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setResume(target, editedResume);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume getResumeByIndex(int index) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resumeBook.getResumeByIndex(index);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasResumeId(int resumeIndex) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resumeBook.hasResumeId(resumeIndex);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteResume(Resume target) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.deleteResume(target);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Resume getResume(Index index) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return resumeBook.getResume(index);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getResumeSize() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return resumeBook.getResumeSize();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeToDisplay() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setResumeToDisplay();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return filteredItems;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook.equals(other.resumeBook)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 filteredItems.equals(other.filteredItems);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //// STUBS"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addItem(Item item) {}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteItem(Item item) {}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setItem(Item target, Item edit) {}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItemsToDisplay(String type) {}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasInternshipId(int i) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resumeBook.hasInternshipId(i);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasProjectId(int i) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resumeBook.hasProjectId(i);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasSkillId(int i) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resumeBook.hasSkillId(i);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 21,
      "wardetu": 22,
      "nhamhung": 5,
      "-": 122,
      "duongphammmm": 173,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyResumeBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Unmodifiable view of a resume book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public interface ReadOnlyResumeBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Get Detail Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the user of the resume book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return {@code Person} item representing the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Person getUser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current items list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ObservableList\u003cItem\u003e getItemToDisplayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current internship list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate internship."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    UniqueItemList getInternshipList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current project list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate project."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    UniqueItemList getProjectList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current skill list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate skill."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    UniqueItemList getSkillList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current resume list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate resume."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    UniqueItemList getResumeList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Query List Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return an Internship item at the specified index from the internship list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Internship item at {@code index}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Internship getInternship(Index index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the internship list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getInternshipSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Project item at the specified index from the project list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Project item at {@code index}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Project getProject(Index index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the project list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getProjectSize();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Skill item at the specified index from the skill list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Skill item at {@code index}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Skill getSkill(Index index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the skill list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getSkillSize();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Resume item at the specified index from the resume list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Resume item at {@code index}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Resume getResume(Index index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the resume list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getResumeSize();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ///STUB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    UniqueItemList getPersonalDetailList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasResumeId(int resumeIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasInternshipId(int i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasProjectId(int i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean hasSkillId(int i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "wardetu": 8,
      "duongphammmm": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Path getResumeBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ResumeBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Wraps all data at the resume-book level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Duplicates are not allowed (by .isSame comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ResumeBook implements ReadOnlyResumeBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Should be all caps but check style complain"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Person user;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final UniqueItemList itemsToDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final UniqueItemList internships;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final UniqueItemList projects;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final UniqueItemList skills;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final UniqueItemList resumes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        user \u003d new Person(new Name(\"Default name\"), new Phone(\"000\"), new Email(\"000@gmail.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new Github(\"000\"), \"Default university\", \"Default major\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new Time(\"12-9999\"), new Time(\"12-9999\"), 5.0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        itemsToDisplay \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internships \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        projects \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        skills \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumes \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBook() {}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Creates an ResumeBook using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBook(ReadOnlyResumeBook toBeCopied) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Replace display list \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setItemsToDisplay(UniqueItemList itemsToDisplay) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.itemsToDisplay.setItems(itemsToDisplay);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // STUB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItemsToDisplay(String type) {}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the internship list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternshipToDisplay() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setItemsToDisplay(internships);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the project list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProjectToDisplay() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setItemsToDisplay(projects);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the skill list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkillToDisplay() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setItemsToDisplay(skills);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the resume list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeToDisplay() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setItemsToDisplay(resumes);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Replace the contents of user profile panel with the content of updated user profile."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setUserToDisplay() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Overwrite data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the user profile detail with that of {@code person}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setUser(Person user) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the internship list with {@code internships}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code internships} must not contain duplicate items."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternships(UniqueItemList internships) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.internships.setItems(internships);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the project list with {@code projects}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code projects} must not contain duplicate items."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProjects(UniqueItemList projects) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.projects.setItems(projects);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the skill list with {@code skills}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code skills} must not contain duplicate items."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkills(UniqueItemList skills) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.skills.setItems(skills);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the resume list with {@code resumes}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code resumes} must not contain duplicate items."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumes(UniqueItemList resumes) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumes.setItems(resumes);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Resets the existing data of this {@code ResumeBook} with {@code newData}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData(ReadOnlyResumeBook newData) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setUser(newData.getUser());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setInternships(newData.getInternshipList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setSkills(newData.getSkillList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setResumes(newData.getResumeList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internships \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if an internship with the same identity as {@code internship} exists in the resume book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasInternship(Internship internship) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internships.contains(internship);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds an internship to the resume book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The internship must not already exist in the resume book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internships.add(internship);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given internship {@code target} in the list with {@code editedInternship}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedInternship} must not be the same as another existing internship in the resume book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternship(Internship target, Internship editedInternship) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internships.setItem(target, editedInternship);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteInternship(Internship key) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int id \u003d key.getId();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internships.remove(key);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : resumes) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d (Resume) item;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resume.getInternships().remove(id);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Internship getInternship(Index index) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return (Internship) internships.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getInternshipSize() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internships.getSize();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Projects \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the resume book."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a project to the resume book."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The project must not already exist in the resume book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        projects.add(project);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedProject} must not be the same as another existing project in the resume book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        projects.setItem(target, editedProject);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteProject(Project key) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int id \u003d key.getId();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : resumes) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d (Resume) item;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resume.getProjects().remove(id);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Project getProject(Index index) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return (Project) projects.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getProjectSize() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return projects.getSize();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Skills \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a skill with the same identity as {@code skill} exists in the resume book."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkill(Skill skill) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return skills.contains(skill);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a skill to the resume book."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The skill must not already exist in the resume book."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        skills.add(skill);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given skill {@code target} in the list with {@code editedSkill}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedSkill} must not be the same as another existing skill in the resume book."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkill(Skill target, Skill editedSkill) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        skills.setItem(target, editedSkill);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteSkill(Skill key) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int id \u003d key.getId();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        skills.remove(key);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : resumes) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d (Resume) item;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resume.getSkills().remove(id);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Skill getSkill(Index index) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return (Skill) skills.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getSkillSize() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return skills.getSize();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resumes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a resume with the same identity as {@code resume} exists in the resume book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasResume(Resume resume) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumes.contains(resume);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a resume to the resume book."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The resume must not already exist in the resume book."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumes.add(resume);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given resume {@code target} in the list with {@code editedResume}."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedResume} must not be the same as another existing resume in the resume book."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResume(Resume target, Resume editedResume) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumes.setItem(target, editedResume);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteResume(Resume key) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumes.remove(key);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Resume getResume(Index index) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return (Resume) resumes.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getResumeSize() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return resumes.getSize();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return itemsToDisplay.asUnmodifiableObservableList().size() + \" items\";"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Person getUser() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ObservableList\u003cItem\u003e getItemToDisplayList() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return itemsToDisplay.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public UniqueItemList getInternshipList() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internships;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public UniqueItemList getProjectList() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public UniqueItemList getSkillList() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return skills;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public UniqueItemList getResumeList() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumes;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ResumeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 user.equals(((ResumeBook) other).user)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 itemsToDisplay.equals(((ResumeBook) other).itemsToDisplay))"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 internships.equals(((ResumeBook) other).internships)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 projects.equals(((ResumeBook) other).projects)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 skills.equals(((ResumeBook) other).skills)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 resumes.equals(((ResumeBook) other).resumes);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return itemsToDisplay.hashCode();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //STUBS"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public UniqueItemList getPersonalDetailList() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new UniqueItemList();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume getResumeByIndex(int index) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item res : resumes) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (res.getId() \u003d\u003d index) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return (Resume) res;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasResumeId(int resumeIndex) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : resumes) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (item.getId() \u003d\u003d resumeIndex) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasInternshipId(int i) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : internships) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (item.getId() \u003d\u003d i) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasProjectId(int i) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : projects) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (item.getId() \u003d\u003d i) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean hasSkillId(int i) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : skills) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (item.getId() \u003d\u003d i) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addItem(Item item) {}"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteItem(Item item) {}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setItem(Item target, Item edit) {}"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 19,
      "wardetu": 66,
      "nhamhung": 9,
      "duongphammmm": 380,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setResumeBookFilePath(newUserPrefs.getResumeBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Path getResumeBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Internship.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Internship item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Internship extends Item {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // TODO: convert from and to back to Time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Internship(Name name, String role, Time from, Time to, String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, role, from, to, description, tags, ItemUtil.yieldId(\"int\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Internship(Name name, String role, Time from, Time to, String description, Set\u003cTag\u003e tags, int id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireAllNonNull(role, from, to, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(\"int\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.role;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Time getFrom() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.from;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Time getTo() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.to;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Role: \").append(getRole()).append(\"\\n\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getFrom()).append(\" - \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getTo());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Company: \").append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getSummary()).append(\"\\n\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof Internship // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getName().equals(((Internship) other).getName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 role.equals(((Internship) other).role) // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 from.equals(((Internship) other).from)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 to.equals(((Internship) other).to)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 description.equals(((Internship) other).description));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 69,
      "duongphammmm": 4,
      "chrisjwelly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an Item in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public abstract class Item {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"You are required to specify an item type! For example: i/ res\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Item-level fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected Type type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected final int id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Item(Name name, int id, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Item(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, 0, tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public abstract String getSummary();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if both items have the same name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean isSame(Item otherItem) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 otherItem.getName().equals(getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if itemType matches any of the known item types."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param itemType The itemType String."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return true if the itemType matches any of the known item types."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static boolean isValidItemType(String itemType) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] correctFormats \u003d new String[] {\"int\", \"proj\", \"ski\", \"res\"};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (String correctFormat: correctFormats) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (itemType.equals(correctFormat)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if both items have the same identity."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return otherItem.getId() \u003d\u003d getId();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Objects.hash(id, name, tags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"ID: \").append(getId()).append(\"\\n\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Tags: \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 4,
      "wardetu": 8,
      "duongphammmm": 99,
      "chrisjwelly": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Github github;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String university;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Time from;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Time to;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final double cap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Github github, String university, String major, Time from,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  Time to, double cap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.github \u003d github;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.university \u003d university;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.cap \u003d cap;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Github getGithub() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return github;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getUniversity() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return university;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getMajor() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Time getFrom() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Time getTo() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Objects.hash(name, phone, email, github, university, major, from, to, cap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getPhone()).append(\" | \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getEmail()).append(\" | \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getGithub()).append(\"\\n\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getUniversity()).append(\" | \")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getFrom()).append(\" - \")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getTo()).append(\"\\n\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Major: \").append(getMajor()).append(\" | \")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"CAP: \").append(getCap());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "duongphammmm": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Project.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Project item."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Project extends Item {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Website website;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Project(Name name, Time time, Website website, String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, time, website, description, tags, ItemUtil.yieldId(\"proj\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Project(Name name, Time time, Website website, String description, Set\u003cTag\u003e tags, int id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireAllNonNull(time, website, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(\"proj\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Website getWebsite() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.website;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        builder.append(\"Time: \")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Project: \").append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getSummary()).append(\"\\n\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getWebsite()).append(\"\\n\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof Project // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getName().equals(((Project) other).getName())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 time.equals(((Project) other).time) // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 website.equals(((Project) other).website) // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 description.equals(((Project) other).description)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 63,
      "duongphammmm": 3,
      "chrisjwelly": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Resume.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Resume item."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Resume extends Item {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Item-level fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final TreeSet\u003cInteger\u003e internships \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final TreeSet\u003cInteger\u003e projects \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final TreeSet\u003cInteger\u003e skills \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, ItemUtil.yieldId(\"res\"), tags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume(Name name, int id, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(\"res\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void addInternship(int value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        internships.add(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setInternships(int... values) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        internships.clear();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (int i : values) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            internships.add(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public TreeSet\u003cInteger\u003e getInternships() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.internships;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void addProject(int value) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        projects.add(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public TreeSet\u003cInteger\u003e getProjects() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.projects;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setProjects(int... values) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        projects.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (int i : values) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            projects.add(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void addSkill(int value) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        skills.add(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public TreeSet\u003cInteger\u003e getSkills() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.skills;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setSkills(int... values) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        skills.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (int i : values) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            skills.add(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        builder.append(getInternships().size())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\" internship(s), \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getProjects().size())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\" project(s), \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getSkills().size())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(\" skill(s).\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Resume: \")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getSummary());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 94,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Skill.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Skill item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Skill extends Item {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Skill(Name name, Level level, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, level, tags, ItemUtil.yieldId(\"ski\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Skill(Name name, Level level, Set\u003cTag\u003e tags, int id) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(level);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(\"ski\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Level getLevel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Level: \").append(getLevel());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getSummary());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof Skill // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getName().equals(((Skill) other).getName())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 level.getLevelCode() \u003d\u003d ((Skill) other).level.getLevelCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 44,
      "duongphammmm": 6,
      "chrisjwelly": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * An item is considered unique by comparing using {@code Item#isSame(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * items uses Item#isSame(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of an item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * @see Item#isSame(Item)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class UniqueItemList implements Iterable\u003cItem\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final ObservableList\u003cItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean contains(Item toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds an item to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void add(Item toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setItem(Item target, Item editedItem) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!target.isSame(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void remove(Item toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setItems(UniqueItemList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setItems(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ObservableList\u003cItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Iterator\u003cItem\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private boolean itemsAreUnique(List\u003cItem\u003e items) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                if (items.get(i).isSame(items.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 4,
      "duongphammmm": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/DuplicateItemException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/IncompatibleTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Signals that the operation involves adding an item to a list of incompatible type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class IncompatibleTypeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public IncompatibleTypeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(\"Operation involves incompatible type\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an Item\u0027s description in the resume book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Github.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a Person\u0027s GitHub account in the resume book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGithub(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Github {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"Github usernames should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"1. May only contain alphanumeric characters or hyphens.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"2. Cannot have multiple consecutive hyphens.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"3. Cannot begin or end with a hyphen.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"4. Maximum is 39 characters.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-z\\\\d](?:[a-z\\\\d]|-(?\u003d[a-z\\\\d])){0,38}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code Github}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param github A valid Github username."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Github(String github) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(github);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidGithub(github), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d github;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid Github username."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidGithub(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Github // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Github) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Level.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " *  Represents a Skill proficiency level."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public enum Level {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    BASIC(1),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    INTERMEDIATE(2),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ADVANCED(3);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final int levelCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Level(int levelCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.levelCode \u003d levelCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getLevelCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.levelCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 19,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Phone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an Item\u0027s time (start/end date) in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be in the format MM-yyyy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(1[0-2]|0[1-9])-[0-9]{4}$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param time A valid time in format MM/yyyy."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Formats {@code Time} to \"MMM yyyy\" format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return formatted {@String}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String format() throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String pattern \u003d \"MMM yyyy\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Date date \u003d format.parse(this.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return format();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "duongphammmm": 68,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Type.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Represents a Item\u0027s type in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String alias;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Type(String alias) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Type generate(String alias) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Type(alias);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getAlias() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getFullType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        switch (alias) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"res\"):"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Resume\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"acad\"):"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Academic\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"pd\"):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Personal Detail\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"edu\"):"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Education\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"ski\"):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Skill\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"int\"):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Internship\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"proj\"):"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Project\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Not a valid type\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Website.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a Project\u0027s website in the resume book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWebsite(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Website {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"Website link should follow certain constraints\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"^(https?:\\\\/\\\\/)?(www\\\\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\\\\.)+[\\\\w]{2,}(\\\\/\\\\S*)?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code website link}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param website A valid website link."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Website(String website) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(website);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidWebsite(website), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d website;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid website link."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidWebsite(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Website // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Website) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ItemUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Containing utility methods for Item and its subclasses"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ItemUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static TreeMap\u003cString, Integer\u003e idGenerator \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Generates an id value for the given item type. Increments the stored value."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param itemType a String representation of the item type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a non negative integer id value"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static int yieldId(String itemType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (idGenerator.containsKey(itemType)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            int value \u003d idGenerator.get(itemType);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            idGenerator.put(itemType, value + 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            idGenerator.put(itemType, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sets the base id value mapped from the given item type to the given value."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param itemType a String representation of the given item type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param value a non negative integer id value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void setBaseIdOfItemType(String itemType, int value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        idGenerator.put(itemType, value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static Resume[] getSampleResumes() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new Resume[] {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            new Resume(new Name(\"Resume 1\"), getTagSet(\"SE\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            new Resume(new Name(\"Resume 2\"), getTagSet(\"UI\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static ReadOnlyResumeBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook sampleAb \u003d new ResumeBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Resume sampleResume : getSampleResumes()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            sampleAb.addResume(sampleResume);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "duongphammmm": 11,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a storage for {@link ResumeBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyResumeBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Optional\u003cReadOnlyResumeBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Saves the given {@link ReadOnlyResumeBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyResumeBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "duongphammmm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInternship.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Internship}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedInternship {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String to;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedInternship} with the given details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedInternship(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"from\") String from, @JsonProperty(\"to\") String to,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"role\") String role, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Internship} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedInternship(Internship internship) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d internship.getName().fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d internship.getId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d internship.getFrom().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d internship.getTo().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.role \u003d internship.getRole();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d internship.getDescription();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(internship.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Internship} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Internship toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Internship(new Name(name), role, new Time(from), new Time(to), description, Set.copyOf(tags), id);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String github;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String university;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String to;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final double cap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"github\") String github,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                             @JsonProperty(\"university\") String university, @JsonProperty(\"major\") String major,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                             @JsonProperty(\"from\") String from, @JsonProperty(\"to\") String to,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                             @JsonProperty(\"cap\") String cap) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.github \u003d github;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.university \u003d university;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.cap \u003d Double.valueOf(cap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        github \u003d source.getGithub().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        university \u003d source.getUniversity();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        major \u003d source.getMajor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        from \u003d source.getFrom().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        to \u003d source.getTo().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        cap \u003d source.getCap();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Person toModelType() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Person(new Name(name), new Phone(phone), new Email(email), new Github(github), university, major,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                new Time(from), new Time(to), cap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 14,
      "-": 37,
      "duongphammmm": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedProject {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String website;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                              @JsonProperty(\"time\") String time, @JsonProperty(\"website\") String website,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                              @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Project} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedProject(Project project) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d project.getName().fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d project.getId();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.time \u003d project.getTime().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.website \u003d project.getWebsite().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d project.getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(project.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Project(new Name(name), new Time(time), new Website(website), description, Set.copyOf(tags), id);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedResume.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Resume}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedResume {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cInteger\u003e internshipIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cInteger\u003e projectIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cInteger\u003e skillIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedResume} with the given details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedResume(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"internships\") List\u003cInteger\u003e internshipIndices,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"projects\") List\u003cInteger\u003e projectIndices,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"skills\") List\u003cInteger\u003e skillIndices,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (internshipIndices !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.internshipIndices.addAll(internshipIndices);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (projectIndices !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.internshipIndices.addAll(projectIndices);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (skillIndices !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.internshipIndices.addAll(skillIndices);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Resume} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedResume(Resume res) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d res.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d res.getId();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(res.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        internshipIndices.addAll(res.getInternships());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        projectIndices.addAll(res.getProjects());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        skillIndices.addAll(res.getSkills());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Resume} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Resume resume \u003d new Resume(new Name(name), id, Set.copyOf(tags));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (int internship : internshipIndices) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resume.addInternship(internship);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (int project : projectIndices) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resume.addProject(project);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (int skill : skillIndices) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resume.addSkill(skill);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resume;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSkill.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Skill}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedSkill {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String level;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedSkill} with the given details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedSkill(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") int id,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                 @JsonProperty(\"level\") String level, @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Skill} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedSkill(Skill skill) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d skill.getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d skill.getId();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.level \u003d skill.getLevel().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(skill.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Skill} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Skill toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Skill(new Name(name), Level.valueOf(level), Set.copyOf(tags), id);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Optional\u003cJsonSerializableResumeBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                filePath, JsonSerializableResumeBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyResumeBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableResumeBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 9,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableResumeBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "@JsonRootName(value \u003d \"resumebook\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "class JsonSerializableResumeBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final JsonAdaptedPerson user;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedResume\u003e resumes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonSerializableResumeBook} with the given persons."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public JsonSerializableResumeBook(@JsonProperty(\"user\") JsonAdaptedPerson user,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"resumes\") List\u003cJsonAdaptedResume\u003e resumes,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"internships\") List\u003cJsonAdaptedInternship\u003e internships,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"skills\") List\u003cJsonAdaptedSkill\u003e skills,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.resumes.addAll(resumes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.skills.addAll(skills);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableResumeBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonSerializableResumeBook(ReadOnlyResumeBook source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        user \u003d new JsonAdaptedPerson(source.getUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumes.addAll(source"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getResumeList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(x -\u003e (Resume) x)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedResume::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        internships.addAll(source"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getInternshipList()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(x -\u003e (Internship) x)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedInternship::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        skills.addAll(source"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getSkillList()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(x -\u003e (Skill) x)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedSkill::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        projects.addAll(source"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getProjectList()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(x -\u003e (Project) x)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedProject::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ResumeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook resumeBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Person person \u003d user.toModelType();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setUser(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedResume jsonAdaptedResume : resumes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d jsonAdaptedResume.toModelType();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (resumeBook.hasItem(resume)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resumeBook.addResume(resume);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, resume.getId());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"res\", maxIdValue + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedInternship jsonAdaptedInternship : internships) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Internship internship \u003d jsonAdaptedInternship.toModelType();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (resumeBook.hasItem(internship)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resumeBook.addInternship(internship);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, internship.getId());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"int\", maxIdValue + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (resumeBook.hasItem(project)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resumeBook.addProject(project);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, project.getId());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"proj\", maxIdValue + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedSkill jsonAdaptedSkill : skills) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Skill skill \u003d jsonAdaptedSkill.toModelType();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (resumeBook.hasItem(skill)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resumeBook.addSkill(skill);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, skill.getId());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"ski\", maxIdValue + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resumeBook;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 133,
      "duongphammmm": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "duongphammmm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final Item person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label summary;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ItemCard(Item person, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        summary.setText(person.getSummary());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ItemCard card \u003d (ItemCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 3,
      "-": 64,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * A ui for the status box when there is any interaction with an item that is displayed at the body of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class ItemDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"ItemDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private TextArea itemDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ItemDisplay() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setDataFeedbackToUser(String dataToUser) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(dataToUser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemDisplay.setText(dataToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItemListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ListView\u003cItem\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ItemListPanel(ObservableList\u003cItem\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        protected void updateItem(Item person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new ItemCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.personbio.PersonPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ItemListPanel itemListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ItemDisplay itemDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private PersonPane person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private StackPane itemDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private VBox profilePlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        itemListPanel \u003d new ItemListPanel(logic.getFilteredItemList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(itemListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemDisplay \u003d new ItemDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemDisplayPlaceholder.getChildren().add(itemDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        person \u003d new PersonPane(logic.getUser());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        profilePlaceholder.getChildren().add(person.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public ItemListPanel getItemListPanel() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return itemListPanel;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            logger.info(\"Item Display: \" + commandResult.getDataToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            person.setProfile(logic.getUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (!commandResult.getDataToUser().equals(\"\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                itemDisplay.setDataFeedbackToUser(commandResult.getDataToUser());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 23,
      "-": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/FieldDataPair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * A class to represent the pair of field and data for each row of the personal detail table."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class FieldDataPair {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final SimpleStringProperty field;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final SimpleStringProperty data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public FieldDataPair(String field, String data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.field \u003d new SimpleStringProperty(field);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.data \u003d new SimpleStringProperty(data);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setData(String data) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.data.set(data);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return data.get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return field.get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setField(String field) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.field.set(field);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/PersonDetailPane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Table to display all personal details"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class PersonDetailPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"PersonDetailsPane.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final List\u003cString\u003e LABELS \u003d new ArrayList\u003cString\u003e(List.of(\"Name:\", \"Phone:\", \"Email:\", \"Github:\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"University:\", \"Major:\", \"From:\", \"To:\", \"CAP:\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ObservableList\u003cFieldDataPair\u003e list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private TableView\u003cFieldDataPair\u003e tableView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private TableColumn\u003cString, String\u003e field;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private TableColumn\u003cString, String\u003e data;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Constructs a personal detail pane with a complete user profile."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param github"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param university"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param major"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param cap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public PersonDetailPane(String name, String phone, String email, String github, String university, String major,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                            String time, String to, String cap) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        field.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"field\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        data.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"data\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cString\u003e data \u003d new ArrayList\u003c\u003e(List.of(name, phone, email, github, university, major, time, to, cap));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Iterator\u003cString\u003e iter \u003d data.iterator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        LABELS.forEach(label -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            list.add(new FieldDataPair(label, iter.next()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        tableView.setItems(list);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 57,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/PersonPane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * The entire portion that displays user\u0027s personal details"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class PersonPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"PersonPane.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static String filePath \u003d \"/images/photo.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Profile profile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Image profilePic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String profilePicPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private PersonDetailPane studentProfile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ResumeBook resumeBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Person user;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private HBox profilePlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private VBox personDetailsPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    * Constructs the entire person pane with profile and personal details table."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public PersonPane(Person user) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String name \u003d this.user.getName().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String phone \u003d this.user.getPhone().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String email \u003d this.user.getEmail().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String github \u003d this.user.getGithub().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String university \u003d this.user.getUniversity();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String major \u003d this.user.getMajor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String from \u003d this.user.getFrom().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String to \u003d this.user.getTo().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String cap \u003d String.valueOf(this.user.getCap());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        profilePic \u003d new Image(MainApp.class.getResourceAsStream(filePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Profile profile \u003d new Profile(profilePic, \"Nham Hung\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \"What if Newton discovered gravity from a durian?\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        profilePlaceholder.getChildren().add(profile.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        studentProfile \u003d new PersonDetailPane(name, phone, email, github, university, major, from, to, cap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        personDetailsPlaceholder.getChildren().add(studentProfile.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setProfile(Person updatedUser) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        personDetailsPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        profilePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String name \u003d updatedUser.getName().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String phone \u003d updatedUser.getPhone().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String email \u003d updatedUser.getEmail().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String github \u003d updatedUser.getGithub().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String university \u003d updatedUser.getUniversity();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String major \u003d updatedUser.getMajor();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String from \u003d updatedUser.getFrom().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String to \u003d updatedUser.getTo().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String cap \u003d String.valueOf(updatedUser.getCap());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        personDetailsPlaceholder.getChildren().add(new PersonDetailPane(name, phone, email, github, university,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                 major, from, to, cap).getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        profilePic \u003d new Image(MainApp.class.getResourceAsStream(filePath));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Profile profile \u003d new Profile(profilePic, name,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \"What if Newton discovered gravity from a durian?\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        profilePlaceholder.getChildren().add(profile.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 5,
      "nhamhung": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/Profile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Ui for user profile with user picture, name and description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class Profile extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"Profile.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ImageView profilePicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Profile(Image profilePic, String name, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.profilePicture.setImage(profilePic);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.name.setText(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.description.setText(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 32
    }
  },
  {
    "path": "src/main/resources/view/ItemDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    \u003cTextArea fx:id\u003d\"itemDisplay\" editable\u003d\"false\" styleClass\u003d\"item-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cHBox fx:id\u003d\"mainContainer\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cVBox fx:id\u003d\"profilePlaceholder\" minWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cVBox fx:id\u003d\"mainAppPlaceholder\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cSplitPane fx:id\u003d\"userFeedback\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                       \u003citems\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                          \u003cVBox fx:id\u003d\"resultAndItem\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"200.0\" minWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                        styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                               \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                               \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                         \u003cStackPane fx:id\u003d\"itemDisplayPlaceholder\" minWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                      \u003cVBox fx:id\u003d\"personList\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                   VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                       \u003c/items\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 39,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cLabel fx:id\u003d\"summary\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$summary\" textFill\u003d\"#ddd235\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 16,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/Profile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cImageView fx:id\u003d\"profilePicture\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cScrollPane fitToWidth\u003d\"true\" styleClass\u003d\"scroll-pane\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cVBox maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"name\" lineSpacing\u003d\"5.0\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"description\" lineSpacing\u003d\"5.0\" maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                         text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 36
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/personDetailsPane.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cTableView fx:id\u003d\"tableView\" styleClass\u003d\"scroll-pane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"field\" maxWidth\u003d\"150.0\" minWidth\u003d\"120.0\" text\u003d\"Field\" reorderable\u003d\"false\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                       sortable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"data\" text\u003d\"Data\" reorderable\u003d\"false\" sortable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 20
    }
  },
  {
    "path": "src/main/resources/view/personPane.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cHBox fx:id\u003d\"profilePlaceholder\" styleClass\u003d\"pane-with-border\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cVBox fx:id\u003d\"personDetailsPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "//import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "//import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.testutil.PersonalDetailBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item expectedItem \u003d new PersonalDetailBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.addPersonalDetail(expectedItem);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        public void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "wardetu": 156,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.PersonalDetail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.PersonBuilder;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*@BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.addItem(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail personInList \u003d model.getResumeBook().getItemToDisplayList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "duongphammmm": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.UserPrefs;*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "// TODO: RESUME TESTS"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.setResumeBook(new ResumeBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 18,
      "-": 11,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"\", \"feedback\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"\", \"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"\", \"feedback\", false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"\", \"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"\", \"feedback\", true, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"\", \"feedback\", false, true)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"\", \"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"\", \"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"\", \"different\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"\", \"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"\", \"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 11,
      "wardetu": 2,
      "-": 41,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "// import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_RESUME_NAME_SE \u003d \"Software Engineering Intern Resume\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_RESUME_NAME_ME \u003d \"Mechanical Engineering Intern Resume\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_SKILL_NAME_GIT \u003d \"Git and Github\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // PROJECT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String ITEM_TYPE_PROJECT \u003d \" \" + PREFIX_ITEM + \" proj\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_PROJECT_NAME_ORBITAL \u003d \"Orbital\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_NAME_ORBITAL \u003d \" \" + PREFIX_NAME + \" \" + VALID_PROJECT_NAME_ORBITAL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TIME \u003d \"06-2020\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TIME \u003d \" \" + PREFIX_TIME + \" \" + VALID_TIME;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_WEBSITE \u003d \"abc.github.io\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_WEBSITE \u003d \" \" + PREFIX_WEBSITE + \" \" + VALID_WEBSITE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_DESCRIPTION \u003d \"For a little mod named CS2103T\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_DESCRIPTION \u003d \" \" + PREFIX_DESCRIPTION + \" \" + VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TAG_JAVA \u003d \"Java\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TAG_JAVA \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // INTERNSHIP"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String ITEM_TYPE_INTERNSHIP \u003d \" \" + PREFIX_ITEM + \" int\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_INTERNSHIP_NAME_GOOGLE \u003d \"Google\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_NAME_GOOGLE \u003d \" \" + PREFIX_NAME + \" \" + VALID_INTERNSHIP_NAME_GOOGLE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_INTERNSHIP_ROLE_FRONTEND \u003d \"Frontend Web Engineer\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_ROLE_FRONTEND \u003d \" \" + PREFIX_ROLE + \" \" + VALID_INTERNSHIP_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_FROM \u003d \"06-2020\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TO \u003d \"12-2020\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TIME_FROM \u003d \" \" + PREFIX_FROM + \" \" + VALID_FROM;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TIME_TO \u003d \" \" + PREFIX_TO + \" \" + VALID_TO;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_INTERNSHIP_DESCRIPTION \u003d \"I did work, I made money\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_INTERNSHIP_DESCRIPTION \u003d \" \" + PREFIX_DESCRIPTION + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + VALID_INTERNSHIP_DESCRIPTION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TAG_FRONTEND \u003d \"Frontend\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TAG_FRONTEND \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeBook expectedAddressBook \u003d new ResumeBook(actualModel.getResumeBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cItem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonalDetailList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getResumeBook());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonalDetailList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonalDetailList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Item item \u003d model.getFilteredPersonalDetailList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        final String[] splitName \u003d item.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.updateFilteredPersonalDetailList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(1, model.getFilteredPersonalDetailList().size());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "chrisjwelly": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteInternshipCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.PersonalDetail;*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.deleteItem(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.deleteItem(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResumeBook().getItemToDisplayList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteInternshipCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteInternshipCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteInternshipCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(model.getFilteredItemList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 5,
      "-": 82,
      "duongphammmm": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.PersonalDetailBuilder;*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d new PersonalDetailBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedItem).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.setPersonalDetail(model.getFilteredPersonalDetailList().get(0), editedItem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonalDetailList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item lastItem \u003d model.getFilteredPersonalDetailList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        PersonalDetailBuilder personInList \u003d new PersonalDetailBuilder(lastItem);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.setPersonalDetail(lastItem, editedItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d model.getFilteredPersonalDetailList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item itemInFilteredList \u003d model.getFilteredPersonalDetailList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d new PersonalDetailBuilder(itemInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.setPersonalDetail(model.getFilteredPersonalDetailList().get(0), editedItem);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item firstItem \u003d model.getFilteredPersonalDetailList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstItem).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item itemInList \u003d model.getResumeBook().getPersonalDetailList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new EditPersonDescriptorBuilder(itemInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonalDetailList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResumeBook().getPersonalDetailList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 138,
      "-": 29,
      "duongphammmm": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditItemDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class EditItemDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 39,
      "-": 15,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ModelManager;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 8,
      "-": 11,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;*/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.updateFilteredPersonalDetailList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonalDetailList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.updateFilteredPersonalDetailList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonalDetailList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 56,
      "-": 18,
      "duongphammmm": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ModelManager;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 8,
      "-": 9,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.UserPrefs;*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel \u003d new ModelManager(model.getResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 20,
      "-": 15,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected class ModelStub implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Path getResumeBookFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setResumeBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setResumeBook(ReadOnlyResumeBook resumeBook) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public ReadOnlyResumeBook getResumeBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setUser(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Person getUser() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasInternship(Internship internship) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setInternship(Internship target, Internship editedInternship) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void deleteInternship(Internship internship) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Internship getInternship(Index index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getInternshipSize() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setInternshipToDisplay() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void deleteProject(Project key) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Project getProject(Index index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getProjectSize() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setProjectToDisplay() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasSkill(Skill skill) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setSkill(Skill target, Skill editedSkill) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void deleteSkill(Skill key) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Skill getSkill(Index index) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getSkillSize() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setSkillToDisplay() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasResume(Resume resume) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setResume(Resume target, Resume editedResume) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Resume getResumeByIndex(int resumeIndex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasResumeId(int resumeIndex) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void deleteResume(Resume resume) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Resume getResume(Index index) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getResumeSize() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setResumeToDisplay() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasItem(Item item) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addItem(Item item) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void deleteItem(Item item) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setItem(Item target, Item edit) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void setItemsToDisplay(String type) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasInternshipId(int i) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasProjectId(int i) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasSkillId(int i) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 263,
      "-": 12,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddInternshipCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddInternshipCommandTest extends AddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullInternship_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddInternshipCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_internshipAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingInternshipAdded modelStub \u003d new ModelStubAcceptingInternshipAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validItem \u003d new InternshipBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddInternshipCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddInternshipCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.internships);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateInternship_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validItem \u003d new InternshipBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addCommand \u003d new AddInternshipCommand(validItem);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInternship(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddInternshipCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship itemA \u003d new InternshipBuilder().withName(\"NameA\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship itemB \u003d new InternshipBuilder().withName(\"NameB\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addACommand \u003d new AddInternshipCommand(itemA);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addBCommand \u003d new AddInternshipCommand(itemB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addACommandCopy \u003d new AddInternshipCommand(itemA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different internship -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(addBCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single Internship."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithInternship extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Internship item;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithInternship(Internship item) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasInternship(Internship item) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the Internship being added."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingInternshipAdded extends ModelStub {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            internships.add(internship);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddProjectCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddProjectCommandTest extends AddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProjectCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_projectAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingProjectAdded modelStub \u003d new ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validItem \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddProjectCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddProjectCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.projects);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validItem \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addCommand \u003d new AddProjectCommand(validItem);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddProjectCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project itemA \u003d new ProjectBuilder().withName(\"NameA\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project itemB \u003d new ProjectBuilder().withName(\"NameB\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addACommand \u003d new AddProjectCommand(itemA);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addBCommand \u003d new AddProjectCommand(itemB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addACommandCopy \u003d new AddProjectCommand(itemA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(addBCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single Project."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithProject extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Project item;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithProject(Project item) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasProject(Project item) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the Project being added."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingProjectAdded extends ModelStub {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            projects.add(project);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddResumeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddResumeCommandTest extends AddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullResume_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddResumeCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_resumeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingResumeAdded modelStub \u003d new ModelStubAcceptingResumeAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validItem \u003d new ResumeBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddResumeCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddResumeCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.resumes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateResume_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validItem \u003d new ResumeBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addCommand \u003d new AddResumeCommand(validItem);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithResume(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddResumeCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume java \u003d new ResumeBuilder().withName(\"Java\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume c \u003d new ResumeBuilder().withName(\"C\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addJavaCommand \u003d new AddResumeCommand(java);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addCCommand \u003d new AddResumeCommand(c);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addJavaCommandCopy \u003d new AddResumeCommand(java);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different resume -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(addCCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single resume."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithResume extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Resume item;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithResume(Resume item) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasResume(Resume item) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the resume being added."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingResumeAdded extends ModelStub {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cResume\u003e resumes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            resumes.add(resume);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddSkillCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.SkillBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddSkillCommandTest extends AddCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullSkill_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSkillCommand(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_skillAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingSkillAdded modelStub \u003d new ModelStubAcceptingSkillAdded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validItem \u003d new SkillBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddSkillCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddSkillCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.skills);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateSkill_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validItem \u003d new SkillBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addCommand \u003d new AddSkillCommand(validItem);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSkill(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddSkillCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill java \u003d new SkillBuilder().withName(\"NameA\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill c \u003d new SkillBuilder().withName(\"NameB\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addJavaCommand \u003d new AddSkillCommand(java);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addCCommand \u003d new AddSkillCommand(c);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addJavaCommandCopy \u003d new AddSkillCommand(java);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different skill -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(addCCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single skill."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithSkill extends ModelStub {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Skill item;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithSkill(Skill item) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasSkill(Skill item) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the skill being added."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingSkillAdded extends ModelStub {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            skills.add(skill);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 14,
      "-": 16,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "wardetu": 193,
      "-": 8,
      "duongphammmm": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "//import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 28,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 192,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ResumeBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteResumeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindInternshipCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ResumeBookParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final ResumeBookParser parser \u003d new ResumeBookParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*  @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: I thought the test would be identical to DeleteCommand but turns out not really.."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ViewResumeCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" i/ res\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(new ViewResumeCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                DeleteResumeCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" i/ res\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(new DeleteResumeCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: Create DescriptorBuilders for testing puposes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(new EditInternshipCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + \" i/res\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(new FindInternshipCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" i/res\") instanceof ListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" i/int\") instanceof ListCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" i/res 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 8,
      "wardetu": 2,
      "-": 77,
      "duongphammmm": 5,
      "chrisjwelly": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/add/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_INTERNSHIP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_PROJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_DESCRIPTION;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_INTERNSHIP_DESCRIPTION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_GOOGLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_ORBITAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_FRONTEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_JAVA;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME_FROM;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME_TO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_WEBSITE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_ORBITAL;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "// import static seedu.address.testutil.TypicalPersonalDetails.AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "// import static seedu.address.testutil.TypicalPersonalDetails.BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.GOOGLE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalProject.ORBITAL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.add.AddProjectCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.item.field.Address;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "// import seedu.address.testutil.PersonalDetailBuilder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_allAddProjectFieldsPresent_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(ORBITAL).withTags(VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME + PREFIXED_WEBSITE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + PREFIXED_DESCRIPTION + PREFIXED_TAG_JAVA, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_addAllInternshipFieldsPresent_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Internship expectedProject \u003d new InternshipBuilder(GOOGLE).withTags(VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new AddInternshipCommand(expectedProject));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Item expectedItem \u003d new PersonalDetailBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Item expectedItemMultipleTags \u003d new PersonalDetailBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedItemMultipleTags));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Item expectedItem \u003d new PersonalDetailBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new AddCommand(expectedItem));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.BENSON;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(new ResumeBook(), new ResumeBook(modelManager.getResumeBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userPrefs.setResumeBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userPrefs.setResumeBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setResumeBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.setResumeBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(path, modelManager.getResumeBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPersonalDetail(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(modelManager.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.addPersonalDetail(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(modelManager.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonalDetailList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook differentAddressBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.updateFilteredPersonalDetailList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.updateFilteredPersonalDetailList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        differentUserPrefs.setResumeBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "-": 107,
      "duongphammmm": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ResumeBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.testutil.PersonalDetailBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ResumeBookTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final ResumeBook resumeBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), resumeBook.getPersonalDetailList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e resumeBook.resetData(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData_withValidReadOnlyResumeBook_replacesData() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(newData, resumeBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cItem\u003e newItems \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBookStub newData \u003d new ResumeBookStub(newItems);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e resumeBook.resetData(newData));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_nullPersonalDetail_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e resumeBook.hasPersonalDetail(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_personalDetailNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(resumeBook.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_personalDetailInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addPersonalDetail(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(resumeBook.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_personalDetailWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addPersonalDetail(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(resumeBook.hasPersonalDetail(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void getPersonalDetailList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e resumeBook.getPersonalDetailList().remove(0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static class ResumeBookStub implements ReadOnlyResumeBook {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private Person user \u003d new Person(new Name(\"Default name\"), new Phone(\"000\"), new Email(\"000@gmail.com\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new Github(\"000\"), \"Default university\", \"Default major\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new Time(\"12-9999\"), new Time(\"12-9999\"), 5.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final ObservableList\u003cItem\u003e itemsToDisplay \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final UniqueItemList internships \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final UniqueItemList projects \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final UniqueItemList skills \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final UniqueItemList resumes \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBookStub(Collection\u003cItem\u003e itemsToDisplay) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.itemsToDisplay.setAll(itemsToDisplay);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // TODO: fix the stub methods"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasSkillId(int i) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Person getUser() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return user;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public ObservableList\u003cItem\u003e getItemToDisplayList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return itemsToDisplay;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public UniqueItemList getInternshipList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return internships;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public UniqueItemList getProjectList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return projects;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public UniqueItemList getSkillList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return skills;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public UniqueItemList getResumeList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return resumes;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // STUB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public UniqueItemList getPersonalDetailList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return resumes;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasResumeId(int resumeIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasInternshipId(int i) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasProjectId(int i) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Internship getInternship(Index index) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new Internship(new Name(\"Company 1\"), \"Software Engineer\", new Time(\"02-2019\"),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    new Time(\"05-2020\"), \"I did nothing\", new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Project getProject(Index index) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new Project(new Name(\"Project 1\"), new Time(\"01-2020\"), new Website(\"www.website.com\"),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    \"I did nothing\", new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Skill getSkill(Index index) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new Skill(new Name(\"Useless skill 1\"), Level.ADVANCED, new HashSet\u003c\u003e(), -1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Resume getResume(Index index) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new Resume(new Name(\"Resume 1\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getInternshipSize() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getProjectSize() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getSkillSize() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getResumeSize() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 15,
      "wardetu": 46,
      "duongphammmm": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setResumeBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "-": 17,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/AddressTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Address;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 2,
      "duongphammmm": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/EmailTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "duongphammmm": 3,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ItemTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.BOB;*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.PersonalDetailBuilder;*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ItemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item item \u003d new PersonalDetailBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e item.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(ALICE.isSame(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ALICE.isSame(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        //assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(ALICE.isSame(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item aliceCopy \u003d new PersonalDetailBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        //assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedAlice \u003d new PersonalDetailBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "duongphammmm": 32,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.PersonalDetailBuilder;*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new PersonalDetailBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new PersonalDetailBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new PersonalDetailBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new PersonalDetailBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(predicate.test(new PersonalDetailBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(predicate.test(new PersonalDetailBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(predicate.test(new PersonalDetailBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "duongphammmm": 11,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "-": 39,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/PhoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "duongphammmm": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/UniqueItemListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.testutil.PersonalDetailBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final UniqueItemList uniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(uniqueItemList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(uniqueItemList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(uniqueItemList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.setItem(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItem(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItem(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItem(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItem(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((UniqueItemList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItems(expectedUniqueItemList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((List\u003cItem\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cItem\u003e itemList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItems(itemList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cItem\u003e listWithDuplicateItems \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItems(listWithDuplicateItems));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            -\u003e uniqueItemList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 22,
      "duongphammmm": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedItemTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class JsonAdaptedItemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        //assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "-": 99,
      "duongphammmm": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyResumeBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ResumeBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ReadOnlyResumeBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.addPersonalDetail(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.removePersonalDetail(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.addPersonalDetail(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void saveAddressBook(ReadOnlyResumeBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new ResumeBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 88,
      "-": 13,
      "duongphammmm": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.testutil.TypicalPersonalDetails;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonSerializableResumeBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                JsonSerializableResumeBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ResumeBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ResumeBook typicalPersonsAddressBook \u003d TypicalPersonalDetails.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        //assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonSerializableResumeBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                JsonSerializableResumeBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonSerializableResumeBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                JsonSerializableResumeBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableResumeBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 17,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.UserPrefs;*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userPrefs.setResumeBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 101,
      "-": 21,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.UserPrefs;*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ResumeBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ReadOnlyResumeBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 48,
      "-": 13,
      "duongphammmm": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InternshipBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Internship objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class InternshipBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Duke\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_FROM \u003d \"03-2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_TO \u003d \"06-2020\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"Software engineering intern\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Did some work, made some money\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"java\", \"backend\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public InternshipBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        from \u003d new Time(DEFAULT_FROM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        to \u003d new Time(DEFAULT_TO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        role \u003d DEFAULT_ROLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder(Internship internshipToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        name \u003d internshipToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        from \u003d internshipToCopy.getFrom();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        to \u003d internshipToCopy.getTo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        role \u003d internshipToCopy.getRole();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        description \u003d internshipToCopy.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(internshipToCopy.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a InternshipBuilder with a certain name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return InternshipBuilder with new name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public InternshipBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain role."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param role String role"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new role"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withRole(String role) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain to."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param to String to"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new to"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withTo(String to) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.to \u003d new Time(to);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain from."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param from String from"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new from"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withFrom(String from) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.from \u003d new Time(from);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain description."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param description String description"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Internship} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Internship build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Internship(name, role, from, to, description, tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 54,
      "chrisjwelly": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_GITHUB \u003d \"alicepauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_UNIVERSITY \u003d \"National University of Singapore\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_MAJOR \u003d \"Bachelor of Computing\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_FROM \u003d \"08-2018\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_TO \u003d \"05-2022\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final double DEFAULT_CAP \u003d 5.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Github github;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private String university;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private String major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private double cap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        github \u003d new Github(DEFAULT_GITHUB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        university \u003d DEFAULT_UNIVERSITY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        major \u003d DEFAULT_MAJOR;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        from \u003d new Time(DEFAULT_FROM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        to \u003d new Time(DEFAULT_TO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        cap \u003d DEFAULT_CAP;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        github \u003d personToCopy.getGithub();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        university \u003d personToCopy.getUniversity();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        major \u003d personToCopy.getMajor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        from \u003d personToCopy.getFrom();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        to \u003d personToCopy.getTo();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        cap \u003d personToCopy.getCap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new Person(name, phone, email, github, university, major, from, to, cap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "duongphammmm": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "-": 30,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProjectBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Project objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Duke\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"03-2020\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_WEBSITE \u003d \"duke.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"For a little module called CS2103T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"java\", \"2103\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Website website;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ProjectBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        website \u003d new Website(DEFAULT_WEBSITE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder(Project projectToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        name \u003d projectToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        time \u003d projectToCopy.getTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        website \u003d projectToCopy.getWebsite();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        description \u003d projectToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(projectToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a ProjectBuilder with a certain name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return ProjectBuilder with new name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ProjectBuilder withName(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ProjectBuilder with a certain time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param time String time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ProjectBuilder with new time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withTime(String time) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ProjectBuilder with a certain website."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param website String website"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ProjectBuilder with new website"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withWebsite(String website) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.website \u003d new Website(website);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ProjectBuilder with a certain description."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param description String description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ProjectBuilder with new desc"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Project} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Project(name, time, website, description, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 52,
      "chrisjwelly": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ResumeBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ResumeBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBookBuilder(ResumeBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumeBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a new {@code Person} to the {@code ResumeBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setUser(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ResumeBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Resume objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ResumeBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Company A\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"backend\", \"naps\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a ResumeBuilder with a certain name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return ResumeBuilder with new name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBuilder withName(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Resume build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Resume(name, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SkillBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Skill objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class SkillBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"React\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"web\", \"frontend\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public SkillBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        level \u003d Level.BASIC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a SkillBuilder with a certain name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return SkillBuilder with new name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public SkillBuilder withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Skill build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Skill(name, level, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Index.fromOneBased(model.getFilteredItemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Index.fromOneBased(model.getFilteredItemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static Item getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getFilteredItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "duongphammmm": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalInternship.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FROM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_NAME_GOOGLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A utility class containing a list of {@code Internship} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TypicalInternship {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Manually added - internship\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Internship GOOGLE \u003d new InternshipBuilder().withName(VALID_INTERNSHIP_NAME_GOOGLE)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withRole(VALID_INTERNSHIP_ROLE_FRONTEND).withFrom(VALID_FROM).withTo(VALID_TO)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withDescription(VALID_INTERNSHIP_DESCRIPTION).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersonalDetails.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.PersonalDetail;*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * A utility class containing a list of {@code PersonalDetail} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class TypicalPersonalDetails {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*public static final PersonalDetail ALICE \u003d new PersonalDetailBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail BENSON \u003d new PersonalDetailBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail CARL \u003d new PersonalDetailBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail DANIEL \u003d new PersonalDetailBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail ELLE \u003d new PersonalDetailBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail FIONA \u003d new PersonalDetailBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail GEORGE \u003d new PersonalDetailBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail HOON \u003d new PersonalDetailBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail IDA \u003d new PersonalDetailBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail AMY \u003d new PersonalDetailBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail BOB \u003d new PersonalDetailBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private TypicalPersonalDetails() {} // prevents instantiation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical personal details."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static ResumeBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook ab \u003d new ResumeBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (PersonalDetail pd : getTypicalPersonalDetails()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            ab.addItem(pd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static List\u003cPersonalDetail\u003e getTypicalPersonalDetails() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "duongphammmm": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_ORBITAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A utility class containing a list of {@code Project} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TypicalProject {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Manually added - project\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Project ORBITAL \u003d new ProjectBuilder().withName(VALID_PROJECT_NAME_ORBITAL)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withTime(VALID_TIME).withWebsite(VALID_WEBSITE).withDescription(VALID_DESCRIPTION).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.MainApp;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 96,
      "-": 16,
      "duongphammmm": 2
    }
  }
]
