[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name:\u0027pdfbox\u0027, version: \u00272.0.18\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u0027site-name\u0027: \u0027ResuMe\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F10-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "-": 153,
      "duongphammmm": 2
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "- address_book_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      }
    ],
    "authorContributionMap": {
      "wardetu": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getResumeBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        ui \u003d new UiManager(logic); // Ui interacts with logic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Optional\u003cReadOnlyResumeBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ReadOnlyResumeBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            initialData \u003d new ResumeBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            initialData \u003d new ResumeBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "-": 175,
      "duongphammmm": 6,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"The index provided is invalid!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_ITEMS_LISTED \u003d \"%1$d %2$s listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_INVALID_REDIT_ITEM_INDEX \u003d \"Invalid index provided for %s item: %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String HELP_COMMAND_SUMMARY \u003d getHelpCommandSummary();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String HELP_START \u003d getHelpStart();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String getHelpCommandSummary() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        StringBuilder summary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        summary.append(\"Command Summary\\n\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"GENERAL COMMANDS:\\n\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Help: help\\n\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"List items of a specific type: list i/ TYPE\\n\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"View an item: view INDEX i/TYPE\\n\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Delete an item: delete INDEX i/ TYPE\\n\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Update user profile: me dp/ FILEPATH n/ NAME [ATTRIBUTE/ VALUE]…\\n\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Undo an action: undo\\n\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Redo an action: redo\\n\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Clear all data: clear\\n\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Exit: exit\\n\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"RESUME COMMANDS:\\n\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Edit a resume: redit RESUME_INDEX TYPE/ [ITEM_ID…] [MORE_TYPE/ [ITEM_ID…]]\\n\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Preview resume: rpreview RESUME_INDEX\\n\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Generate a resume: rgen RESUME_INDEX [n/FILENAME]\\n\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"ITEM-SPECIFIC COMMANDS:\\n\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Add an internship: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"add i/ int n/ COMPANY NAME r/ ROLE f/ FROM t/ TO d/ DESCRIPTION [#/ TAG]…\\n\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Add a project: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"add i/ proj n/ PROJECT NAME t/ TIME w/ WEBSITE d/ DESCRIPTION [#/ TAG]…\\n\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Add a skill: add i/ ski n/ SKILL NAME l/ LEVEL [#/ TAG]…\\n\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Add a resume: add i/ res n/ NAME [#/ TAG]…\\n\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Edit an internship: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"edit i/ int [n/ COMPANY NAME] [r/ ROLE] [f/ FROM] [t/ TO] [d/ DESCRIPTION] [#/ TAG]\\n\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Edit a project: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"edit i/ proj [n/ PROJECT NAME] [t/ TIME] [w/ WEBSITE] [d/ DESCRIPTION] [#/ TAG]…\\n\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Edit a skill: edit i/ ski [n/ SKILL NAME] [l/ LEVEL] [#/ TAG]…\\n\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Edit a resume: edit i/ res [n/ NAME] [#/ TAG]\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return summary.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String getHelpStart() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        StringBuilder summary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        summary.append(\"Getting Started\\n\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Welcome to ResuMe!\\nYou have summoned me - your trusty Assistant, probably because you are \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"lost and do not know where to start.\\nBut don\u0027t worry, because that is the whole point of \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"my existence!\\n\\n\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"I. User Profile\\n\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"First, let\u0027s kick-start your quest to creating the perfect resume by ensuring that \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"the resume is truly YOURS!\\nKey in this command while replacing the details with your own \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"personal information:\\n\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e me n/ YOUR NAME p/ YOUR PHONE e/ YOUR EMAIL g/ YOUR GITHUB\\n\\n\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"See the changes yet? That was easy, isn\u0027t it? \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"And I promise you, that is as difficult as it can get when using ResuMe!\\n\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Similarly, you can edit your university, major, start and end time, as well as your current \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"CAP with u/, m/, f/, t/ and c/ respectively. Take some time to play around with this \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"feature, before we move on to the next step.\\n\\n\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"(Hot tip: try dp/ FILEPATH to update the profile picture to a picture of your choice!)\\n\\n\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"II. Your Experiences\\n\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Now, it\u0027s time to add in your first experience! An experience could be an internship that \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"you had, a project that you worked on, or any relevant skill that you wish to include in \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"your resume.\\n\\n\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Try typing in this example command to add an internship experience at Google. Of course, \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"you can use that template for all of your internships, just need to change the fields with \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"your own internship details.\\n\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e add i/int n/Gooogle r/Frontend Web Engineer f/06-2020 t/12-2020 \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"d/I did work, made money. #/frontend #/tech\\n\\n\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Next, try out these two example commands to add a project and a skill:\\n\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e add i/proj n/Duke t/06-2020 w/abc.github.io \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"d/For a little module named CS2103T. #/java #/tech\\n\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e add i/ski n/Git and Github l/INTERMEDIATE #/VCS #/tech\\n\\n\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Nobody is perfect, and it is okay to make mistakes sometimes. Notice the extra \\\"o\\\" in \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"the Google internship you just added? You can easily fix that, either by editing or \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"deleting the item. But first, let\u0027s switch to view the list of all internships!\\n\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e list i/int\\n\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e edit 1 i/int n/Google   or  delete 1 i/int\\n\\n\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Now, if you chose to delete Google in the previous step, and then regret instantly because \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"working at Google is your childhood dream, simply use the undo command:\\n\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e undo\\n\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"And voila! Gooogle is back! (You still need to edit that name tho)\\n\\n\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Some additional commands that you might want to try out are view, find and redo. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"Simply key in the command word and follow the example in the prompt message given! \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"You are smart and will probably be able to master these in no time!\\n\\n\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"III. YOUR RESUME\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Finally, it\u0027s time to make your resume! Add a new Resume with details of your choice, \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"following this example command:\\n\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e add i/res n/My Software Engineering Resume #/frontend #/SE\\n\\n\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Next, you could add any number of internships, projects or skills into this resume. Let\u0027s \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"assume that you want to add the first internship, project and skill in each list. After \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"executing this command, your resume will contain 3 items!\\n\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e redit 1 int/ 1 proj/ 1 ski/ 1\\n\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"(Another tip: previous commands like edit, delete, list, find, undo/redo will work with \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"resume as well!)\\n\\n\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Once your resume is ready, let\u0027s go ahead and export it! But first, let\u0027s preview it to \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"ensure that there is no error:\\n\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e rpreview 1\\n\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"If there are errors, well, you know the drills! Just go back to previous steps and edit.\\n\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"Otherwise, we can now generate the .pdf file (the moment we\u0027ve all been waiting for):\\n\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"   --\u003e rgen 1 n/FILENAME\\n\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"(Final tip: the output file name is totally optional. By default, the output \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"file will have the same name as your resume).\\n\\n\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"And there you have it - your first Resume made with ResuMe! What\u0027s left to do, is to send \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + \"that masterpiece to Google, and (only if you cannot resist) start crafting yet another one!\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return summary.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "nhamhung": 2,
      "-": 10,
      "duongphammmm": 116,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @see seedu.address.model.Model#getResumeBook()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ReadOnlyResumeBook getAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteEntryList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Path getResumeBookFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    ObservablePerson getObservableUser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Person getUser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 4,
      "nhamhung": 4,
      "-": 44,
      "duongphammmm": 6,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.parser.ResumeBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final ResumeBookParser resumeBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumeBookParser \u003d new ResumeBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Command command \u003d resumeBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            storage.saveAddressBook(model.getResumeBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ReadOnlyResumeBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getResumeBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getFilteredItemList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteEntryList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return model.getFilteredNoteList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Path getResumeBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getResumeBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ObservablePerson getObservableUser() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return model.getObservableUser();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Person getUser() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return model.getUser();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 16,
      "nhamhung": 6,
      "-": 65,
      "duongphammmm": 9,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ClearCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.VersionedResumeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Resume book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String type \u003d model.getDisplayType();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeBook(new VersionedResumeBook(new ResumeBook()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setItemsToDisplay(type);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ClearCommandResult(\" \", MESSAGE_SUCCESS, model.getDisplayType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "-": 19,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.DoneCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Marks a note as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_DONE_SUCCESS \u003d \"Marked this note as done!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_DONE_FAILURE \u003d \"This note is already marked as done!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" INDEX \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"Example: done 1 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getNoteListSize()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note toSetDone \u003d model.getNote(targetIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (toSetDone.isDone()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DONE_FAILURE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note done \u003d toSetDone.toCopy();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        done.markAsDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setNote(toSetDone, done);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new DoneCommandResult(done.toString(), MESSAGE_DONE_SUCCESS, model.getDisplayType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                || (other instanceof DoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 10,
      "nhamhung": 48,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ExitCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Resume Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ExitCommandResult(\"Exiting\", MESSAGE_EXIT_ACKNOWLEDGEMENT, model.getDisplayType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "-": 16,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.RedoCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Reverts the {@code model}\u0027s resume book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo successfully!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Cannot redo any further.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!model.canRedoResumeBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.redoResumeBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new RedoCommandResult(MESSAGE_SUCCESS, model.getDisplayType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 30,
      "chrisjwelly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResumeEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERNSHIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ResumeEditCommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Edits the content of a Resume."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ResumeEditCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits what an existing resume contains in the ResuMe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"application with the specified index.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"TYPE/ [ITEM_INDEX] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"[MORE_TYPE/ [ITEM_ID...]]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_INTERNSHIP + \" 1 3 4 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_SKILL + \" 1 2 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_PROJECT + \" 1 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Optional\u003cList\u003cInteger\u003e\u003e internshipIndices;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Optional\u003cList\u003cInteger\u003e\u003e projectIndices;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Optional\u003cList\u003cInteger\u003e\u003e skillIndices;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ResumeEditCommand(Index index, Optional\u003cList\u003cInteger\u003e\u003e internshipIndices,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                             Optional\u003cList\u003cInteger\u003e\u003e projectIndices, Optional\u003cList\u003cInteger\u003e\u003e skillIndices) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.internshipIndices \u003d internshipIndices;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.projectIndices \u003d projectIndices;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.skillIndices \u003d skillIndices;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        checkIndicesValidity(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toEdit \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e internshipIds \u003d toEdit.getInternshipIds();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e projectIds \u003d toEdit.getProjectIds();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e skillIds \u003d toEdit.getSkillIds();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // If any of the indices are present (user keys in the prefix), then use what the user uses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Else, use the one currently being used by the resume"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (internshipIndices.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            internshipIds \u003d internshipIndices"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .get()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .distinct()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    .map(x -\u003e model.getInternshipByIndex(Index.fromOneBased(x)).getId())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (projectIndices.isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            projectIds \u003d projectIndices"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .get()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .distinct()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    .map(x -\u003e model.getProjectByIndex(Index.fromOneBased(x)).getId())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (skillIndices.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            skillIds \u003d skillIndices"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .get()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .distinct()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    .map(x -\u003e model.getSkillByIndex(Index.fromOneBased(x)).getId())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume editedResume \u003d new Resume(toEdit.getName(), toEdit.getId(), toEdit.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.editResume(editedResume, internshipIds, projectIds, skillIds);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.setResume(toEdit, editedResume);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ResumeEditCommandResult(editedResume.toString(), \"Resume is updated\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Checks for whether the specified indices are valid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private void checkIndicesValidity(Model model) throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Internships"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (internshipIndices.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cInteger\u003e unboxedIndices \u003d internshipIndices.get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cInteger\u003e invalidIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            boolean isInvalidIndexPresent \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            for (Integer i: unboxedIndices) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                if (Index.fromOneBased(i).getZeroBased() \u003e\u003d model.getInternshipSize()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    isInvalidIndexPresent \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    invalidIndices.add(i);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String invalidIndicesString \u003d invalidIndices"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .distinct()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .map(Object::toString)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (isInvalidIndexPresent) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"internship\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        invalidIndicesString.trim()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Projects"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (projectIndices.isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cInteger\u003e unboxedIndices \u003d projectIndices.get();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cInteger\u003e invalidIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            boolean isInvalidIndexPresent \u003d false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            for (Integer i: unboxedIndices) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                if (Index.fromOneBased(i).getZeroBased() \u003e\u003d model.getProjectSize()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    isInvalidIndexPresent \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    invalidIndices.add(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String invalidIndicesString \u003d invalidIndices"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .distinct()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .map(Object::toString)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (isInvalidIndexPresent) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"project\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        invalidIndicesString.trim()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Skills"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (skillIndices.isPresent()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cInteger\u003e unboxedIndices \u003d skillIndices.get();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cInteger\u003e invalidIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            boolean isInvalidIndexPresent \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            for (Integer i: unboxedIndices) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                if (Index.fromOneBased(i).getZeroBased() \u003e\u003d model.getSkillSize()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    isInvalidIndexPresent \u003d true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    invalidIndices.add(i);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            String invalidIndicesString \u003d invalidIndices"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .distinct()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .map(Object::toString)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (isInvalidIndexPresent) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new CommandException(String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"skill\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        invalidIndicesString.trim()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof ResumeEditCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 index.equals(((ResumeEditCommand) other).index)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 internshipIndices.equals(((ResumeEditCommand) other).internshipIndices)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 projectIndices.equals(((ResumeEditCommand) other).projectIndices)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 skillIndices.equals(((ResumeEditCommand) other).skillIndices));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "duongphammmm": 5,
      "chrisjwelly": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResumePreviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ResumePreviewCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Previews a resume."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ResumePreviewCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rpreview\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Previewing resume at index %1$s successfully!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Previews the details of the resume identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"by the index number used in the displayed resume list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumePreviewCommand(Index index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toPreview \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String data \u003d getDataFromResume(toPreview, model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new ResumePreviewCommandResult(data,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, index.getOneBased()), model.getDisplayType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String getDataFromResume(Resume resume, Model model) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cString\u003e internshipList \u003d resume.getInternshipIds()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .map(x -\u003e model.hasInternshipId(x) ? model.getInternshipById(x) : null)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .map(Internship::toPreview)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cString\u003e projectList \u003d resume.getProjectIds()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .map(x -\u003e model.hasProjectId(x) ? model.getProjectById(x) : null)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .map(Project::toPreview)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cString\u003e skillsList \u003d resume.getSkillIds()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .map(x -\u003e model.hasSkillId(x) ? model.getSkillById(x) : null)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .map(Skill::toPreview)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        StringBuilder data \u003d new StringBuilder(resume.getName() + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"PERSONAL DETAILS\\n\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(model.getUser().toPreview())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"INTERNSHIPS\\n\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        for (String internship: internshipList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            data.append(internship).append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"PROJECTS\\n\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        for (String project: projectList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            data.append(project).append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"SKILLS\\n\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        for (String skill: skillsList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            data.append(skill).append(\"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return data.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof ResumePreviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 index.equals(((ResumePreviewCommand) other).index));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 106,
      "duongphammmm": 1,
      "chrisjwelly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagPullCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.TagPullCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Edits the content of a Resume."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TagPullCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tagpull\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Pulls all the items with the desired tag into the \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"resume in the application with the specified index.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Existing values will be added on top the new items to be added.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"[#/ TAG]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_TAG + \" tech\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public TagPullCommand(Index index, Set\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume toEdit \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // The item IDs of specified resume"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e currInternshipIds \u003d toEdit.getInternshipIds();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e currProjectIds \u003d toEdit.getProjectIds();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e currSkillIds \u003d toEdit.getSkillIds();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        int internshipCountBefore \u003d currInternshipIds.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        int projectCountBefore \u003d currProjectIds.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        int skillCountBefore \u003d currSkillIds.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // The item IDs with the desired tags"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e pulledInternshipIds \u003d tagList"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(model::getInternshipsByTag)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(Internship::getId)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e pulledProjectIds \u003d tagList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(model::getProjectsByTag)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(Project::getId)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e pulledSkillIds \u003d tagList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(model::getSkillsByTag)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .flatMap(Collection::stream)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(Skill::getId)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Concatenate both sets of items as we are adding on top"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e newInternshipIds \u003d Stream"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .concat(currInternshipIds.stream(), pulledInternshipIds.stream())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e newProjectIds \u003d Stream"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .concat(currProjectIds.stream(), pulledProjectIds.stream())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e newSkillIds \u003d Stream"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .concat(currSkillIds.stream(), pulledSkillIds.stream())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        int internshipCountAfter \u003d newInternshipIds.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        int projectCountAfter \u003d newProjectIds.size();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        int skillCountAfter \u003d newSkillIds.size();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume editedResume \u003d new Resume(toEdit.getName(), toEdit.getId(), toEdit.getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.editResume(editedResume, newInternshipIds, newProjectIds, newSkillIds);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.setResume(toEdit, editedResume);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String feedbackToUser \u003d new StringBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .append(\"Items pulled:\\n\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .append(internshipCountAfter - internshipCountBefore).append(\" internship(s), \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .append(projectCountAfter - projectCountBefore).append(\" project(s), \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .append(skillCountAfter - skillCountBefore).append(\" skill(s).\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new TagPullCommandResult(editedResume.toString(), feedbackToUser,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof TagPullCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 index.equals(((TagPullCommand) other).index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 tagList.equals(((TagPullCommand) other).tagList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.UndoCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Reverts the {@code model}\u0027s resume book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo successfully!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Cannot undo any more.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!model.canUndoResumeBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.undoResumeBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new UndoCommandResult(MESSAGE_SUCCESS, model.getDisplayType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 30,
      "chrisjwelly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Adds an Item to the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an Item to the address book.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"res \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Resume 1 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"frontend \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New %1$s added\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the resume book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 15,
      "wardetu": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.AddCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds an Internship Item to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddInternshipCommand extends AddCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an internship to the address book.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"COMPANY NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \"FROM \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \"TO \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESC \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"int \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Google \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \"Frontend Web Engineer \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \"06-2020 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \"12-2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"I did work, made money. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"frontend \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_FROM_TO_MISORDER \u003d \"\\\u0027from\\\u0027 cannot be later than \\\u0027to\\\u0027 field. \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Internship toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code internship}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddInternshipCommand(Internship internship) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d internship;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasInternship(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addInternship(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new AddCommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddInternshipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddInternshipCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 71,
      "wardetu": 2,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.AddCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Adds a Note into the note list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class AddNoteCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to your note list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_NAME + \"TITLE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_TIME + \"TIME \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_ITEM + \"note \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_NAME + \"Finish Resume 3 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_TIME + \"04-2020 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New note added!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ERROR \u003d \"This note already exists!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Every note should have a name and a time so \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"it can serve you better!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final Note toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param note is a Note."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public AddNoteCommand(Note note) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.toAdd \u003d note;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Add a Note to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return Command Result."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (model.hasNote(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.addNote(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new AddCommandResult(toAdd.toString(), MESSAGE_SUCCESS, model.getDisplayType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                || (other instanceof AddNoteCommand)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddNoteCommand) other).toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "nhamhung": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.AddCommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds a Project Item to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddProjectCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an project to the address book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"PROJECT NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_WEBSITE + \"WEBSITE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESC \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"proj \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Duke \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TIME + \"06-2020 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_WEBSITE + \"abc.github.io \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \"For a little module named CS2103T. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"java \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Project toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code project}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddProjectCommand(Project project) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d project;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasProject(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addProject(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new AddCommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProjectCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 67,
      "wardetu": 1,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.AddCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds a Resume Item to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddResumeCommand extends AddCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a resume to the address book.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"res \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Resume 1 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"frontend \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Resume toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code resume}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddResumeCommand(Resume resume) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d resume;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasResume(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addResume(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new AddCommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddResumeCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 58,
      "wardetu": 1,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/add/AddSkillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.AddCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Adds a Skill Item to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddSkillCommand extends AddCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a skill to the address book.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"SKILL NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_LEVEL + \"LEVEL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"ski \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \"Git and Github \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_LEVEL + \"INTERMEDIATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"VCS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"tech\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final Skill toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates an AddCommand to add the specified {@code skill}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public AddSkillCommand(Skill skill) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        toAdd \u003d skill;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (model.hasSkill(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.addSkill(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new AddCommandResult(toAdd.toString(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_SUCCESS, toAdd.getType().getFullType()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof AddSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddSkillCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 61,
      "wardetu": 1,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes an item identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: Double check if this command format is all right"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed item list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\" + PREFIX_ITEM + \" TYPE\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 i/ res\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted %1$s item\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 10,
      "-": 17,
      "duongphammmm": 2,
      "chrisjwelly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.DeleteCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes an Internship item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteInternshipCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteInternshipCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getInternshipSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship toDelete \u003d model.getInternshipByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteInternship(toDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new DeleteCommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteInternshipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteInternshipCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 41,
      "wardetu": 1,
      "duongphammmm": 1,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.DeleteCommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Deletes a Note from the note list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class DeleteNoteCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public DeleteNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getNoteListSize()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Note toDelete \u003d model.getNote(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.deleteNote(toDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new DeleteCommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, \"Note\"), model.getDisplayType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                || (other instanceof DeleteNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.DeleteCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes a Project item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteProjectCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteProjectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getProjectSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project toDelete \u003d model.getProjectByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteProject(toDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new DeleteCommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteProjectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 42,
      "wardetu": 1,
      "duongphammmm": 1,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.DeleteCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes a Resume item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteResumeCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteResumeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toDelete \u003d model.getResumeByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteResume(toDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new DeleteCommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteResumeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 42,
      "wardetu": 1,
      "nhamhung": 1,
      "duongphammmm": 1,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/delete/DeleteSkillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.DeleteCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Deletes a Skill item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteSkillCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public DeleteSkillCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getSkillSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill toDelete \u003d model.getSkillByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.deleteSkill(toDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new DeleteCommandResult(toDelete.toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_DELETE_ITEM_SUCCESS, toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof DeleteSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteSkillCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 42,
      "wardetu": 1,
      "duongphammmm": 1,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Edits the details of an existing item in the resume book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // TODO: Refactor this into a nice message centre"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Item with the same name already exists in the resume book.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item identified \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"by the index number used in the displayed item list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \" TYPE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[ PREFIX/ OTHER PREFIX DATA]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \" int \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \" Google \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \" 03-2019 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \" 06-2019 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \" Intern \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \" Do things and get paid. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \" frontend \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index of the item in the filtered item list to edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditCommand(Index index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 25,
      "wardetu": 4,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.EditCommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Edits an Internship Item in the resume book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditInternshipCommand extends EditCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_FROM_TO_MISORDER \u003d \"\\\u0027from\\\u0027 cannot be later than \\\u0027to\\\u0027 field. \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String FIELDS \u003d \"Examples: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"int \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"COMPANY NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_ROLE + \"ROLE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_FROM + \"FROM] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TO + \"TO] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESC] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \" int \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \" Shopee \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_FROM + \" 05-2020 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TO + \" 08-2020 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ROLE + \" Backend Engineer\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \" I did some work \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \" backend \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + FIELDS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + EXAMPLE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_INTERNSHIP_SUCCESS \u003d \"Edited Internship: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditInternshipDescriptor editInternshipDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index                of the internship in the filtered internship list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editInternshipDescriptor details to edit the internship with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditInternshipCommand(Index index, EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editInternshipDescriptor \u003d editInternshipDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getInternshipSize()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship toEdit \u003d model.getInternshipByIndex(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship editedInternship \u003d createEditedInternship(toEdit, editInternshipDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (editedInternship.getFrom().compareTo(editedInternship.getTo()) \u003e 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(MESSAGE_FROM_TO_MISORDER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            model.setInternship(toEdit, editedInternship);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            model.commitResumeBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new EditCommandResult(editedInternship.toString(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternship),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Internship item from the internship to be edited and the descriptor."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit Internship item to be edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editInternshipDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Internship item."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Internship createEditedInternship("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Internship toEdit, EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editInternshipDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Time updatedFrom \u003d editInternshipDescriptor.getFrom().orElse(toEdit.getFrom());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Time updatedTo \u003d editInternshipDescriptor.getTo().orElse(toEdit.getTo());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String updatedDesc \u003d editInternshipDescriptor.getDescription().orElse(toEdit.getDescription());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String updatedRole \u003d editInternshipDescriptor.getRole().orElse(toEdit.getRole());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editInternshipDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Internship(updatedName, updatedRole, updatedFrom, updatedTo, updatedDesc, updatedTags, id);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 97,
      "wardetu": 7,
      "nhamhung": 1,
      "duongphammmm": 1,
      "chrisjwelly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditInternshipDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the internship with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the internship."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditInternshipDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditInternshipDescriptor() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditInternshipDescriptor(EditInternshipDescriptor toCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setRole(toCopy.role);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setFrom(toCopy.from);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setTo(toCopy.to);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setFrom(Time from) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cTime\u003e getFrom() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(from);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTo(Time to) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cTime\u003e getTo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(to);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setRole(String role) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cString\u003e getRole() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(role);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, role, from, to, description, tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!(other instanceof EditInternshipDescriptor)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        EditInternshipDescriptor e \u003d (EditInternshipDescriptor) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getRole().equals(e.getRole())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getFrom().equals(e.getFrom())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getTo().equals(e.getTo())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 34,
      "wardetu": 1,
      "chrisjwelly": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditItemDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Stores the details to edit the item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * corresponding field value of the item."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditItemDescriptor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditItemDescriptor() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!(other instanceof EditItemDescriptor)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        EditItemDescriptor e \u003d (EditItemDescriptor) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return getName().equals(e.getName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.EditCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Edits a specified Note."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditNoteCommand extends EditCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FIELDS \u003d \"Example: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_ITEM + \" note \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NOTE NAME] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_ITEM + \" note \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_NAME + \" Complete Resume 3 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_TIME + \" 04-2020 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + FIELDS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + EXAMPLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String MESSAGE_EDIT_NOTE_SUCCESS \u003d \"Edited This Note!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private EditNoteDescriptor editNoteDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditNoteCommand(Index index, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.editNoteDescriptor \u003d editNoteDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getNoteListSize()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Note toEdit \u003d model.getNote(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Note editedNote \u003d createEditedNoteEntry(toEdit, editNoteDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            model.setNote(toEdit, editedNote);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            model.updateFilteredNoteList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            model.commitResumeBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new EditCommandResult(editedNote.toString(), MESSAGE_EDIT_NOTE_SUCCESS, model.getDisplayType());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Create a new Note after it has been edited."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit the note that will be edited."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editNoteDescriptor describes how the note will be edited."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return the edited note"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note createEditedNoteEntry(Note toEdit, EditNoteDescriptor editNoteDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Name updatedName \u003d editNoteDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Time updatedTime \u003d editNoteDescriptor.getTime().orElse(toEdit.getTime());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Set\u003cTag\u003e updateTags \u003d editNoteDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new Note(updatedName, updatedTime, toEdit.isDone(), updateTags, id);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 4,
      "nhamhung": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditNoteDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Stores the details to edit the note with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * corresponding field value of the note."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditNoteDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private boolean isDoneUpdated \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditNoteDescriptor() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditNoteDescriptor(EditNoteDescriptor toCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setTime(toCopy.time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setTime(Time time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, time);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!(other instanceof EditNoteDescriptor)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        EditNoteDescriptor e \u003d (EditNoteDescriptor) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.EditCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Edits a Project Item in the resume book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditProjectCommand extends EditCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String FIELDS \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \" INDEX \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"proj \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"PROJECT NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_WEBSITE + \"WEBSITE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESC] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_ITEM + \" proj \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_NAME + \" LaundryBot \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_WEBSITE + \" laundryboo.io \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TIME + \" 02-2022 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_DESCRIPTION + \" It washes things. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \"clean\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + FIELDS + EXAMPLE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_PROJECT_SUCCESS \u003d \"Edited Project: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditProjectDescriptor editProjectDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index                of the project in the filtered project list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editProjectDescriptor details to edit the project with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditProjectCommand(Index index, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editProjectDescriptor \u003d editProjectDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getProjectSize()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project toEdit \u003d model.getProjectByIndex(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Project editedProject \u003d createEditedProject(toEdit, editProjectDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            model.setProject(toEdit, editedProject);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            model.setProjectToDisplay();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            model.commitResumeBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new EditCommandResult(editedProject.toString(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_EDIT_PROJECT_SUCCESS, editedProject),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Project item from the project to be edited and the descriptor."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit Project item to be edited"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editProjectDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Project item."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Project createEditedProject("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Project toEdit, EditProjectDescriptor editProjectDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editProjectDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Time updatedTime \u003d editProjectDescriptor.getTime().orElse(toEdit.getTime());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Website updatedWebsite \u003d editProjectDescriptor.getWebsite().orElse(toEdit.getWebsite());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String updatedDesc \u003d editProjectDescriptor.getDescription().orElse(toEdit.getDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editProjectDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Project(updatedName, updatedTime, updatedWebsite, updatedDesc, updatedTags, id);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 79,
      "wardetu": 9,
      "nhamhung": 1,
      "duongphammmm": 1,
      "chrisjwelly": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditProjectDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the project with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the project."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditProjectDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Website website;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditProjectDescriptor() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditProjectDescriptor(EditProjectDescriptor toCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTime(toCopy.time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setWebsite(toCopy.website);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTime(Time to) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.time \u003d to;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cTime\u003e getTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setWebsite(Website website) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cWebsite\u003e getWebsite() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(website);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, website, time, description, tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (!(other instanceof EditProjectDescriptor)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        EditProjectDescriptor e \u003d (EditProjectDescriptor) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getWebsite().equals(e.getWebsite())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 106,
      "wardetu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.EditCommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Edits a Resume Item in the resume book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditResumeCommand extends EditCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String FIELDS \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \" INDEX \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"res \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"RESUME NAME] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \" res \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_NAME + \" Resume 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_TAG + \" frontend \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + FIELDS + EXAMPLE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_RESUME_SUCCESS \u003d \"Edited Resume: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditResumeDescriptor editResumeDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index                of the resume in the filtered resume list to edit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param editResumeDescriptor details to edit the resume with"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditResumeCommand(Index index, EditResumeDescriptor editResumeDescriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editResumeDescriptor \u003d editResumeDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toEdit \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume editedResume \u003d createEditedResume(toEdit, editResumeDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            model.setResume(toEdit, editedResume);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            model.setResumeToDisplay();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            model.commitResumeBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new EditCommandResult(editedResume.toString(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_EDIT_RESUME_SUCCESS, editedResume),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Resume item from the resume to be edited and the descriptor."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit resume item to be edited"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editResumeDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Resume item."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Resume createEditedResume(Resume toEdit, EditResumeDescriptor editResumeDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editResumeDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editResumeDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume editedResume \u003d new Resume(updatedName, id, updatedTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        editedResume.setInternshipIds(toEdit.getInternshipIds());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        editedResume.setProjectIds(toEdit.getProjectIds());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        editedResume.setSkillIds(toEdit.getSkillIds());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return editedResume;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 74,
      "wardetu": 7,
      "nhamhung": 1,
      "duongphammmm": 1,
      "chrisjwelly": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditResumeDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the resume with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the resume."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditResumeDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditResumeDescriptor() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditResumeDescriptor(EditResumeDescriptor toCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!(other instanceof EditResumeDescriptor)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        EditResumeDescriptor e \u003d (EditResumeDescriptor) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "chrisjwelly": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditSkillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.EditCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Edits a Skill Item in the resume book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * TODO: CONNECT LEVEL TO SKILL"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditSkillCommand extends EditCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String FIELDS \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \" INDEX \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"res \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"SKILL NAME] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_LEVEL + \"LEVEL] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]....\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private static final String EXAMPLE \u003d \"Example: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_ITEM + \" ski \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + PREFIX_NAME + \" Software Engineering\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\" + FIELDS + EXAMPLE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String MESSAGE_EDIT_SKILL_SUCCESS \u003d \"Edited Skill: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private EditSkillDescriptor editSkillDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param index index of the skill in the filtered skill list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editSkillDescriptor details to edit the skill with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditSkillCommand(Index index, EditSkillDescriptor editSkillDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.editSkillDescriptor \u003d editSkillDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d model.getSkillSize()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill toEdit \u003d model.getSkillByIndex(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill editedSkill \u003d createEditedSkill(toEdit, editSkillDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            model.setSkill(toEdit, editedSkill);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            model.setSkillToDisplay();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            model.commitResumeBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (DuplicateItemException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new EditCommandResult(editedSkill.toString(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_EDIT_SKILL_SUCCESS, editedSkill),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates the edited Skill item from the skill to be edited and the descriptor."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param toEdit Skill item to be edited"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param editSkillDescriptor Descriptor parsed from input of user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return Edited Skill item."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static Skill createEditedSkill(Skill toEdit, EditSkillDescriptor editSkillDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Name updatedName \u003d editSkillDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Level level \u003d editSkillDescriptor.getLevel().orElse(toEdit.getLevel());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editSkillDescriptor.getTags().orElse(toEdit.getTags());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        int id \u003d toEdit.getId();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Skill(updatedName, level, updatedTags, id);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 69,
      "wardetu": 8,
      "nhamhung": 1,
      "duongphammmm": 1,
      "chrisjwelly": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditSkillDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Stores the details to edit the skill with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * corresponding field value of the skill."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class EditSkillDescriptor extends EditItemDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditSkillDescriptor() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public EditSkillDescriptor(EditSkillDescriptor toCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setTags(toCopy.tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setLevel(toCopy.level);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, level, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setLevel(Level level) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cLevel\u003e getLevel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return Optional.ofNullable(level);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (!(other instanceof EditSkillDescriptor)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        EditSkillDescriptor e \u003d (EditSkillDescriptor) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 82,
      "wardetu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditUserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GITHUB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIVERSITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.EditUserCommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Edits user profile information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditUserCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"me\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_FROM_TO_MISORDER \u003d \"\\\u0027from\\\u0027 cannot be later than \\\u0027to\\\u0027 field. \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the user profile in our resuMeme. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_DP + \"DISPLAY PICTURE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_GITHUB + \"GITHUB \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_UNIVERSITY + \"UNIVERSITY \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_MAJOR + \"MAJOR \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_FROM + \"FROM \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_TO + \"TO \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_CAP + \"CAP\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"Example: \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_DP + \"/Users/nhamquochung/Desktop/test.png \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_NAME + \"HUNG \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Technology enthusiast. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_PHONE + \"91648888 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_EMAIL + \"nhamhung.gttn@gmail.com \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_GITHUB + \"nhamhung \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_UNIVERSITY + \"National University of Singapore \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_MAJOR + \"Computer Science \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_FROM + \"2018 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_TO + \"2022 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + PREFIX_CAP + \"5.0 \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited User Profile!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private EditUserDescriptor editUserDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param editUserDescriptor details to edit the person with."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserCommand(EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.editUserDescriptor \u003d editUserDescriptor;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Person userToEdit \u003d model.getUser();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Person editedUser \u003d createEditedUser(userToEdit, editUserDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (editedUser.getFrom().compareTo(editedUser.getTo()) \u003e 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(MESSAGE_FROM_TO_MISORDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.setUser(editedUser);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new EditUserCommandResult(editedUser.toString(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                MESSAGE_EDIT_PERSON_SUCCESS, model.getDisplayType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Creates the user after edited."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param toEdit"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param editUserDescriptor"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static Person createEditedUser(Person toEdit, EditUserDescriptor editUserDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        DisplayPicture displayPicture \u003d editUserDescriptor.getDisplayPicture().orElse(toEdit.getDisplayPicture());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Name name \u003d editUserDescriptor.getName().orElse(toEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String description \u003d editUserDescriptor.getDescription().orElse(toEdit.getDescription());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Phone phone \u003d editUserDescriptor.getPhone().orElse(toEdit.getPhone());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Email email \u003d editUserDescriptor.getEmail().orElse(toEdit.getEmail());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Github github \u003d editUserDescriptor.getGithub().orElse(toEdit.getGithub());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String university \u003d editUserDescriptor.getUniversity().orElse(toEdit.getUniversity());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String major \u003d editUserDescriptor.getMajor().orElse(toEdit.getMajor());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Time from \u003d editUserDescriptor.getFrom().orElse(toEdit.getFrom());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Time to \u003d editUserDescriptor.getTo().orElse(toEdit.getTo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Double cap \u003d editUserDescriptor.getCap() \u003e -1 ? editUserDescriptor.getCap() : toEdit.getCap();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Person(displayPicture, name, description, phone, email, github, university, major, from, to, cap);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 4,
      "nhamhung": 108,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/edit/EditUserDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Descriptor for EditUserCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditUserDescriptor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private DisplayPicture displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Github github;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String university;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String major;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        A workaround since the default value for double is 0. The original implementation tried to wrap the value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        in an Optional\u003cDouble\u003e which caused the CAP field to be set to 0 everytime an edit is made to user profile."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private double cap \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserDescriptor() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserDescriptor(EditUserDescriptor toCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setDisplayPicture(toCopy.displayPicture);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setEmail(toCopy.email);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setGithub(toCopy.github);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setUni(toCopy.university);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setMajor(toCopy.major);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setFrom(toCopy.from);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setTo(toCopy.to);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setCap(toCopy.cap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setDisplayPicture(DisplayPicture displayPicture) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.displayPicture \u003d displayPicture;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cDisplayPicture\u003e getDisplayPicture() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(displayPicture);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setGithub(Github github) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.github \u003d github;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cGithub\u003e getGithub() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(github);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setUni(String uni) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.university \u003d uni;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cString\u003e getUniversity() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(university);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setMajor(String major) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(major);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setFrom(Time from) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cTime\u003e getFrom() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(from);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setTo(Time to) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Optional\u003cTime\u003e getTo() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Optional.ofNullable(to);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setCap(double cap) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.cap \u003d cap;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Double getCap() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return CollectionUtil.isAnyNonNull(displayPicture, name, description, phone, email, github, university,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                major, from, to, cap);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!(other instanceof EditUserDescriptor)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        EditUserDescriptor e \u003d (EditUserDescriptor) other;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return getDisplayPicture().equals(e.getDisplayPicture())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getGithub().equals(e.getGithub())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getUniversity().equals(e.getUniversity())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getMajor().equals(e.getMajor())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getFrom().equals(e.getFrom())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getTo().equals(e.getTo())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getCap().equals(e.getCap());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 8,
      "nhamhung": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Finds and lists all items in the storage whose name contains any of the argument keywords and whose type matches the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * specified type."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all items whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]... \" + PREFIX_ITEM + \" TYPE\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Google \" + PREFIX_ITEM + \" int\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 7,
      "wardetu": 3,
      "-": 17,
      "duongphammmm": 3,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.FindCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Finds {@code Internship} items in the resume book whose name contains the keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindInternshipCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindInternshipCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new FindCommandResult(\"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Internships\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof FindInternshipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindInternshipCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 25,
      "wardetu": 1,
      "nhamhung": 1,
      "duongphammmm": 6,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.FindCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Finds {@code Note} items in the resume book whose name contains the keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class FindNoteCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public FindNoteCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.updateFilteredNoteList(predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new FindCommandResult(\"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        model.getFilteredNoteList().size(), \"Notes\"), model.getDisplayType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.FindCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Finds {@code Project} items in the resume book whose name contains the keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindProjectCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindProjectCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new FindCommandResult(\"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Projects\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof FindProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindProjectCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 24,
      "wardetu": 1,
      "nhamhung": 2,
      "duongphammmm": 6,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.FindCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Finds {@code Resume} items in the resume book whose name contains the keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindResumeCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindResumeCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new FindCommandResult(\"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Resumes\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof FindResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindResumeCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 24,
      "wardetu": 1,
      "nhamhung": 1,
      "duongphammmm": 7,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/find/FindSkillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.FindCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Finds {@code Skill} items in the resume book whose name contains the keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Keyword matching is case-insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class FindSkillCommand extends FindCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public FindSkillCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(predicate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new FindCommandResult(\"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(Messages.MESSAGE_ITEMS_LISTED, model.getFilteredItemList().size(), \"Skills\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof FindSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindSkillCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 24,
      "wardetu": 1,
      "nhamhung": 1,
      "duongphammmm": 7,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generate/GenerateResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.generate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.lang.System.err;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.GenerateResumeCommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Generate pdf file from a Resume item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class GenerateResumeCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rgen\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \": Generate a pdf file from a Resume item identified by the index number used in the resume list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"If no name is provided for the output .pdf file, default name is the same as resume name.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 [\" + PREFIX_NAME + \"MyResume]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_GENERATE_SUCCESS \u003d \"Generated %s from %s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final String rootPath \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected String fileName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final PdfBuilder builder \u003d new PdfBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public GenerateResumeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        fileName \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public GenerateResumeCommand(Index targetIndex, Name resumeName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.fileName \u003d resumeName.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Get resume item"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Person user \u003d model.getUser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume resumeToGenerate \u003d model.getResumeByIndex(targetIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Set file name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (this.fileName \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            fileName \u003d resumeToGenerate.getName().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Get internships to add"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cInteger\u003e internshipsToAdd \u003d resumeToGenerate.getInternshipIds();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Get projects to add"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cInteger\u003e projectsToAdd \u003d resumeToGenerate.getProjectIds();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Get skills to add"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cInteger\u003e skillsToAdd \u003d resumeToGenerate.getSkillIds();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            builder.addPage();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            builder.addResumeTitle(user);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            builder.addContact(user);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            builder.addSectionTitle(\"EDUCATION\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            builder.addEducation(user);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (!internshipsToAdd.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                builder.addSectionTitle(\"INTERNSHIPS\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                for (Integer id: internshipsToAdd) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    Internship toAdd \u003d model.getInternshipById(id);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    builder.addInternship(toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (!projectsToAdd.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                builder.addSectionTitle(\"PROJECTS\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                for (Integer id: projectsToAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    Project toAdd \u003d model.getProjectById(id);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    builder.addProject(toAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (!skillsToAdd.isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                builder.addSectionTitle(\"SKILLS\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                List\u003cSkill\u003e skills \u003d resumeToGenerate.getSkillIds().stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        .map(x -\u003e model.hasSkillId(x) ? model.getSkillById(x) : null)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                builder.addSkills(skills);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            PDDocument resume \u003d builder.build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resume.save(rootPath + fileName + \".pdf\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                File file \u003d new File(rootPath + fileName + \".pdf\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                Desktop.getDesktop().open(file);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            err.println(\"Exception while trying to create simple document - \" + e);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new GenerateResumeCommandResult(resumeToGenerate.toString(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                String.format(MESSAGE_GENERATE_SUCCESS, fileName, resumeToGenerate.getName().toString()),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof GenerateResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((GenerateResumeCommand) other).targetIndex));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 140,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/generate/PdfBuilder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.generate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPageContentStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.apache.pdfbox.pdmodel.common.PDRectangle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDFont;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDType1Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Builder class to format resume file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class PdfBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final Color MAIN_COLOR \u003d new Color(0, 0, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final Color ACCENT_COLOR \u003d new Color(153, 0, 51);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final int BODY_SIZE \u003d 11;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final int HEADING_SIZE \u003d 14;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final int TITLE_SIZE \u003d 20;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final PDFont FONT_BOLD \u003d PDType1Font.HELVETICA_BOLD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static final PDFont FONT_REGULAR \u003d PDType1Font.HELVETICA;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final PDDocument resume \u003d new PDDocument();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final int marginX \u003d 64;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final int marginY \u003d 100;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final float spacing \u003d 20;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final PDRectangle page \u003d PDRectangle.A4;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final float pageHeight \u003d page.getHeight();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final float pageWidth \u003d page.getWidth();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private PDPageContentStream contentStream;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private float curX;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private float curY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private PDFont curFont;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private int curSize;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Page set up \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a new page."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addPage() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PDPage blank \u003d new PDPage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resume.addPage(blank);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream \u003d new PDPageContentStream(resume, blank);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_REGULAR, BODY_SIZE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setColor(MAIN_COLOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.setLeading(spacing);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.beginText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curX \u003d page.getLowerLeftX();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curY \u003d page.getLowerLeftY();;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.newLineAtOffset(resetX(), resetY());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Ends the current page."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void endPage() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.endText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean isEndOfPage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return curY + spacing \u003c\u003d marginY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Moves cursor to the next line."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void nextLine() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.newLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curY -\u003d spacing;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Reset x alignment to left align."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the value of x-coordinate offset."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public float resetX() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        float xOffSet \u003d -curX + marginX;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curX +\u003d xOffSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return xOffSet;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Reset y alignment to left align."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the value of y-coordinate offset."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public float resetY() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        float yOffSet \u003d -curY + pageHeight - marginY - spacing;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curY +\u003d yOffSet;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return yOffSet;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Changes the alignment of the text to centre align."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param content content the text to be aligned"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void centerAlign(String content) throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        float stringWidth \u003d curFont.getStringWidth(content) * curSize / 1000f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        float xOffSet \u003d -curX + (pageWidth - stringWidth) / 2f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.newLineAtOffset(xOffSet, 0);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curX +\u003d xOffSet;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setColor(Color color) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.setNonStrokingColor(color);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setFont(PDFont font, int size) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.setFont(font, size);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curFont \u003d font;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        curSize \u003d size;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Add and format section content \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Formats and shows content that spans over multiple lines."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param content the content to be shown."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void fitMultiLine(String content) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (isEndOfPage()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            endPage();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            addPage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        float limit \u003d page.getWidth() - 2 * marginX;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] words \u003d content.split(\" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        boolean isFirstLine \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        while (i \u003c words.length) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            float width \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            while (i \u003c words.length) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                String word \u003d words[i];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                float add \u003d curFont.getStringWidth(word + \" \") * curSize / 1000f;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                if (width + add \u003e limit) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                width +\u003d add;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                line +\u003d word + \" \";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (!isFirstLine) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                line \u003d \"  \" + line;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            contentStream.showText(line);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            isFirstLine \u003d false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            nextLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a new section title to the output Resume file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param section name of the new section."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSectionTitle(String section) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (isEndOfPage()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            endPage();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            addPage();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_BOLD, HEADING_SIZE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setColor(ACCENT_COLOR);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.showText(section);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds title to a new item in the output Resume file"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param title title of the item to be added"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addItemTitle(String title) throws IOException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (isEndOfPage()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            endPage();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            addPage();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setColor(MAIN_COLOR);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_BOLD, BODY_SIZE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.showText(title);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds description to a new item in the output Resume file"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description description of the item to be added"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addDescription(String description) throws IOException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_REGULAR, BODY_SIZE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] content \u003d description.split(\"\\\\.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (String line: content) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            String point \u003d \"- \" + line.trim() + \".\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            fitMultiLine(point);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Add sections \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds resume title to the resume."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param user user of the application."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addResumeTitle(Person user) throws IOException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_BOLD, TITLE_SIZE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setColor(ACCENT_COLOR);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String name \u003d user.getName().toString();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        centerAlign(name);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.showText(name.toUpperCase());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.newLineAtOffset(resetX(), 0);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds user\u0027s contact to the resume."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param user user of the application."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addContact(Person user) throws IOException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_REGULAR, BODY_SIZE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setColor(MAIN_COLOR);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String phone \u003d user.getPhone().toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String email \u003d user.getEmail().toString();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String git \u003d user.getGithub().toString();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String contact \u003d phone + \"  |  \" + email + \"  |  \" + git;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        centerAlign(contact);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.showText(contact);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.newLineAtOffset(resetX(), 0);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds educational details of the user to the output Resume file."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param user user of the application."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addEducation(Person user) throws IOException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String university \u003d user.getUniversity();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String from \u003d user.getFrom().format();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String to \u003d user.getTo().format();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String title \u003d university + \" | \" + from + \" - \" + to;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        addItemTitle(title);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_REGULAR, BODY_SIZE);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setColor(MAIN_COLOR);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String major \u003d \"- \" + user.getMajor();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.showText(major);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String cap \u003d \"- Cumulative Average Point: \" + user.getCap();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.showText(cap);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        nextLine();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a new {@code Internship} item to the output Resume file."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param internship {@code Internship} item to be added."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addInternship(Internship internship) throws IOException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String name \u003d internship.getName().toString();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String role \u003d internship.getRole();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String from \u003d internship.getFrom().format();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String to \u003d internship.getTo().format();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String title \u003d name + \" | \" + role + \" | \" + from + \" - \" + to;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        addItemTitle(title);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String description \u003d internship.getDescription();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        addDescription(description);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a new {@code Project} item to the output Resume file."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param project {@code Project} item to be added."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addProject(Project project) throws IOException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String name \u003d project.getName().toString();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String time \u003d project.getTime().format();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String website \u003d project.getWebsite().toString();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String title \u003d name + \" | \" + time + \" | \" + website;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        addItemTitle(title);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String description \u003d project.getDescription();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        addDescription(description);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds {@code Skill} items to the output Resume file."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param skills {@code Skill} item to be added."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSkills(List\u003cSkill\u003e skills) throws IOException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cSkill\u003e basic \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cSkill\u003e intermediate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cSkill\u003e advanced \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Skill skill: skills) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Level level \u003d skill.getLevel();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            switch (level) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            case BASIC:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                basic.add(skill);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            case INTERMEDIATE:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                intermediate.add(skill);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            case ADVANCED:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                advanced.add(skill);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                //Should not reach here"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!advanced.isEmpty()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            addLeveledSkills(\"Advanced: \", advanced);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!intermediate.isEmpty()) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            addLeveledSkills(\"Intermediate: \", intermediate);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!basic.isEmpty()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            addLeveledSkills(\"Basic: \", basic);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Formats and shows skills of a specific level."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param level the level title to be shown."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param skills list of skills with the specified level."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addLeveledSkills(String level, List\u003cSkill\u003e skills) throws IOException {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (isEndOfPage()) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            endPage();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            addPage();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setColor(MAIN_COLOR);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_BOLD, BODY_SIZE);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        contentStream.showText(level);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String line \u003d skills.get(0).getName().toString();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (int i \u003d 1; i \u003c skills.size(); i++) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            line +\u003d \", \" + skills.get(i).getName().toString();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setFont(FONT_REGULAR, BODY_SIZE);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        fitMultiLine(line);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Builds the completed resume file."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return the formatted document to be saved."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public PDDocument build() throws IOException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        endPage();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.resume;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 380
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/help/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Format help instructions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public abstract class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String COMMAND_OPTION_SUMMARY \u003d \"command\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String COMMAND_OPTION_START \u003d \"start\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + COMMAND_WORD + \" OPTION\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_OPTION_SUMMARY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_INVALID_OPTION \u003d \"The help option is invalid! \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"Try \\\"help command\\\" or \\\"help start\\\" instead.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/help/HelpStartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_START;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Format instructions for getting started."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class HelpStartCommand extends HelpCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" start\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new HelpCommandResult(\"\", SHOWING_HELP_MESSAGE, model.getDisplayType(), HELP_START);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 7,
      "-": 12,
      "chrisjwelly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/help/HelpSummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_COMMAND_SUMMARY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Formats full help instructions for every command for display."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class HelpSummaryCommand extends HelpCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" command\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new HelpCommandResult(\"\", SHOWING_HELP_MESSAGE, model.getDisplayType(), HELP_COMMAND_SUMMARY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "duongphammmm": 6,
      "-": 12,
      "chrisjwelly": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Lists all items in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$s items\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \": Lists all items of specified type in the resume book.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"TYPE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            + PREFIX_ITEM + \"res \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 16,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ListCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Internships."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListInternshipCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ListCommandResult(\"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_SUCCESS, \"Internship\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other instanceof ListInternshipCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 24,
      "chrisjwelly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.ListCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Lists all notes currently in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class ListNoteCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new ListCommandResult(\"\", String.format(MESSAGE_SUCCESS, \"Note\"), model.getDisplayType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other instanceof ListNoteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 5,
      "nhamhung": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ListCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Projects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListProjectCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ListCommandResult(\"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_SUCCESS, \"Project\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other instanceof ListProjectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 23,
      "chrisjwelly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ListCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Resumes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListResumeCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ListCommandResult(\"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_SUCCESS, \"Resume\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other instanceof ListResumeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 24,
      "chrisjwelly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/list/ListSkillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ListCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Command to list all Skills."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListSkillCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ListCommandResult(\"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_SUCCESS, \"Skill\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other instanceof ListSkillCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 22,
      "wardetu": 1,
      "chrisjwelly": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/AddCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the Add command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class AddCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs an {@code AddCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public AddCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/ClearCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the Clear command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ClearCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code ClearCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ClearCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /** Preview information about a resume. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected boolean isShowPreview \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /** Generate .pdf file from a resume. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected boolean isGenerate \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected boolean isShowHelp \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private final String dataToUser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private final String displayType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code dataToUser} and {@code feedbackToUser},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public CommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.dataToUser \u003d requireNonNull(dataToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.displayType \u003d requireNonNull(displayType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String getDataToUser() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return dataToUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String getDisplayType() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this.displayType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean isShowPreview() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return isShowPreview;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean hasItemChanged() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return !dataToUser.equals(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            \u0026\u0026 isShowPreview \u003d\u003d otherCommandResult.isShowPreview"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            \u0026\u0026 isGenerate \u003d\u003d otherCommandResult.isGenerate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Objects.hash(dataToUser, feedbackToUser, isShowHelp, isExit);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 16,
      "nhamhung": 7,
      "-": 45,
      "duongphammmm": 11,
      "chrisjwelly": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/DeleteCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the Delete command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class DeleteCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code DeleteCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public DeleteCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/DoneCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Represents the result of the Done command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class DoneCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Constructs an {@code DoneCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public DoneCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nhamhung": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/EditCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the Edit command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs an {@code EditCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/EditUserCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the EditUser command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class EditUserCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs an {@code EditUserCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public EditUserCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/ExitCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the Exit command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ExitCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs an {@code ExitCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ExitCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/FindCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the Find command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class FindCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code FindCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public FindCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/GenerateResumeCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the GenerateResume command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class GenerateResumeCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code GenerateResumeCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public GenerateResumeCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/HelpCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the Help command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class HelpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private String popUpContent \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code HelpCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public HelpCommandResult(String dataToUser, String feedbackToUser, String displayType, String popUpContent) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.popUpContent \u003d requireNonNull(popUpContent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getPopUpContent() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return popUpContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 10,
      "chrisjwelly": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/ListCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the List command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ListCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code ListCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ListCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/RedoCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Represents the result of a Redo command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class RedoCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // This is to trigger a view box refresh"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String DEFAULT_DATA_TO_USER \u003d \" \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code RedoCommandResult} with the specified {@code feedbackToUser} and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public RedoCommandResult(String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(DEFAULT_DATA_TO_USER, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 7,
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/ResumeEditCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the ResumeEdit command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ResumeEditCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code ResumeEditCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ResumeEditCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/ResumePreviewCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the ResumePreview command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ResumePreviewCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code ResumePreviewCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ResumePreviewCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/SortCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Represents the result of a Sort command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class SortCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // This is to maintain the current view of the result box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String DEFAULT_DATA_TO_USER \u003d \"\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code UndoCommandResult} with the specified {@code feedbackToUser} and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public SortCommandResult(String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(DEFAULT_DATA_TO_USER, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/TagPullCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the TagPull command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TagPullCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code TagPullCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public TagPullCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/UndoCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Represents the result of a Undo command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class UndoCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // This is to trigger a view box refresh"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String DEFAULT_DATA_TO_USER \u003d \" \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code UndoCommandResult} with the specified {@code feedbackToUser} and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public UndoCommandResult(String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(DEFAULT_DATA_TO_USER, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 7,
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/results/ViewCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Represents the result of the View command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Constructs a {@code ViewCommandResult} with the specified {@code dataToUser}, {@code feedbackToUser}, and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * {@code displayType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param dataToUser data to show user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param feedbackToUser feedback to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param displayType the alias of the item type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewCommandResult(String dataToUser, String feedbackToUser, String displayType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super(dataToUser, feedbackToUser, displayType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowPreview \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isGenerate \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isShowHelp \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        super.isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVERSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Sorts items of one type in the resume book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public abstract class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all %1$s items\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts items from the same list \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"and change the indices in the displayed item list accordingly. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"Specify if you want to sort in reverse order.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"All items can be sorted by name using sort word \\\"name\\\", \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"Projects can be sorted by time and internships by start time using \\\"time\\\". \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"Skills can be sorted by level using \\\"level\\\". \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + PREFIX_ITEM + \" TYPE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + PREFIX_SORT_ORDER + \" SORT_WORD \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"[ \" + PREFIX_REVERSE + \" REVERSE_OR_NOT ]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + PREFIX_ITEM + \" int \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            + PREFIX_SORT_ORDER + \" time \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_SORT_NOT_EXISTED \u003d \"This sort criterion does not exist.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_INAPPLICABLE_SORT \u003d \"The sort criterion is inapplicable for this item type.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortInternshipsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.SortCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Sort Internship items in the resume book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class SortInternshipsCommand extends SortCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // TODO: more defensive"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final Comparator\u003cInternship\u003e sortComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public SortInternshipsCommand(String sortOrder, boolean reverse) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Comparator\u003cInternship\u003e baseComparator \u003d (int1, int2) -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return int1.getName().compareTo(int2.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return int1.getFrom().compareTo(int2.getFrom());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        sortComparator \u003d reverse ? baseComparator.reversed() : baseComparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.sortInternships(sortComparator);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new SortCommandResult(String.format(MESSAGE_SUCCESS, \"Internship\"), model.getDisplayType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortNotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.SortCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Sorts Note items in the resume book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class SortNotesCommand extends SortCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final Comparator\u003cNote\u003e sortComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public SortNotesCommand(String sortOrder, boolean reverse) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Comparator\u003cNote\u003e baseComparator \u003d (note1, note2) -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return note1.getName().compareTo(note2.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return note1.getTime().compareTo(note2.getTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        sortComparator \u003d reverse ? baseComparator.reversed() : baseComparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.sortNotes(sortComparator);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.updateFilteredNoteList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new SortCommandResult(String.format(MESSAGE_SUCCESS, \"Note\"), model.getDisplayType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortProjectsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.SortCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Sorts Project items in the resume book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class SortProjectsCommand extends SortCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final Comparator\u003cProject\u003e sortComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public SortProjectsCommand(String sortOrder, boolean reverse) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Comparator\u003cProject\u003e baseComparator \u003d (proj1, proj2) -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return proj1.getName().compareTo(proj2.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return proj1.getTime().compareTo(proj2.getTime());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        sortComparator \u003d reverse ? baseComparator.reversed() : baseComparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.sortProjects(sortComparator);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new SortCommandResult(String.format(MESSAGE_SUCCESS, \"Resume\"), model.getDisplayType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortResumesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.SortCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Sorts Resume items in the resume book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class SortResumesCommand extends SortCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final Comparator\u003cResume\u003e sortComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public SortResumesCommand(String sortOrder, boolean reverse) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Comparator\u003cResume\u003e baseComparator \u003d (res1, res2) -\u003e res1.getName().compareTo(res2.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        sortComparator \u003d reverse ? baseComparator.reversed() : baseComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.sortResumes(sortComparator);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new SortCommandResult(String.format(MESSAGE_SUCCESS, \"Resume\"), model.getDisplayType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sort/SortSkillsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.commands.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.results.SortCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Sorts Skill items in the resume book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class SortSkillsCommand extends SortCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final Comparator\u003cSkill\u003e sortComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public SortSkillsCommand(String sortOrder, boolean reverse) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Comparator\u003cSkill\u003e baseComparator \u003d (ski1, ski2) -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equals(\"name\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return ski1.getName().compareTo(ski2.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return ski1.getLevel().compareTo(ski2.getLevel());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        sortComparator \u003d reverse ? baseComparator.reversed() : baseComparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.sortSkills(sortComparator);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        model.commitResumeBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new SortCommandResult(String.format(MESSAGE_SUCCESS, \"Internship\"), model.getDisplayType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Views the details of an item in the ResuMe application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Viewing this item!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" INDEX i/ TYPE\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \"Example: view 1 i/int\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 4,
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewInternshipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ViewCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Views the details of an Internship item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewInternshipCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewInternshipCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getInternshipSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship toView \u003d model.getInternshipByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setInternshipToDisplay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ViewCommandResult(toView.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewInternshipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewInternshipCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "duongphammmm": 22,
      "chrisjwelly": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.results.ViewCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Views the details of a specific note."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class ViewNoteCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ViewNoteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getNoteListSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Note toView \u003d model.getNote(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new ViewCommandResult(toView.toString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView), model.getDisplayType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                || (other instanceof ViewNoteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewNoteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ViewCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Views the details of a Project item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewProjectCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewProjectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getProjectSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project toView \u003d model.getProjectByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setProjectToDisplay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ViewCommandResult(toView.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewProjectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewProjectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "duongphammmm": 22,
      "chrisjwelly": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewResumeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ViewCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Views the details of a Resume item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewResumeCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewResumeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getResumeSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toView \u003d model.getResumeByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setResumeToDisplay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ViewCommandResult(toView.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewResumeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewResumeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "duongphammmm": 22,
      "chrisjwelly": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/view/ViewSkillCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.ViewCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Views the details of a Skill item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ViewSkillCommand extends ViewCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewSkillCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getSkillSize()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill toView \u003d model.getSkillByIndex(targetIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.setSkillToDisplay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ViewCommandResult(toView.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                String.format(MESSAGE_VIEW_SUCCESS, toView),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                model.getDisplayType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ViewSkillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewSkillCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "duongphammmm": 22,
      "chrisjwelly": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.add.AddNoteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.add.AddProjectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddResumeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.add.AddSkillCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_ITEM, PREFIX_FROM, PREFIX_TO,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        PREFIX_ROLE, PREFIX_DESCRIPTION, PREFIX_WEBSITE, PREFIX_LEVEL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ITEM) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Name name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (ItemUtil.RESUME_ALIAS):"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResumeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d new Resume(name, tagList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddResumeCommand(resume);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (ItemUtil.INTERNSHIP_ALIAS):"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_FROM, PREFIX_TO, PREFIX_ROLE, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        AddInternshipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Time from \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_FROM).get());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Time to \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TO).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (from.compareTo(to) \u003e 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(AddInternshipCommand.MESSAGE_FROM_TO_MISORDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            String role \u003d argMultimap.getValue(PREFIX_ROLE).get().trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            // TODO: handle this toString() thingy better"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Internship internship \u003d new Internship(name, role, from, to, description, tagList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddInternshipCommand(internship);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (ItemUtil.PROJECT_ALIAS):"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIME, PREFIX_WEBSITE, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        AddProjectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Website website \u003d ParserUtil.parseWebsite(argMultimap.getValue(PREFIX_WEBSITE).get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get().trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Project project \u003d new Project(name, time, website, description, tagList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddProjectCommand(project);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case(ItemUtil.SKILL_ALIAS):"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LEVEL) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                        AddSkillCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Level level \u003d ParserUtil.parseLevel(argMultimap.getValue(PREFIX_LEVEL).get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Skill skill \u003d new Skill(name, level, tagList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new AddSkillCommand(skill);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case(ItemUtil.NOTE_ALIAS):"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TIME)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            Time noteTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            Note note \u003d new Note(name, noteTime, tagList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new AddNoteCommand(note);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "wardetu": 89,
      "nhamhung": 20,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* AB3\u0027s original prefixes */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Items */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_ITEM \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"#/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Internship */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Project */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_WEBSITE \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Common between Internship and Project */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /* Skill */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Prefix PREFIX_LEVEL \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /* Prefixes for different item types */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_INTERNSHIP \u003d new Prefix(ItemUtil.INTERNSHIP_ALIAS + \"/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_PROJECT \u003d new Prefix(ItemUtil.PROJECT_ALIAS + \"/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_RESUME \u003d new Prefix(ItemUtil.RESUME_ALIAS + \"/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_SKILL \u003d new Prefix(ItemUtil.SKILL_ALIAS + \"/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /* User */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_DP \u003d new Prefix(\"dp/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_GITHUB \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_UNIVERSITY \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_CAP \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /* Sort keywords */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_SORT_ORDER \u003d new Prefix(\"order/\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final Prefix PREFIX_REVERSE \u003d new Prefix(\"reverse/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /* Note */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final Prefix PREFIX_DONE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 12,
      "nhamhung": 10,
      "-": 14,
      "chrisjwelly": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteInternshipCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteProjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteResumeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteSkillCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new DeleteResumeCommand(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new DeleteInternshipCommand(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new DeleteProjectCommand(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new DeleteSkillCommand(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case ItemUtil.NOTE_ALIAS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new DeleteNoteCommand(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 3,
      "wardetu": 5,
      "nhamhung": 10,
      "-": 22,
      "chrisjwelly": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Parser for done command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parse argument to return a DoneCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "nhamhung": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditInternshipCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.edit.EditNoteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.edit.EditNoteDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditProjectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditProjectDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditResumeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditResumeDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditSkillCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.edit.EditSkillDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_ITEM, PREFIX_FROM, PREFIX_TO,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        PREFIX_ROLE, PREFIX_DESCRIPTION, PREFIX_WEBSITE, PREFIX_LEVEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditResumeDescriptor editResumeDescriptor \u003d new EditResumeDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Not sure if I should create a method inside the respective descriptors for this checking."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Considerations: If I add a method inside the descriptor, then potentially need dependencies"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editResumeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editResumeDescriptor::setTags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editResumeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(EditResumeCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditResumeCommand(index, editResumeDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditInternshipDescriptor editInternshipDescriptor \u003d new EditInternshipDescriptor();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editInternshipDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                editInternshipDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get().trim()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                editInternshipDescriptor.setFrom(ParserUtil.parseTime(argMultimap.getValue(PREFIX_FROM).get().trim()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                editInternshipDescriptor.setTo(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TO).get().trim()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                editInternshipDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        argMultimap.getValue(PREFIX_DESCRIPTION).get().trim()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editInternshipDescriptor::setTags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editInternshipDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                throw new ParseException(EditInternshipCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditInternshipCommand(index, editInternshipDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditProjectDescriptor editProjectDescriptor \u003d new EditProjectDescriptor();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editProjectDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                editProjectDescriptor.setDescription("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get().trim()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_WEBSITE).isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editProjectDescriptor.setWebsite(ParserUtil"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        .parseWebsite(argMultimap.getValue(PREFIX_WEBSITE).get().trim()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editProjectDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get().trim()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editProjectDescriptor::setTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editProjectDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(EditProjectCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditProjectCommand(index, editProjectDescriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            EditSkillDescriptor editSkillDescriptor \u003d new EditSkillDescriptor();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                editSkillDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (argMultimap.getValue(PREFIX_LEVEL).isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                editSkillDescriptor.setLevel(ParserUtil.parseLevel(argMultimap.getValue(PREFIX_LEVEL).get()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editSkillDescriptor::setTags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!editSkillDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(EditSkillCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new EditSkillCommand(index, editSkillDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case ItemUtil.NOTE_ALIAS:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            EditNoteDescriptor editNoteDescriptor \u003d new EditNoteDescriptor();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            boolean isAnyFieldEdited \u003d false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                isAnyFieldEdited \u003d true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                editNoteDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                isAnyFieldEdited \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                editNoteDescriptor.setTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (!isAnyFieldEdited) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                throw new ParseException(EditNoteCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new EditNoteCommand(index, editNoteDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 7,
      "wardetu": 5,
      "nhamhung": 32,
      "-": 59,
      "chrisjwelly": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditUserParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GITHUB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIVERSITY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.edit.EditUserCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.edit.EditUserDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Parser for EditUserCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditUserParser implements Parser\u003cEditUserCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditUserCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * and returns an EditUserCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public EditUserCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DP, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        PREFIX_GITHUB, PREFIX_UNIVERSITY, PREFIX_MAJOR, PREFIX_FROM, PREFIX_TO, PREFIX_CAP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (args.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"Me Command has no value!!\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        EditUserDescriptor editUserDescriptor \u003d new EditUserDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DP).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            String dpPath \u003d argMultimap.getValue(PREFIX_DP).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            DisplayPicture displayProfile \u003d new DisplayPicture(dpPath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (isValidDisplayPicturePath(dpPath)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                editUserDescriptor.setDisplayPicture(displayProfile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                editUserDescriptor.setDisplayPicture(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        DisplayPicture.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setDescription(ParserUtil.parseDescription(argMultimap.getValue("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GITHUB).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setGithub(ParserUtil.parseGithub(argMultimap.getValue(PREFIX_GITHUB).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_UNIVERSITY).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setUni(ParserUtil.parseUniversity(argMultimap.getValue(PREFIX_UNIVERSITY).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAJOR).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setMajor(ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setFrom(ParserUtil.parseTime(argMultimap.getValue(PREFIX_FROM).get()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setTo(ParserUtil.parseTime(argMultimap.getValue(PREFIX_TO).get()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CAP).isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            editUserDescriptor.setCap(ParserUtil.parseCap(argMultimap.getValue(PREFIX_CAP).get()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new EditUserCommand(editUserDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static boolean isValidDisplayPicturePath(String dpPath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        File file \u003d new File(dpPath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindInternshipCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.find.FindNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.find.FindProjectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.find.FindResumeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.find.FindSkillCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String trimmedPreamble \u003d argMultimap.getPreamble().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (trimmedPreamble.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String[] nameKeywords \u003d trimmedPreamble.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new FindResumeCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new FindInternshipCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new FindProjectCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new FindSkillCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case ItemUtil.NOTE_ALIAS:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new FindNoteCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 3,
      "wardetu": 5,
      "nhamhung": 9,
      "-": 28,
      "duongphammmm": 1,
      "chrisjwelly": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GenerateResumeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.generate.GenerateResumeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Parses input arguments and creates a new GenerateResumeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class GenerateResumeCommandParser implements Parser\u003cGenerateResumeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GenerateResumeCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * and returns a GenerateResumeCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public GenerateResumeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    GenerateResumeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Name outputName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new GenerateResumeCommand(index, outputName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new GenerateResumeCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.help.HelpStartCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.help.HelpSummaryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        switch (args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"command\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new HelpSummaryCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new HelpStartCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new ParseException(HelpCommand.MESSAGE_INVALID_OPTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListInternshipCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.list.ListNoteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.list.ListProjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListResumeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.list.ListSkillCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch(itemType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ListResumeCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new ListInternshipCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ListProjectCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ListSkillCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case ItemUtil.NOTE_ALIAS:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "wardetu": 11,
      "nhamhung": 4,
      "chrisjwelly": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_INVALID_REDIT_ITEM_INDEX \u003d \"Index provided for one of the items is not\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + \" a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // TODO: BEAUTIFY THE EXCEPTION MESSAGE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Parses a {@code String level} into a {@code Level}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws ParseException if the given {@code level} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Level parseLevel(String level) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(level);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String trimmedLevel \u003d level.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Level value : Level.values()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (value.toString().equalsIgnoreCase(trimmedLevel)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        throw new ParseException(\"Level of proficiency can only be one of these three types: basic, intermediate, \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                + \"advanced.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Parses a {@code String website} into a {@code Website}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws ParseException if the given {@code level} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Website parseWebsite(String website) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(website);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String trimmedWebsite \u003d website.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Website.isValidWebsite(trimmedWebsite)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(Website.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Website(trimmedWebsite);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses a {@code String description} into an {@code String}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static String parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return trimmedDescription;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag) || tag.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses an {@code String itemType} into a {@code String}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static String parseItemType(String itemType) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(itemType);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String trimmedItemType \u003d itemType.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!Item.isValidItemType(trimmedItemType)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"Not a valid item type!\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return trimmedItemType;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses a {@code String time} in MM-YYYY format into a {@code Time}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the Item Indices to give the required optional"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static Optional\u003cList\u003cInteger\u003e\u003e parseReditItemIndices(String indices) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (indices \u003d\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } else if (indices.equals(\"\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            // Empty string will return an InvocationTargetException in the streams"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Investigate how this can be combined with the else block"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return Optional.of(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            boolean isValidIndices \u003d Arrays"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .stream(indices.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    .allMatch(StringUtil::isNonZeroUnsignedInteger);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (!isValidIndices) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            List\u003cInteger\u003e mappedIndices \u003d Arrays.stream(indices.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        .map(Integer::parseInt)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return Optional.of(mappedIndices);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses a {@code String displayFilePath} into a {@code DisplayPicture}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static DisplayPicture parseDisplayPicture(String displayFilePath) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(displayFilePath);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String trimmedDisplayFilePath \u003d displayFilePath.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (DisplayPicture.isValidDisplayPicture(trimmedDisplayFilePath)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new DisplayPicture(trimmedDisplayFilePath);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        throw new ParseException(DisplayPicture.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses a {@code String github} into a {@code Github}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the given {@code github} is invalid."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static Github parseGithub(String github) throws ParseException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(github);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String trimmedGithub \u003d github.trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (Github.isValidGithub(trimmedGithub)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new Github(trimmedGithub);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        throw new ParseException(Github.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses a {@code String university} into a {@code String university}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the given {@code github} is invalid."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static String parseUniversity(String university) throws ParseException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(university);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String trimmedUniversity \u003d university.trim();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (Verifier.isValidUniversity(trimmedUniversity)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return trimmedUniversity;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        throw new ParseException(Verifier.UNIVERSITY_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses a {@code String major} into a {@code String major}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the given {@code major} is invalid."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static String parseMajor(String major) throws ParseException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String trimmedMajor \u003d major.trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (Verifier.isValidMajor(trimmedMajor)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return trimmedMajor;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        throw new ParseException(Verifier.MAJOR_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses a {@code String cap} into a {@code Double cap}."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the given {@code cap} is invalid."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static Double parseCap(String cap) throws ParseException {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(cap);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String trimmedCap \u003d cap.trim();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (Verifier.isValidCap(trimmedCap)) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            double userCap \u003d Double.valueOf(trimmedCap);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return Math.round(userCap * 100.0) / 100.0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        throw new ParseException(Verifier.CAP_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Parses a {@code String role} into a {@code String role}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static String parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (Verifier.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return trimmedRole;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        throw new ParseException(Verifier.ROLE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Parses a {@code String reverse} choice into a boolean option."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * A default value of false is returned if null is provided."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static boolean parseReverse(String reverse) throws ParseException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (reverse \u003d\u003d null || reverse.equalsIgnoreCase(\"false\")) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else if (reverse.equalsIgnoreCase(\"true\")) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(\"Reverse choice can only be true of false.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 43,
      "nhamhung": 111,
      "-": 111,
      "duongphammmm": 3,
      "chrisjwelly": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResumeBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.ResumeEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.ResumePreviewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.TagPullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.edit.EditUserCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.generate.GenerateResumeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.sort.SortCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ResumeBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        //--------------Item manipulation commands-------------"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        case GenerateResumeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new GenerateResumeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        //-----------------Undo/Redo----------------------------"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        //-----------------Resume Editing-----------------------"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case ResumeEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ResumeEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        case TagPullCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new TagPullCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        //-----------------Other commands-----------------------"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        case ResumePreviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new ResumePreviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case EditUserCommand.COMMAND_WORD: //\"me\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new EditUserParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        //-----------------Other commands-----------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new HelpCommandParser().parse(arguments.trim());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 11,
      "wardetu": 25,
      "nhamhung": 8,
      "-": 62,
      "duongphammmm": 7,
      "chrisjwelly": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResumeEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERNSHIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.ResumeEditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Parses input arguments and creates a new {@code ResumeEditCommand} object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ResumeEditCommandParser implements Parser\u003cResumeEditCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ResumeEditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and returns an ResumeEditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ResumeEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INTERNSHIP, PREFIX_SKILL, PREFIX_PROJECT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Optional.empty() denotes non-existence, \"\" denotes that no argument specified, else some arguments specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d ParserUtil.parseReditItemIndices("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                argMultimap.getValue(PREFIX_INTERNSHIP).orElse(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectsIndices \u003d ParserUtil.parseReditItemIndices("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                argMultimap.getValue(PREFIX_PROJECT).orElse(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillsIndices \u003d ParserUtil.parseReditItemIndices("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                argMultimap.getValue(PREFIX_SKILL).orElse(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new ResumeEditCommand(index, internshipIndices, projectsIndices, skillsIndices);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ResumePreviewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.ResumePreviewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Parses input arguments and creates a new ResumePreviewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ResumePreviewCommandParser implements Parser\u003cResumePreviewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumePreviewCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResumePreviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new ResumePreviewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVERSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORT_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.sort.SortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.sort.SortInternshipsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.sort.SortNotesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.sort.SortProjectsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.sort.SortResumesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.commands.sort.SortSkillsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Parses input arguments and create a SortCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Parses the given {@code String} of arguments and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM, PREFIX_SORT_ORDER, PREFIX_REVERSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ITEM) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORT_ORDER)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        String sortOrder \u003d argMultimap.getValue(PREFIX_SORT_ORDER).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        boolean reverse \u003d ParserUtil.parseReverse(argMultimap.getValue(PREFIX_REVERSE).orElse(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!sortOrder.equalsIgnoreCase(\"name\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            \u0026\u0026 !sortOrder.equalsIgnoreCase(\"time\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            \u0026\u0026 !sortOrder.equalsIgnoreCase(\"level\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(SortCommand.MESSAGE_SORT_NOT_EXISTED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        switch (itemType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (!sortOrder.equalsIgnoreCase(\"name\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_INAPPLICABLE_SORT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return new SortResumesCommand(sortOrder, reverse);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equalsIgnoreCase(\"level\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_INAPPLICABLE_SORT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return new SortInternshipsCommand(sortOrder, reverse);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equalsIgnoreCase(\"level\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_INAPPLICABLE_SORT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return new SortProjectsCommand(sortOrder, reverse);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equalsIgnoreCase(\"time\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_INAPPLICABLE_SORT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return new SortSkillsCommand(sortOrder, reverse);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.NOTE_ALIAS:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            if (sortOrder.equalsIgnoreCase(\"level\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_INAPPLICABLE_SORT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                return new SortNotesCommand(sortOrder, reverse);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagPullCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.TagPullCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Parses input arguments and creates a new {@code TagPullCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TagPullCommandParser implements Parser\u003cTagPullCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagPullCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and returns an TagPullCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public TagPullCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TAG).isPresent() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                    TagPullCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return new TagPullCommand(index, tagList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Verifier.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Validations for different inputs without a separate class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class Verifier {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final int UNIVERSITY_MAX_LENGTH \u003d 100;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String UNIVERSITY_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \"University should only contain alphanumeric characters and spaces, with max length of 50 characters\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    + \" and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String UNIVERSITY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final int MAJOR_MAX_LENGTH \u003d 100;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MAJOR_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \"Major should only contain alphanumeric characters and spaces, with max length of 50 characters\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    + \" and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MAJOR_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String CAP_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \"CAP should only contain numeric characters and must match actual range from 0.0 to 5.0 and it \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    + \"should not be blank\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final int ROLE_MAX_LENGTH \u003d 50;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String ROLE_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \"Major should only contain alphanumeric characters and spaces, with max length of 50 characters\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    + \" and it should not be blank\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String ROLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check if a field is within length limit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param input field."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param maxLength maximum length allowed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isCorrectLength(String input, int maxLength) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (input.length() \u003c\u003d maxLength) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check if an input is empty."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param input input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isNotEmpty(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Get integer value of input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static int getInt(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Integer.parseInt(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check if the University field is valid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param university"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isValidUniversity(String university) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (isNotEmpty(university) \u0026\u0026 isCorrectLength(university, UNIVERSITY_MAX_LENGTH)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 university.matches(UNIVERSITY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check if the Major field is valid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param major"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isValidMajor(String major) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (isNotEmpty(major) \u0026\u0026 isCorrectLength(major, MAJOR_MAX_LENGTH)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 major.matches(MAJOR_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check if the Cap field is valid."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param cap"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isValidCap(String cap) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        double userCap;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            userCap \u003d Double.valueOf(cap);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(CAP_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (isNotEmpty(cap) \u0026\u0026 isWithinRange(userCap, 0, 5)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check if a number is within accepted range."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param number"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param min"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param max"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isWithinRange(double number, double min, double max) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return number \u003e\u003d min \u0026\u0026 number \u003c\u003d max;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check if the Role field is valid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param role"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isValidRole(String role) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (isNotEmpty(role) \u0026\u0026 isCorrectLength(role, ROLE_MAX_LENGTH)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 role.matches(ROLE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 2,
      "nhamhung": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewInternshipCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.logic.commands.view.ViewNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewProjectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewResumeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.view.ViewSkillCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // The code is actually identical to DeleteCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ITEM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty() \u0026\u0026 !argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String itemType \u003d ParserUtil.parseItemType(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        switch(itemType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ViewResumeCommand(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ViewInternshipCommand(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ViewProjectCommand(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return new ViewSkillCommand(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        case ItemUtil.NOTE_ALIAS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return new ViewNoteCommand(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // Should not have reached here"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            // TODO: Use a better Exception here"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            throw new ParseException(\"The item type is not detected! Something is wrong\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 5,
      "nhamhung": 10,
      "chrisjwelly": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    Predicate\u003cNote\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the user prefs\u0027 resume book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Path getResumeBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Sets the user prefs\u0027 resume book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResumeBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces resume book data with the data in {@code resumeBook}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResumeBook(ReadOnlyResumeBook resumeBook);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ReadOnlyResumeBook getResumeBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /** Returns the stateless AddressBook */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    ReadOnlyResumeBook getStatelessResumeBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the current user with {@code person}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setUser(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return the user in the model as a Person object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    Person getUser();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return the user in the model as an ObservablePerson object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    ObservablePerson getObservableUser();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    boolean hasNote(Note note);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    void setNote(Note target, Note editedNote);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    void deleteNote(Note note);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    Note getNote(Index index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sorts all Note items in the resume book using the supplied Comparator."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param sortComparator a Comparator that compares two Note items."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void sortNotes(Comparator\u003cNote\u003e sortComparator);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    int getNoteListSize();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internships \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if an internship with the same identity as {@code internship} exists in the resume book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasInternship(Internship internship);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds the given internship."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code internship} must not already exist in the resume book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void addInternship(Internship internship);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given internship {@code target} with {@code editedInternship}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedInternship} must not be the same as another existing internship in the resume book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setInternship(Internship target, Internship editedInternship);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Deletes the given internship."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The internship must exist in the resume book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void deleteInternship(Internship internship);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns an Internship item at the specified index from the internship list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Internship item at {@code index}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Internship getInternshipByIndex(Index index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasInternshipId(int id);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns a Internship item with the specified ID from the internship list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Internship item with {@code id}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Internship getInternshipById(int id);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    List\u003cInternship\u003e getInternshipsByTag(Tag tag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sorts all Internship items in the resume book using the supplied Comparator."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param sortComparator a Comparator that compares two Internship items."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void sortInternships(Comparator\u003cInternship\u003e sortComparator);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the internship list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getInternshipSize();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the internship list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setInternshipToDisplay();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Projects \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the resume book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProject(Project project);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a project to the resume book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The project must not already exist in the resume book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addProject(Project project);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedProject} must not be the same as another existing project in the resume book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProject(Project target, Project editedProject);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteProject(Project key);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Project item at the specified index from the project list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Project item at {@code index}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Project getProjectByIndex(Index index);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasProjectId(int id);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Project item with the specified ID from the project list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Project item with {@code id}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Project getProjectById(int id);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    List\u003cProject\u003e getProjectsByTag(Tag tag);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sorts all Project items in the resume book using the supplied Comparator."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param sortComparator a Comparator that compares two Project items."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void sortProjects(Comparator\u003cProject\u003e sortComparator);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the project list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getProjectSize();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the project list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setProjectToDisplay();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Skills \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a skill with the same identity as {@code skill} exists in the resume book."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkill(Skill skill);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a skill to the resume book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The skill must not already exist in the resume book."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSkill(Skill skill);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given skill {@code target} in the list with {@code editedSkill}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedSkill} must not be the same as another existing skill in the resume book."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkill(Skill target, Skill editedSkill);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteSkill(Skill key);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Skill item at the specified index from the skill list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Skill item at {@code index}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Skill getSkillByIndex(Index index);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasSkillId(int id);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Skill item with the specified ID from the skill list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Skill item with {@code id}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Skill getSkillById(int id);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    List\u003cSkill\u003e getSkillsByTag(Tag tag);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sorts all Skill items in the resume book using the supplied Comparator."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param sortComparator a Comparator that compares two Skill items."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void sortSkills(Comparator\u003cSkill\u003e sortComparator);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the skill list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getSkillSize();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the skill list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setSkillToDisplay();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resumes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a resume with the same identity as {@code resume} exists in the resume book."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasResume(Resume resume);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds the given resume."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code resume} must not already exist in the resume book."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void addResume(Resume resume);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given resume {@code target} with {@code editedResume}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedResume} must not be the same as another existing resume in the resume book."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResume(Resume target, Resume editedResume);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Updates the given resume to contain the internship, project, and skill items with the specified indices."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    void editResume(Resume target, List\u003cInteger\u003e internshipIds, List\u003cInteger\u003e projectIds, List\u003cInteger\u003e skillIds);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Deletes the given resume."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The resume must exist in the resume book."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void deleteResume(Resume resume);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Resume item at the specified index from the resume list."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Resume item at {@code index}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Resume getResumeByIndex(Index index);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sorts all Resume items in the resume book using the supplied Comparator."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param sortComparator a Comparator that compares two Resume items."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void sortResumes(Comparator\u003cResume\u003e sortComparator);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasResumeId(int id);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the resume list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    int getResumeSize();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the List as the resume list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void setResumeToDisplay();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Item Lists \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /** Returns an unmodifiable view of the filtered item list */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ObservableList\u003cItem\u003e getFilteredItemList();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    void setItemsToDisplay(String typeString);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Updates the filter of the filtered item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void updateFilteredItemList(Predicate\u003cItem\u003e predicate);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    ObservableList\u003cNote\u003e getFilteredNoteList();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cItem\u003e predicate);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    String getDisplayType();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns true if the model has previous resume book states to restore."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean canUndoResumeBook();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns true if the model has undone resume book states to restore."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    boolean canRedoResumeBook();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Restores the model\u0027s resume book to its previous state."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void undoResumeBook();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Restores the model\u0027s resume book to its previously undone state."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void redoResumeBook();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Saves the current resume book state for undo/redo."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    void commitResumeBook();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 18,
      "wardetu": 64,
      "nhamhung": 22,
      "-": 75,
      "duongphammmm": 196,
      "chrisjwelly": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final VersionedResumeBook versionedResumeBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final FilteredList\u003cItem\u003e filteredItems;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final FilteredList\u003cNote\u003e filteredNotes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Initializes a ModelManager with the given resumeBook and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ModelManager(ReadOnlyResumeBook resumeBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(resumeBook, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        logger.fine(\"Initializing with resume book: \" + resumeBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.versionedResumeBook \u003d new VersionedResumeBook(resumeBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        filteredItems \u003d new FilteredList\u003c\u003e(this.versionedResumeBook.getItemToDisplayList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.versionedResumeBook.getNoteToDisplayList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this(new ResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Path getResumeBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return userPrefs.getResumeBookFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setResumeBookFilePath(Path resumeBookFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resumeBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userPrefs.setResumeBookFilePath(resumeBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ResumeBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeBook(ReadOnlyResumeBook resumeBook) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.versionedResumeBook.resetData(resumeBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ReadOnlyResumeBook getResumeBook() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ReadOnlyResumeBook getStatelessResumeBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return versionedResumeBook.getStatelessResumeBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setUser(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Wrap the Person object so it is consistent with the setUser method in ResumeBook"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setUser(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Person getUser() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.getUser();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ObservablePerson getObservableUser() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.getObservableUser();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internships \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return versionedResumeBook.hasNote(note);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        versionedResumeBook.addNote(note);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        updateFilteredNoteList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        versionedResumeBook.setNote(target, editedNote);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void deleteNote(Note note) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        versionedResumeBook.deleteNote(note);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note getNote(Index index) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return versionedResumeBook.getNoteByIndex(index);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortNotes(Comparator\u003cNote\u003e sortComparator) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.sortNotes(sortComparator);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public int getNoteListSize() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return versionedResumeBook.getNoteListSize();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internships \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasInternship(Internship internship) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.hasInternship(internship);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.addInternship(internship);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternship(Internship target, Internship editedInternship) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedInternship);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setInternship(target, editedInternship);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteInternship(Internship key) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.deleteInternship(key);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Internship getInternshipByIndex(Index index) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.getInternshipByIndex(index);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasInternshipId(int id) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.hasInternshipId(id);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Internship getInternshipById(int id) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return versionedResumeBook.getInternshipById(id);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cInternship\u003e getInternshipsByTag(Tag tag) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return versionedResumeBook.getInternshipsByTag(tag);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortInternships(Comparator\u003cInternship\u003e sortComparator) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.sortInternships(sortComparator);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getInternshipSize() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.getInternshipSize();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternshipToDisplay() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setInternshipToDisplay();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Projects \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.hasProject(project);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.addProject(project);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedProject);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setProject(target, editedProject);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteProject(Project key) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.deleteProject(key);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Project getProjectByIndex(Index index) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.getProjectByIndex(index);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProjectId(int id) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.hasProjectId(id);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Project getProjectById(int id) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.getProjectById(id);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cProject\u003e getProjectsByTag(Tag tag) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return versionedResumeBook.getProjectsByTag(tag);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortProjects(Comparator\u003cProject\u003e sortComparator) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.sortProjects(sortComparator);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getProjectSize() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.getProjectSize();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProjectToDisplay() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setProjectToDisplay();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Skill \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkill(Skill skill) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.hasSkill(skill);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.addSkill(skill);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkill(Skill target, Skill editedSkill) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedSkill);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setSkill(target, editedSkill);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteSkill(Skill key) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.deleteSkill(key);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Skill getSkillByIndex(Index index) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.getSkillByIndex(index);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkillId(int id) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.hasSkillId(id);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Skill getSkillById(int id) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.getSkillById(id);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cSkill\u003e getSkillsByTag(Tag tag) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return versionedResumeBook.getSkillsByTag(tag);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortSkills(Comparator\u003cSkill\u003e sortComparator) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.sortSkills(sortComparator);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getSkillSize() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.getSkillSize();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkillToDisplay() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setSkillToDisplay();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resume \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasResume(Resume resume) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.hasResume(resume);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.addResume(resume);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void editResume(Resume target, List\u003cInteger\u003e internshipIds, List\u003cInteger\u003e projectIds,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                           List\u003cInteger\u003e skillIds) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        versionedResumeBook.editResume(target, internshipIds, projectIds, skillIds);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResume(Resume target, Resume editedResume) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedResume);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setResume(target, editedResume);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteResume(Resume target) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        versionedResumeBook.deleteResume(target);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Resume getResumeByIndex(Index index) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.getResumeByIndex(index);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortResumes(Comparator\u003cResume\u003e sortComparator) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.sortResumes(sortComparator);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasResumeId(int id) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return versionedResumeBook.hasResumeId(id);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getResumeSize() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.getResumeSize();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeToDisplay() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.setResumeToDisplay();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * {@code versionedResumeBook}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return filteredItems;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItemsToDisplay(String typeString) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        versionedResumeBook.setItemsToDisplay(typeString);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        filteredItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String getDisplayType() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return versionedResumeBook.getDisplayType();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean canUndoResumeBook() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.canUndo();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean canRedoResumeBook() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.canRedo();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void undoResumeBook() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.undo();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void redoResumeBook() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.redo();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void commitResumeBook() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        versionedResumeBook.commit();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return versionedResumeBook.equals(other.versionedResumeBook)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                \u0026\u0026 filteredItems.equals(other.filteredItems);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 33,
      "wardetu": 103,
      "nhamhung": 50,
      "-": 125,
      "duongphammmm": 157,
      "chrisjwelly": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyResumeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Unmodifiable view of a resume book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public interface ReadOnlyResumeBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Get Detail Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the user of the resume book as a Person object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return {@code Person} item representing the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Person getUser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns an unmodifiable view of the current items list as an {@code ObservableList}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ObservableList\u003cItem\u003e getItemToDisplayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns an unmodifiable view of the current notes list as an {@code ObservableList}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    ObservableList\u003cNote\u003e getNoteToDisplayList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current internship list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate internship."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    UniqueItemList\u003cInternship\u003e getInternshipList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current project list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate project."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    UniqueItemList\u003cProject\u003e getProjectList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current skill list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate skill."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    UniqueItemList\u003cSkill\u003e getSkillList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an unmodifiable view of the current resume list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This list will not contain any duplicate resume."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    UniqueItemList\u003cResume\u003e getResumeList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns an unmodifiable view of the current note list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * This list will not contain any duplicate resume."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    UniqueItemList\u003cNote\u003e getNoteList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the user in the Resume Book as an ObservablePerson object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    ObservablePerson getObservableUser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Query List Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return an Internship item at the specified index from the internship list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index index of internship"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Internship item at {@code index}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Internship getInternshipByIndex(Index index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns a list of Internship which is tagged with {@code tag}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param tag the {@code tag} which is expected in the Internship item."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return List of Internship tagged with {@code tag}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    List\u003cInternship\u003e getInternshipsByTag(Tag tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasInternshipId(int id);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Return a Internship item with the specified ID from the internship list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Internship item with {@code id}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Internship getInternshipById(int id);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the internship list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getInternshipSize();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Project item at the specified index from the project list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index index of project"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Project item at {@code index}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Project getProjectByIndex(Index index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns a list of Project which is tagged with {@code tag}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param tag the {@code tag} which is expected in the Project item."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return List of Project tagged with {@code tag}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    List\u003cProject\u003e getProjectsByTag(Tag tag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasProjectId(int id);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Project item with the specified ID from the project list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Project item with {@code id}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Project getProjectById(int id);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the project list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getProjectSize();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Skill item at the specified index from the skill list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index index of skill"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Skill item at {@code index}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Skill getSkillByIndex(Index index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns a list of Skill which is tagged with {@code tag}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param tag the {@code tag} which is expected in the Skill item."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return List of Skill tagged with {@code tag}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    List\u003cSkill\u003e getSkillsByTag(Tag tag);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasSkillId(int id);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Skill item with the specified ID from the skill list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Skill item with {@code id}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    Skill getSkillById(int id);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the skill list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getSkillSize();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return a Resume item at the specified index from the resume list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param index index of resume"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @return Resume item at {@code index}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Resume getResumeByIndex(Index index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    boolean hasResumeId(int id);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Return the size of the resume list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    int getResumeSize();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Return a Note item at the specified index from the note list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param index index of skill"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return Skill item at {@code index}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    Note getNoteByIndex(Index index);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Return the size of the note list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public int getNoteListSize();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 20,
      "wardetu": 10,
      "nhamhung": 34,
      "duongphammmm": 111,
      "chrisjwelly": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Path getResumeBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ResumeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Wraps all data at the resume-book level"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Duplicates are not allowed (by .isSame comparison)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ResumeBook implements ReadOnlyResumeBook {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Should be all caps but check style complain"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final UniqueItemList\u003cItem\u003e itemsToDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final UniqueItemList\u003cInternship\u003e internships;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final UniqueItemList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final UniqueItemList\u003cSkill\u003e skills;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final UniqueItemList\u003cResume\u003e resumes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final UniqueItemList\u003cNote\u003e notesToDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final UniqueItemList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String displayType \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private ObservablePerson observableUser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Person defaultUser \u003d new Person(new DisplayPicture(\"/images/Duke.png\"), new Name(\"Default name\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \"Default description\", new Phone(\"000\"), new Email(\"000@gmail.com\"), new Github(\"000\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \"Default university\", \"Default major\", new Time(\"12-9999\"), new Time(\"12-9999\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                0.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        observableUser \u003d new ObservablePerson(defaultUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        itemsToDisplay \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        internships \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        projects \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        skills \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumes \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        notesToDisplay \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        notes \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBook() {}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Creates an ResumeBook using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBook(ReadOnlyResumeBook toBeCopied) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Replace display list \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list with {@code items}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItemsToDisplay(List\u003cItem\u003e itemsToDisplay) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.itemsToDisplay.setItems(itemsToDisplay);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sets the currently displayed list based on the given keyword."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setItemsToDisplay(String type) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            setInternshipToDisplay();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            setProjectToDisplay();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            setSkillToDisplay();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            setResumeToDisplay();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the item type of the currently displayed list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getDisplayType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return displayType;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the internship list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternshipToDisplay() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        displayType \u003d ItemUtil.INTERNSHIP_ALIAS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setItemsToDisplay(internships.getItemList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the project list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProjectToDisplay() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        displayType \u003d ItemUtil.PROJECT_ALIAS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setItemsToDisplay(projects.getItemList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the skill list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkillToDisplay() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        displayType \u003d ItemUtil.SKILL_ALIAS;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setItemsToDisplay(skills.getItemList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the item list to the content of the resume list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeToDisplay() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        displayType \u003d ItemUtil.RESUME_ALIAS;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setItemsToDisplay(resumes.getItemList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Overwrite data \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the user profile detail with that of {@code person}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setUser(Person user) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Method\u0027s name is setPerson so it is consistent with the Observable class name."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.observableUser.setPerson(user);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the internship list with {@code internships}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code internships} must not contain duplicate items."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setInternships(UniqueItemList\u003cInternship\u003e internships) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.internships.setItems(internships);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the project list with {@code projects}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code projects} must not contain duplicate items."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setProjects(UniqueItemList\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.projects.setItems(projects);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the skill list with {@code skills}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code skills} must not contain duplicate items."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setSkills(UniqueItemList\u003cSkill\u003e skills) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.skills.setItems(skills);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of the resume list with {@code resumes}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code resumes} must not contain duplicate items."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setResumes(UniqueItemList\u003cResume\u003e resumes) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumes.setItems(resumes);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Replaces the contents of the note list with {@code notes}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * {@code notes} must not contain duplicate items."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private void setNotes(UniqueItemList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.notes.setItems(notes);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setNotesToDisplay();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Resets the existing data of this {@code ResumeBook} with {@code newData}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData(ReadOnlyResumeBook newData) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setUser(newData.getUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setInternships(newData.getInternshipList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setProjects(newData.getProjectList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setSkills(newData.getSkillList());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setResumes(newData.getResumeList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        setNotes(newData.getNoteList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        setItemsToDisplay(((ResumeBook) newData).getDisplayType());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Internships \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if an internship with the same identity as {@code internship} exists in the resume book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasInternship(Internship internship) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internships.contains(internship);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds an internship to the resume book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The internship must not already exist in the resume book."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(internship);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internships.add(internship);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given internship {@code target} in the list with {@code editedInternship}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedInternship} must not be the same as another existing internship in the resume book."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setInternship(Internship target, Internship editedInternship) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internships.setItem(target, editedInternship);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteInternship(Internship key) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int id \u003d key.getId();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internships.remove(key);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : resumes) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d (Resume) item;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Resume newResume \u003d new Resume(resume.getName(), resume.getId(), resume.getTags());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            List\u003cInteger\u003e newInternshipList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            newInternshipList.addAll(resume.getInternshipIds());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setInternshipIds(newInternshipList);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setProjectIds(resume.getProjectIds());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setSkillIds(resume.getSkillIds());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.getInternshipIds().remove(Integer.valueOf(id));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            setResume(resume, newResume);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Internship getInternshipByIndex(Index index) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return internships.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cInternship\u003e getInternshipsByTag(Tag tag) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return internships"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .getItemList()"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .distinct()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .filter(x -\u003e x.hasTag(tag))"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .map(x -\u003e (Internship) x)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortInternships(Comparator\u003cInternship\u003e sortComparator) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        internships.sort(sortComparator);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasInternshipId(int id) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Internship item : internships) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (item.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Internship getInternshipById(int id) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return internships.getById(id);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getInternshipSize() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internships.getSize();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Projects \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a project with the same identity as {@code project} exists in the resume book."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return projects.contains(project);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a project to the resume book."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The project must not already exist in the resume book."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        projects.add(project);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given project {@code target} in the list with {@code editedProject}."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedProject} must not be the same as another existing project in the resume book."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        projects.setItem(target, editedProject);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteProject(Project key) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int id \u003d key.getId();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        projects.remove(key);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : resumes) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d (Resume) item;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Resume newResume \u003d new Resume(resume.getName(), resume.getId(), resume.getTags());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            List\u003cInteger\u003e newProjectList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            newProjectList.addAll(resume.getProjectIds());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setInternshipIds(resume.getInternshipIds());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setProjectIds(newProjectList);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setSkillIds(resume.getSkillIds());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.getProjectIds().remove(Integer.valueOf(id));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            setResume(resume, newResume);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Project getProjectByIndex(Index index) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return projects.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cProject\u003e getProjectsByTag(Tag tag) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return projects"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .getItemList()"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .distinct()"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .filter(x -\u003e x.hasTag(tag))"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .map(x -\u003e (Project) x)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortProjects(Comparator\u003cProject\u003e sortComparator) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        projects.sort(sortComparator);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasProjectId(int id) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Project item : projects) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (item.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Project getProjectById(int id) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return projects.getById(id);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getProjectSize() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return projects.getSize();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Skills \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a skill with the same identity as {@code skill} exists in the resume book."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkill(Skill skill) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return skills.contains(skill);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a skill to the resume book."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The skill must not already exist in the resume book."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(skill);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        skills.add(skill);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given skill {@code target} in the list with {@code editedSkill}."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedSkill} must not be the same as another existing skill in the resume book."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setSkill(Skill target, Skill editedSkill) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        skills.setItem(target, editedSkill);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteSkill(Skill key) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int id \u003d key.getId();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        skills.remove(key);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (Item item : resumes) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d (Resume) item;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Resume newResume \u003d new Resume(resume.getName(), resume.getId(), resume.getTags());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            List\u003cInteger\u003e newSkillList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            newSkillList.addAll(resume.getSkillIds());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setInternshipIds(resume.getInternshipIds());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setProjectIds(resume.getProjectIds());"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.setSkillIds(newSkillList);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            newResume.getSkillIds().remove(Integer.valueOf(id));"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            setResume(resume, newResume);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Skill getSkillByIndex(Index index) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return skills.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cSkill\u003e getSkillsByTag(Tag tag) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return skills"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .getItemList()"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .distinct()"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .filter(x -\u003e x.hasTag(tag))"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .map(x -\u003e (Skill) x)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortSkills(Comparator\u003cSkill\u003e sortComparator) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        skills.sort(sortComparator);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasSkillId(int id) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Skill item : skills) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (item.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Skill getSkillById(int id) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return skills.getById(id);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getSkillSize() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return skills.getSize();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Resumes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a resume with the same identity as {@code resume} exists in the resume book."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasResume(Resume resume) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumes.contains(resume);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds a resume to the resume book."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The resume must not already exist in the resume book."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resume);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumes.add(resume);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the given resume {@code target} in the list with {@code editedResume}."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedResume} must not be the same as another existing resume in the resume book."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResume(Resume target, Resume editedResume) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumes.setItem(target, editedResume);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Edits the resume in the resume book."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void editResume(Resume target, List\u003cInteger\u003e internshipsId, List\u003cInteger\u003e projectsId,"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                           List\u003cInteger\u003e skillsId) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        target.setInternshipIds(internshipsId);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        target.setProjectIds(projectsId);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        target.setSkillIds(skillsId);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes {@code key} from this {@code ResumeBook}."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code key} must exist in the resume book."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void deleteResume(Resume key) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumes.remove(key);"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Resume getResumeByIndex(Index index) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return resumes.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortResumes(Comparator\u003cResume\u003e sortComparator) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumes.sort(sortComparator);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean hasResumeId(int resumeIndex) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Resume item : resumes) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (item.getId() \u003d\u003d resumeIndex) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getResumeSize() {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return resumes.getSize();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Returns true if a skill with the same identity as {@code skill} exists in the resume book."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Adds a skill to the resume book."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * The skill must not already exist in the resume book."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        notes.add(note);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setNotesToDisplay();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Replaces the given skill {@code target} in the list with {@code editedSkill}."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * {@code target} must exist in the resume book."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * The identity of {@code editedSkill} must not be the same as another existing skill in the resume book."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        notes.setItem(target, editedNote);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setNotesToDisplay();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Removes {@code key} from this {@code notes}."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * {@code key} must exist in the note list."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void deleteNote(Note key) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        notes.remove(key);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        setNotesToDisplay();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Resets the list of notes in UI to be consistent with the list kept in model {@code notes}."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * This must be called after any changes made to notes!"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private void setNotesToDisplay() {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.notesToDisplay.setItems(notes.getItemList().stream().map(x -\u003e (Note) x).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note getNoteByIndex(Index index) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return notes.asUnmodifiableObservableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public int getNoteListSize() {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return notes.getSize();"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sorts the list of notes in the resume book using the provided {@code sortComparator}."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortNotes(Comparator\u003cNote\u003e sortComparator) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        notes.sort(sortComparator);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        setNotesToDisplay();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Person getUser() {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.observableUser.getInternalPerson();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Util methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the String form the item list currently on display."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return itemsToDisplay.asUnmodifiableObservableList().size() + \" items\";"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns the current list of items for display as an {@code ObservableList\u003cItem\u003e}"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ObservableList\u003cItem\u003e getItemToDisplayList() {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return itemsToDisplay.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ObservableList\u003cNote\u003e getNoteToDisplayList() {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return notesToDisplay.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public UniqueItemList\u003cInternship\u003e getInternshipList() {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internships;"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public UniqueItemList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return projects;"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public UniqueItemList\u003cSkill\u003e getSkillList() {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return skills;"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public UniqueItemList\u003cResume\u003e getResumeList() {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumes;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public UniqueItemList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ObservablePerson getObservableUser() {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return observableUser;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof ResumeBook // instanceof handles nulls"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                \u0026\u0026 observableUser.equals(((ResumeBook) other).observableUser)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 itemsToDisplay.equals(((ResumeBook) other).itemsToDisplay)"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 internships.equals(((ResumeBook) other).internships)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 projects.equals(((ResumeBook) other).projects)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 skills.equals(((ResumeBook) other).skills)"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 resumes.equals(((ResumeBook) other).resumes)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 notes.equals(((ResumeBook) other).notes));"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return itemsToDisplay.hashCode();"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 98,
      "wardetu": 108,
      "nhamhung": 75,
      "duongphammmm": 367,
      "chrisjwelly": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Path resumeBookFilePath \u003d Paths.get(\"data\" , \"resume.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        setResumeBookFilePath(newUserPrefs.getResumeBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Path getResumeBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setResumeBookFilePath(Path resumeBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(resumeBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumeBookFilePath \u003d resumeBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 resumeBookFilePath.equals(o.resumeBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Objects.hash(guiSettings, resumeBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + resumeBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "duongphammmm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedResumeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * {@code ResumeBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class VersionedResumeBook extends ResumeBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cReadOnlyResumeBook\u003e resumeBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public VersionedResumeBook(ReadOnlyResumeBook initialState) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumeBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumeBookStateList.add(new ResumeBook(initialState));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Saves a copy of the current {@code ResumeBook} state at the end of the state list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumeBookStateList.add(new ResumeBook(this));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumeBookStateList.subList(currentStatePointer + 1, resumeBookStateList.size()).clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Restores the resume book to its previous state."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            This ugly chunk is to allow the current state, aka the latest command, to let the past state know what"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            type of item it should display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            e.g. undoing a internship deletion item should result in display of internship list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Note that all states that can be redone would have had the correct display type since they have already"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            been undone."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ResumeBook currentState \u003d (ResumeBook) resumeBookStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ResumeBook pastState \u003d (ResumeBook) resumeBookStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resetData(pastState);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.setItemsToDisplay(currentState.getDisplayType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Restores the resume book to its previously undone state."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resetData(resumeBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns true if {@code undo()} has resume book states to undo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Returns true if {@code redo()} has resume book states to redo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return currentStatePointer \u003c resumeBookStateList.size() - 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!(other instanceof VersionedResumeBook)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        VersionedResumeBook otherVersionedResumeBook \u003d (VersionedResumeBook) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return super.equals(otherVersionedResumeBook)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                \u0026\u0026 resumeBookStateList.equals(otherVersionedResumeBook.resumeBookStateList)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedResumeBook.currentStatePointer;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ReadOnlyResumeBook getStatelessResumeBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.resumeBookStateList.clear();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            super(\"Current state pointer at start of resumeBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            super(\"Current state pointer at end of resumeBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "wardetu": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Internship.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Internship item."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Internship extends Item {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Internship(Name name, String role, Time from, Time to, String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, role, from, to, description, tags, ItemUtil.yieldId(ItemUtil.INTERNSHIP_ALIAS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Internship(Name name, String role, Time from, Time to, String description, Set\u003cTag\u003e tags, int id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireAllNonNull(role, from, to, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(ItemUtil.INTERNSHIP_ALIAS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getRole() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.role;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Time getFrom() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.from;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Time getTo() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.to;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Role: \").append(getRole()).append(\"\\n\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getFrom()).append(\" - \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getTo());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if both internships have the same name, role, from and to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean isSame(Item otherInternship) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return super.isSame(otherInternship)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 ((Internship) otherInternship).getRole().equals(getRole())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 ((Internship) otherInternship).getFrom().equals(getFrom())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 ((Internship) otherInternship).getTo().equals(getTo());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Gets the string representation of Internship to preview."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return String representation of Internship"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String toPreview() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        builder.append(\"Company: \").append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Role: \").append(getRole()).append(\"\\n\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"From: \").append(getFrom()).append(\" - \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"To: \").append(getTo()).append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Arrays.stream(getDescription().split(\"\\\\.\")).map(x -\u003e \"- \" + x.trim() + \".\\n\").forEach(builder::append);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Company: \").append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getSummary()).append(\"\\n\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof Internship // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getName().equals(((Internship) other).getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 role.equals(((Internship) other).role) // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 from.equals(((Internship) other).from)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 to.equals(((Internship) other).to)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 description.equals(((Internship) other).description))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 getTags().equals(((Internship) other).getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 15,
      "wardetu": 67,
      "duongphammmm": 18,
      "chrisjwelly": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Item.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an Item in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public abstract class Item {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"You are required to specify an item type! For example: i/ res\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Item-level fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected Type type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected final int id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Index refers to the position of the item in an item list. id is unique identifier for the item"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Item(Name name, int id, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.index \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Item(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, 0, tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public abstract String getSummary();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setIndex(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if both items have the same name and are of the same type."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean isSame(Item otherItem) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 otherItem.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 otherItem.getType().getFullType().equals(getType().getFullType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns true if itemType matches any of the known item types."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param itemType The itemType String."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return true if the itemType matches any of the known item types."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static boolean isValidItemType(String itemType) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String[] correctFormats \u003d new String[] {\"int\", \"proj\", \"ski\", \"res\", \"note\"};"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        for (String correctFormat: correctFormats) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            if (itemType.equals(correctFormat)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if both items have the same identity."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return otherItem.getId() \u003d\u003d getId();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Objects.hash(id, name, tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Tags: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 15,
      "wardetu": 9,
      "nhamhung": 1,
      "duongphammmm": 97,
      "chrisjwelly": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Represents a Note."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class Note extends Item {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note(Name name, Time time, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this(name, time, false, tags, ItemUtil.yieldId(ItemUtil.NOTE_ALIAS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Constructor for Note."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param isDone"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note(Name name, Time time, boolean isDone, Set\u003cTag\u003e tags, int id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireAllNonNull(time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.type \u003d Type.generate(ItemUtil.NOTE_ALIAS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String isDoneToString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return isDone() ? \"Done!\" : \"Not Done :(\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Defensive programming."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note toCopy() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new Note(getName(), getTime(), isDone(), getTags(), getId());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        builder.append(\"Note: \").append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(getTime()).append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getName().equals(((Note) other).getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 time.equals(((Note) other).time)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 isDone \u003d\u003d (((Note) other).isDone)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 getTags().equals(((Note) other).getTags()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return Objects.hash(time);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean isSame(Item otherNote) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return super.isSame(otherNote)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 ((Note) otherNote).getTime().equals(getTime())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 ((Note) otherNote).isDone() \u003d\u003d isDone();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        builder.append(\"Title: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(getName() + \"\\n\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"Time: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(getTime() + \"\\n\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"Status: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(isDoneToString() + \"\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/ObservablePerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * A wrapper class for the person contained in the resume book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ObservablePerson extends Observable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Person internalPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ObservablePerson(Person person) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.internalPerson \u003d person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setPerson(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.internalPerson \u003d person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.setChanged();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Triggers all the observers"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.notifyObservers();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Person getInternalPerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return internalPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            || (other instanceof ObservablePerson"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            \u0026\u0026 ((ObservablePerson) other).getInternalPerson().equals(this.internalPerson));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final DisplayPicture displayPicture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Github github;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String university;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Time from;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final Time to;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final double cap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Person(DisplayPicture displayPicture, Name name, String description, Phone phone, Email email,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  Github github, String university, String major, Time from, Time to, double cap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.displayPicture \u003d displayPicture;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.github \u003d github;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.university \u003d university;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.cap \u003d cap;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public DisplayPicture getDisplayPicture() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return displayPicture;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Github getGithub() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return github;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getUniversity() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return university;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String getMajor() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Time getFrom() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Time getTo() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Gets the string representation of Person to preview."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return String representation of person"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String toPreview() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        builder.append(\"Name: \").append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"Description: \").append(getDescription()).append(\"\\n\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Phone: \").append(getPhone()).append(\" | \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Email: \").append(getEmail()).append(\" | \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Github: \").append(getGithub()).append(\"\\n\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"University: \").append(getUniversity()).append(\" | \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Graduating in: \").append(getTo()).append(\"\\n\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Major: \").append(getMajor()).append(\" | \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"CAP: \").append(getCap());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        builder.append(\"DP: \" + getDisplayPicture()).append(\"\\n\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"Name: \" + getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"Description: \" + getDescription()).append(\"\\n\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"Phone: \" + getPhone()).append(\" | \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"Email: \" + getEmail()).append(\" | \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"GitHub: \" + getGithub()).append(\"\\n\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"University: \" + getUniversity()).append(\" | \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"From: \" + getFrom()).append(\" - \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .append(\"To: \" + getTo()).append(\"\\n\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"Major: \").append(getMajor()).append(\" | \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\"CAP: \").append(getCap());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof Person // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 name.equals(((Person) other).name)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 description.equals(((Person) other).description)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 phone.equals(((Person) other).phone)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 email.equals(((Person) other).email)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 github.equals(((Person) other).github)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 university.equals(((Person) other).university)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 from.equals(((Person) other).from)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 to.equals(((Person) other).to)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 major.equals(((Person) other).major)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 displayPicture.equals(((Person) other).displayPicture)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 cap \u003d\u003d ((Person) other).cap);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 33,
      "nhamhung": 26,
      "duongphammmm": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Project.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Project item."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Project extends Item {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Website website;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Project(Name name, Time time, Website website, String description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, time, website, description, tags, ItemUtil.yieldId(ItemUtil.PROJECT_ALIAS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Project(Name name, Time time, Website website, String description, Set\u003cTag\u003e tags, int id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireAllNonNull(time, website, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(ItemUtil.PROJECT_ALIAS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Website getWebsite() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.website;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        builder.append(\"Time: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Gets the string representation of Project to preview."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return String representation of project"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String toPreview() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        builder.append(\"Name: \").append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Website: \").append(getWebsite()).append(\" \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Time: \").append(getTime()).append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Arrays.stream(getDescription().split(\"\\\\.\")).map(x -\u003e \"- \" + x.trim() + \".\\n\").forEach(builder::append);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Project: \").append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getSummary()).append(\"\\n\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getWebsite()).append(\"\\n\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if both projects have the same name, time and website."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean isSame(Item otherProject) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return super.isSame(otherProject)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 ((Project) otherProject).getTime().equals(getTime())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 ((Project) otherProject).getWebsite().equals(getWebsite());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof Project // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getName().equals(((Project) other).getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 time.equals(((Project) other).time) // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 website.equals(((Project) other).website) // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 description.equals(((Project) other).description)) // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getTags().equals(((Project) other).getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 22,
      "wardetu": 63,
      "duongphammmm": 9,
      "chrisjwelly": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Resume.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Resume item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Resume extends Item {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Item-level fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cInteger\u003e internshipIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cInteger\u003e projectIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cInteger\u003e skillIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, ItemUtil.yieldId(ItemUtil.RESUME_ALIAS), tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume(Name name, int id, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(ItemUtil.RESUME_ALIAS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // TODO: change Resume constructor to take in existing lists of internships, projects or skills"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void addInternshipId(int value) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        internshipIds.add(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setInternshipIds(List\u003cInteger\u003e internshipIds) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.internshipIds \u003d internshipIds;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cInteger\u003e getInternshipIds() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this.internshipIds;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void addProjectId(int value) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        projectIds.add(value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cInteger\u003e getProjectIds() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this.projectIds;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setProjectIds(List\u003cInteger\u003e projectIds) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.projectIds \u003d projectIds;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void addSkillId(int value) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        skillIds.add(value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cInteger\u003e getSkillIds() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this.skillIds;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setSkillIds(List\u003cInteger\u003e skillIds) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.skillIds \u003d skillIds;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        builder.append(getInternshipIds().size())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\" internship(s), \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .append(getProjectIds().size())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(\" project(s), \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .append(getSkillIds().size())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(\" skill(s).\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Resume: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .append(getSummary());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                || (other instanceof Resume // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u0026\u0026 getName().equals(((Resume) other).getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getTags().equals(((Resume) other).getTags()))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 this.internshipIds.equals(((Resume) other).internshipIds)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 this.projectIds.equals(((Resume) other).projectIds)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 this.skillIds.equals(((Resume) other).skillIds);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 7,
      "wardetu": 52,
      "duongphammmm": 13,
      "chrisjwelly": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/Skill.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * The Skill item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Skill extends Item {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Skill(Name name, Level level, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this(name, level, tags, ItemUtil.yieldId(ItemUtil.SKILL_ALIAS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Skill(Name name, Level level, Set\u003cTag\u003e tags, int id) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        super(name, id, tags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(level);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.type \u003d Type.generate(ItemUtil.SKILL_ALIAS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Level getLevel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Gets the string representation of Skill to preview."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return String representation of Skill"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String toPreview() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        builder.append(\"Name: \").append(getName()).append(\"\\n\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"Level: \").append(getLevel()).append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getSummary() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(\"Level: \").append(getLevel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        builder.append(super.toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .append(getSummary());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                || (other instanceof Skill // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 getName().equals(((Skill) other).getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \u0026\u0026 level.getLevelCode() \u003d\u003d ((Skill) other).level.getLevelCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 11,
      "wardetu": 44,
      "duongphammmm": 6,
      "chrisjwelly": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/UniqueItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * A list of items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * An item is considered unique by comparing using {@code Item#isSame(Item)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * items uses Item#isSame(Item) for equality so as to ensure that the item being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * unique in terms of identity in the UniqueItemList. However, the removal of an item uses Item#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * as to ensure that the item with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * @see T#isSame(T)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class UniqueItemList\u003cT extends Item\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if the list contains an equivalent item as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Refreshes the index of all items according to the position in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void refreshIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AtomicInteger count \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        internalList.forEach(x -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            x.setIndex(count.get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            count.getAndIncrement();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Adds an item to the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The item must not already exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        refreshIndex();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Gets an item by ID"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public T getById(int id) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        T item \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        for (T i: internalList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                item \u003d i;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The identity of {@code editedItem} must not be the same as another existing item in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItem(T target, T editedItem) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!target.isSame(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        refreshIndex();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns the list of Items that is represented in the internal list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return List of Items"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public List\u003cItem\u003e getItemList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return internalList.stream().map(x -\u003e (Item) x).collect(Collectors.toList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Removes the equivalent item from the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The item must exist in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new ItemNotFoundException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        refreshIndex();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItems(UniqueItemList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        refreshIndex();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * {@code items} must not contain duplicate items."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItems(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        if (!itemsAreUnique(items)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            throw new DuplicateItemException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        refreshIndex();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sorts the contents of this list using the provided {@code sortComparator}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sort(Comparator\u003cT\u003e sortComparator) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        requireNonNull(sortComparator);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        internalList.sort(sortComparator);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        refreshIndex();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof UniqueItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private boolean itemsAreUnique(List\u003cT\u003e items) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                if (items.get(i).isSame(items.get(j))) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 56,
      "wardetu": 12,
      "duongphammmm": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/DuplicateItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DuplicateItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public DuplicateItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/IncompatibleTypeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Signals that the operation involves adding an item to a list of incompatible type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class IncompatibleTypeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public IncompatibleTypeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        super(\"Operation involves incompatible type\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/exceptions/ItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an Item\u0027s description in the resume book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // TODO: Utilise this class in main codes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \" and it should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "duongphammmm": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/DisplayPicture.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * The file path to image file to display as profile picture."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class DisplayPicture {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Profile Display path has to be a valid path of the image you \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"want to display as your profile picture. Example format: /Users/nhamquochung/Desktop/test.png\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Check for a valid file path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^$|[^\\\\s].*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Construct a {@code dpPath}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param dpPath A valid file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public DisplayPicture(String dpPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        requireNonNull(dpPath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        checkArgument(isValidDisplayPicture(dpPath), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        value \u003d dpPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Return true is the dpPath is a valid file path."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static boolean isValidDisplayPicture(String dpPath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return dpPath.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                || (other instanceof DisplayPicture // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 value.equals(((DisplayPicture) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Github.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a Person\u0027s GitHub account in the resume book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGithub(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Github {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"Github usernames should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"1. May only contain alphanumeric characters or hyphens.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"2. Cannot have multiple consecutive hyphens.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"3. Cannot begin or end with a hyphen.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \"4. Maximum is 39 characters.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9\\\\d](?:[a-zA-Z0-9\\\\d]|-(?\u003d[a-zA-Z0-9\\\\d])){0,38}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code Github}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param github A valid Github username."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Github(String github) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(github);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidGithub(github), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d github;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid Github username."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidGithub(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Github // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Github) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Level.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " *  Represents a Skill proficiency level."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public enum Level {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    BASIC(1),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    INTERMEDIATE(2),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    ADVANCED(3);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"A skill level can only be basic, intermediate, or advanced.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final int levelCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Level(int levelCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.levelCode \u003d levelCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int getLevelCode() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.levelCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "duongphammmm": 18,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return this.toString().compareTo(other.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 5,
      "duongphammmm": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean test(Item item) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[0-9]{3,}$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 1,
      "duongphammmm": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Time.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents an Item\u0027s time (start/end date) in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Time implements Comparable\u003cTime\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be in the format MM-yyyy\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(1[0-2]|0[1-9])-[0-9]{4}$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param time A valid time in format MM/yyyy."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Time(String time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidTime(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Formats {@code Time} to \"MMM yyyy\" format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return formatted {@String}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        SimpleDateFormat parser \u003d new SimpleDateFormat(\"MM-yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            Date date \u003d parser.parse(this.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM yyyy\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return formatter.format(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Compares this Time object with another Time object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public int compareTo(Time other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        SimpleDateFormat parser \u003d new SimpleDateFormat(\"MM-yyyy\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Date thisTime \u003d parser.parse(this.value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Date otherTime \u003d parser.parse(other.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return thisTime.compareTo(otherTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 15,
      "duongphammmm": 66,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Type.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Represents a Item\u0027s type in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private String alias;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private Type(String alias) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.alias \u003d alias;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static Type generate(String alias) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new Type(requireNonNull(alias));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getAlias() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return alias;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public String getFullType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        switch (alias) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"res\"):"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Resume\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"ski\"):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Skill\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"int\"):"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Internship\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        case (\"proj\"):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Project\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            // TODO: better error handling"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return \"Not a valid type\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return super.equals(obj) || this.getAlias().equals(((Type) obj).getAlias());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 39,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/item/field/Website.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a Project\u0027s website in the resume book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWebsite(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class Website {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"Website link should follow certain constraints\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"^(https?:\\\\/\\\\/)?(www\\\\.)?([a-zA-Z0-9]+(-?[a-zA-Z0-9])*\\\\.)+[\\\\w]{2,}(\\\\/\\\\S*)?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code website link}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param website A valid website link."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Website(String website) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        requireNonNull(website);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        checkArgument(isValidWebsite(website), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        value \u003d website;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns true if a given string is a valid website link."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static boolean isValidWebsite(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                || (other instanceof Website // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u0026\u0026 value.equals(((Website) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric, should not have any space in \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            + \"between and it should not be blank!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ItemUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Containing utility methods for Item and its subclasses"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ItemUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String INTERNSHIP_ALIAS \u003d \"int\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String PROJECT_ALIAS \u003d \"proj\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String RESUME_ALIAS \u003d \"res\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String SKILL_ALIAS \u003d \"ski\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String NOTE_ALIAS \u003d \"note\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final Person DEFAULT_USER \u003d new Person(new DisplayPicture(\"/images/Duke.png\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            new Name(\"Your Name\"), \"Your Description\", new Phone(\"000\"), new Email(\"youremail@gmail.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            new Github(\"yourgithub\"), \"Your University\", \"Your Major\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            new Time(\"12-9999\"), new Time(\"12-9999\"), 0.0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private static TreeMap\u003cString, Integer\u003e idGenerator \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Generates an id value for the given item type. Increments the stored value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param itemType a String representation of the item type"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @return a non negative integer id value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static int yieldId(String itemType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (idGenerator.containsKey(itemType)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            int value \u003d idGenerator.get(itemType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            idGenerator.put(itemType, value + 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            idGenerator.put(itemType, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Sets the base id value mapped from the given item type to the given value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param itemType a String representation of the given item type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param value a non negative integer id value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static void setBaseIdOfItemType(String itemType, int value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (value \u003c 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalArgumentException(\"The id value cannot be negative.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            idGenerator.put(itemType, value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 45,
      "nhamhung": 3,
      "duongphammmm": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static Resume[] getSampleResumes() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new Resume[] {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            new Resume(new Name(\"Resume 1\"), getTagSet(\"SE\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            new Resume(new Name(\"Resume 2\"), getTagSet(\"UI\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static ReadOnlyResumeBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook sampleAb \u003d new ResumeBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Resume sampleResume : getSampleResumes()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            sampleAb.addResume(sampleResume);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "duongphammmm": 11,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Represents a storage for {@link ResumeBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyResumeBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Optional\u003cReadOnlyResumeBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Saves the given {@link ReadOnlyResumeBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyResumeBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "duongphammmm": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInternship.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Internship}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedInternship {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Internship\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String to;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String role;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedInternship} with the given details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedInternship(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"from\") String from, @JsonProperty(\"to\") String to,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"role\") String role, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Internship} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedInternship(Internship internship) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d internship.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d String.valueOf(internship.getId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d internship.getFrom().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d internship.getTo().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.role \u003d internship.getRole();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d internship.getDescription();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(internship.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Internship} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Internship toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"role\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (from \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Time.isValidTime(from)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Time modelFrom \u003d new Time(from);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (to \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Time.isValidTime(to)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Time modelTo \u003d new Time(to);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Enforces that to does not precede from"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelTo.compareTo(modelFrom) \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The \\\"to\\\" field must not precede the \\\"from\\\" field.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final int modelId;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field can only be an integer.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelId \u003c 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field must not be negative.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Internship(modelName, role, modelFrom, modelTo, description, Set.copyOf(tags), modelId);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class JsonAdaptedNote {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Note\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                           @JsonProperty(\"time\") String time, @JsonProperty(\"isDone\") String isDone,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                           @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public JsonAdaptedNote(Note note) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.name \u003d note.getName().fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d String.valueOf(note.getId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.time \u003d note.getTime().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.isDone \u003d String.valueOf(note.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        tagged.addAll(note.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Convert Json Note to model-typed Note"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final boolean modelIsDone;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Workaround check to ensure the stored data is indeed either \"true\" or \"false\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (isDone.equals(String.valueOf(true)) || isDone.equals(String.valueOf(false))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelIsDone \u003d Boolean.parseBoolean(isDone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"A boolean field can only be true or false.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final int modelId;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field can only be an integer.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelId \u003c 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field must not be negative.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Note(modelName, modelTime, modelIsDone, Set.copyOf(tags), modelId);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 43,
      "nhamhung": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final String dp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String github;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String university;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final String major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String to;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String cap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"dp\") String dp, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             @JsonProperty(\"github\") String github, @JsonProperty(\"university\") String university,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             @JsonProperty(\"major\") String major, @JsonProperty(\"from\") String from,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             @JsonProperty(\"to\") String to, @JsonProperty(\"cap\") String cap) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.dp \u003d dp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.github \u003d github;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.university \u003d university;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.cap \u003d cap;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        dp \u003d source.getDisplayPicture().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        phone \u003d source.getPhone().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        email \u003d source.getEmail().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        github \u003d source.getGithub().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        university \u003d source.getUniversity();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        major \u003d source.getMajor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        from \u003d source.getFrom().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        to \u003d source.getTo().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        cap \u003d String.valueOf(source.getCap());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    // TODO: CHECK FOR UNIVERSITY AND DESCRIPTION"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (dp \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    DisplayPicture.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!DisplayPicture.isValidDisplayPicture(dp)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(DisplayPicture.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final DisplayPicture modelDisplayPicture \u003d new DisplayPicture(dp);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (github \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Github.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Github.isValidGithub(github)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Github.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Github modelGithub \u003d new Github(github);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (from \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Time.isValidTime(from)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Time modelFrom \u003d new Time(from);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (to \u003d\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Time.isValidTime(to)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Time modelTo \u003d new Time(to);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Enforces that to does not precede from"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelTo.compareTo(modelFrom) \u003c 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The \\\"to\\\" field must not precede the \\\"from\\\" field.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final double modelCap;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelCap \u003d Double.parseDouble(cap);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The cap field must be a numeric value\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelCap \u003e 5 || modelCap \u003c 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The cap value must be between 0.0 and 5.0 inclusive.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Person(modelDisplayPicture, modelName, description, modelPhone, modelEmail,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                modelGithub, university, major, modelFrom, modelTo, modelCap);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 77,
      "nhamhung": 13,
      "-": 65,
      "duongphammmm": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedProject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedProject {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String website;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                              @JsonProperty(\"time\") String time, @JsonProperty(\"website\") String website,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                              @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.website \u003d website;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Project} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedProject(Project project) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d project.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d String.valueOf(project.getId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.time \u003d project.getTime().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.website \u003d project.getWebsite().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.description \u003d project.getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(project.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Project} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (website \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Website.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Website.isValidWebsite(website)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Website.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Website modelWebsite \u003d new Website(website);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"description\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final int modelId;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field can only be an integer.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelId \u003c 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field must not be negative.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Project(modelName, modelTime, modelWebsite, description, Set.copyOf(tags), modelId);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedResume.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Resume}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedResume {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Resume\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cString\u003e containedInternshipIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cString\u003e containedProjectIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cString\u003e containedSkillIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedResume} with the given details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedResume(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"internships\") List\u003cString\u003e internshipIds,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"projects\") List\u003cString\u003e projectIds,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"skills\") List\u003cString\u003e skillIds,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (internshipIds !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            this.containedInternshipIds.addAll(internshipIds);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (projectIds !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            this.containedProjectIds.addAll(projectIds);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        if (skillIds !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            this.containedProjectIds.addAll(skillIds);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Resume} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedResume(Resume res) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d res.getName().fullName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d String.valueOf(res.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(res.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        containedInternshipIds.addAll("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                res.getInternshipIds().stream().map(String::valueOf).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        containedProjectIds.addAll("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                res.getProjectIds().stream().map(String::valueOf).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        containedSkillIds.addAll("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                res.getSkillIds().stream().map(String::valueOf).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Resume} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Resume toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final int modelId;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field can only be an integer.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelId \u003c 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field must not be negative.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Resume resume \u003d new Resume(modelName, modelId, Set.copyOf(tags));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            for (String internship : containedInternshipIds) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                resume.addInternshipId(Integer.parseInt(internship));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            for (String project : containedProjectIds) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                resume.addProjectId(Integer.parseInt(project));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            for (String skill : containedSkillIds) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                resume.addSkillId(Integer.parseInt(skill));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field of items contained in a resume can only be integer.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resume;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 112,
      "chrisjwelly": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSkill.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Jackson-friendly version of {@link Skill}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class JsonAdaptedSkill {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Skill\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final String level;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonAdaptedSkill} with the given details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedSkill(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                 @JsonProperty(\"level\") String level, @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            this.tagged.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code Skill} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonAdaptedSkill(Skill skill) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.name \u003d skill.getName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.id \u003d String.valueOf(skill.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.level \u003d skill.getLevel().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        tagged.addAll(skill.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Skill} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Skill toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            tags.add(tag.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (level \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"level\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Level modelLevel;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelLevel \u003d Level.valueOf(level);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(Level.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        final int modelId;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            modelId \u003d Integer.parseInt(id);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field can only be an integer.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        if (modelId \u003c 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            throw new IllegalValueException(\"The id field must not be negative.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return new Skill(modelName, modelLevel, Set.copyOf(tags), modelId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Optional\u003cJsonSerializableResumeBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                filePath, JsonSerializableResumeBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyResumeBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableResumeBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 9,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableResumeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "@JsonRootName(value \u003d \"resumebook\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "class JsonSerializableResumeBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RESUME \u003d \"Resumes list contains duplicate resume(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d \"Internships list contains duplicate internship(s).\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Projects list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SKILL \u003d \"Skills list contains duplicate skill(s).\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"Notes list contains duplicate note(s).\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final JsonAdaptedPerson user;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedResume\u003e resumes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Constructs a {@code JsonSerializableResumeBook} with the given persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public JsonSerializableResumeBook(@JsonProperty(\"user\") JsonAdaptedPerson user,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"resumes\") List\u003cJsonAdaptedResume\u003e resumes,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"internships\") List\u003cJsonAdaptedInternship\u003e internships,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"skills\") List\u003cJsonAdaptedSkill\u003e skills,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                      @JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                                      @JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.resumes.addAll(resumes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.skills.addAll(skills);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableResumeBook}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public JsonSerializableResumeBook(ReadOnlyResumeBook source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        user \u003d new JsonAdaptedPerson(source.getUser());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        resumes.addAll(source"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getResumeList()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedResume::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        internships.addAll(source"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getInternshipList()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedInternship::new)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        skills.addAll(source"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getSkillList()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedSkill::new)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        projects.addAll(source"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .getProjectList()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .map(JsonAdaptedProject::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        notes.addAll(source"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               .getNoteList()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .map(JsonAdaptedNote::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ResumeBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook resumeBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Person person \u003d user.toModelType();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setUser(person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        /* To initialize"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        int maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedResume jsonAdaptedResume : resumes) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Resume resume \u003d jsonAdaptedResume.toModelType();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (resumeBook.hasResume(resume)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RESUME);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resumeBook.addResume(resume);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, resume.getId());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"res\", maxIdValue + 1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedInternship jsonAdaptedInternship : internships) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Internship internship \u003d jsonAdaptedInternship.toModelType();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (resumeBook.hasInternship(internship)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resumeBook.addInternship(internship);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, internship.getId());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"int\", maxIdValue + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (resumeBook.hasProject(project)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resumeBook.addProject(project);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, project.getId());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"proj\", maxIdValue + 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedSkill jsonAdaptedSkill : skills) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            Skill skill \u003d jsonAdaptedSkill.toModelType();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            if (resumeBook.hasSkill(skill)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SKILL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            resumeBook.addSkill(skill);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, skill.getId());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"ski\", maxIdValue + 1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        maxIdValue \u003d -1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (JsonAdaptedNote jsonAdaptedNote : notes) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            Note note \u003d jsonAdaptedNote.toModelType();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (resumeBook.hasNote(note)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            resumeBook.addNote(note);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            maxIdValue \u003d Math.max(maxIdValue, note.getId());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"note\", maxIdValue + 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return resumeBook;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 141,
      "nhamhung": 16,
      "duongphammmm": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public Optional\u003cReadOnlyResumeBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "duongphammmm": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f10-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide for more details: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Label helpHeader;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Label userGuideLink;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private TextArea helpText;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Sets the content of the {@code TextArea} to {@code text}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * @param text the content to be set."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String[] headerAndText \u003d text.split(\"\\n\", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        helpHeader.setText(headerAndText[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userGuideLink.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        helpText.setText(headerAndText[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "duongphammmm": 20,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class ItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"ItemCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public final Item item;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private HBox itemPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label summary;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ItemCard(Item item, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        name.setText(item.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        summary.setText(item.getSummary());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        item.getTags().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!(other instanceof ItemCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        ItemCard card \u003d (ItemCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 14,
      "-": 54,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemDisplayList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class ItemDisplayList extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"ItemDisplayList.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItemDisplayList.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ListView\u003cString\u003e itemDisplayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ItemDisplayList(ObservableList\u003cString\u003e itemList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemDisplayList.setItems(itemList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemDisplayList.setCellFactory(lst -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            new ListCell\u003c\u003e() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                protected void updateItem(String item, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    super.updateItem(item, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    if (empty) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        setPrefHeight(45.0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        setText(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        setPrefHeight(50);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        setText(item);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void updateDisplayItem(String[] strings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        itemDisplayList.setItems(FXCollections.observableArrayList(strings));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                setGraphic(new ItemCard(item, item.getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 6,
      "wardetu": 1,
      "nhamhung": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItemListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class ItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"ItemListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItemListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ListView\u003cItem\u003e itemListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Label internshipLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Label resumeLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Label skillLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Label projectLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Label current;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ItemListPanel(ObservableList\u003cItem\u003e itemList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemListView.setItems(itemList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        current \u003d internshipLabel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    class ItemListViewCell extends ListCell\u003cItem\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        protected void updateItem(Item item, boolean empty) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                setGraphic(new ItemCard(item, item.getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets the UI according to the list shown."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param displayType String representation of type displayed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void changeStyle(String displayType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        current.getStyleClass().remove(\"typeSelected\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        current.getStyleClass().add(\"typeNotSelected\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        switch(displayType) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        case ItemUtil.INTERNSHIP_ALIAS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            internshipLabel.getStyleClass().remove(\"typeNotSelected\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            internshipLabel.getStyleClass().add(\"typeSelected\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            current \u003d internshipLabel;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        case ItemUtil.RESUME_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            resumeLabel.getStyleClass().remove(\"typeNotSelected\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            resumeLabel.getStyleClass().add(\"typeSelected\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            current \u003d resumeLabel;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        case ItemUtil.SKILL_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            skillLabel.getStyleClass().remove(\"typeNotSelected\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            skillLabel.getStyleClass().add(\"typeSelected\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            current \u003d skillLabel;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        case ItemUtil.PROJECT_ALIAS:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            projectLabel.getStyleClass().remove(\"typeNotSelected\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            projectLabel.getStyleClass().add(\"typeSelected\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            current \u003d projectLabel;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 52,
      "nhamhung": 11,
      "-": 32,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.note.NoteListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.personbio.UserOverallPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ItemListPanel itemListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private PreviewWindow previewWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private UserOverallPane userOverallPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ItemDisplayList itemDisplayList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ObservableList\u003cString\u003e observableItemList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private NoteListPanel noteListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private StackPane itemDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private StackPane profilePlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private StackPane testPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private StackPane notePlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        previewWindow \u003d new PreviewWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        itemListPanel \u003d new ItemListPanel(logic.getFilteredItemList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(itemListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        userOverallPane \u003d new UserOverallPane(logic.getObservableUser());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        profilePlaceholder.getChildren().add(userOverallPane.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        noteListPanel \u003d new NoteListPanel(logic.getFilteredNoteEntryList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        notePlaceholder.getChildren().add(noteListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        itemDisplayList \u003d new ItemDisplayList(FXCollections.observableArrayList(new String[0]));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        itemDisplayPlaceholder.getChildren().add(itemDisplayList.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getResumeBookFilePath());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void handlePreview() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (!previewWindow.isShowing()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            previewWindow.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            previewWindow.focus();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        previewWindow.hide();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ItemListPanel getItemListPanel() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return itemListPanel;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            logger.info(\"Item Display: \" + commandResult.getDataToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            itemListPanel.changeStyle(commandResult.getDisplayType());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (commandResult.hasItemChanged()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                itemDisplayList.updateDisplayItem(commandResult.getDataToUser().split(\"\\n\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            if (commandResult.isShowPreview()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                previewWindow.setPreviewText(commandResult.getDataToUser());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                handlePreview();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                HelpCommandResult helpCommandResult \u003d (HelpCommandResult) commandResult;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                helpWindow.setText(helpCommandResult.getPopUpContent());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 24,
      "wardetu": 2,
      "nhamhung": 36,
      "-": 188,
      "duongphammmm": 4,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PreviewWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Controller for a preview page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class PreviewWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PreviewWindow.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static final String FXML \u003d \"PreviewWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Label previewHeader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private TextArea previewText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a new PreviewWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param root Stage to use as the root of the PreviewWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public PreviewWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a new PreviewWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public PreviewWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setPreviewText(String text) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String[] headerAndText \u003d text.split(\"\\n\", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        previewHeader.setText(headerAndText[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        previewText.setText(headerAndText[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Shows the preview window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        logger.fine(\"Showing resume preview page.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns true if the preview window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Hides the preview window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Focuses on the preview window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/note/NoteCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * An UI component that displays information of a {@code NoteEntry}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class NoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"NoteCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final Note note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private HBox noteCardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ImageView tickBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public NoteCard(Note note, int displayIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        id.setText(displayIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        title.setText(note.getName().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        time.setText(note.getTime().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (note.isDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            image \u003d new Image(\"/images/check-mark.png\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            image \u003d new Image(\"/images/remove.png\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        tickBox.setImage(image);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!(other instanceof NoteCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        NoteCard card \u003d (NoteCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \u0026\u0026 note.equals(card.note);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/note/NoteListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Panel containing the list of note entries."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class NoteListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"NoteListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NoteListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ListView\u003cNote\u003e noteListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public NoteListPanel(ObservableList\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        noteListView.setItems(notes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        noteListView.setCellFactory(listView -\u003e new NoteListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code NoteEntry} using a {@code NoteCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    class NoteListViewCell extends ListCell\u003cNote\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        protected void updateItem(Note note, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            if (empty || note \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                setGraphic(new NoteCard(note, note.getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/FieldDataPair.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * A class to represent the pair of field and data for each row of the personal detail table."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class FieldDataPair {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final SimpleStringProperty field;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private final SimpleStringProperty data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public FieldDataPair(String field, String data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.field \u003d new SimpleStringProperty(field);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.data \u003d new SimpleStringProperty(data);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setData(String data) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.data.set(data);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return data.get();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return field.get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setField(String field) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.field.set(field);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/UserDetailPane.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Table to display all personal details"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class UserDetailPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"UserDetailPane.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final List\u003cString\u003e LABELS \u003d new ArrayList\u003c\u003e(List.of(\"Name:\", \"Phone:\", \"Email:\", \"GitHub:\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"University:\", \"Major:\", \"From:\", \"To:\", \"CAP:\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ObservableList\u003cFieldDataPair\u003e list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private TableView\u003cFieldDataPair\u003e tableView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private TableColumn\u003cString, String\u003e field;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private TableColumn\u003cString, String\u003e data;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Constructs a personal detail pane with a complete user profile."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param github"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param university"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param major"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param cap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public UserDetailPane(String name, String phone, String email, String github, String university,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                          String major, String time, String to, String cap) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        field.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"field\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        data.setCellValueFactory(new PropertyValueFactory\u003cString, String\u003e(\"data\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cString\u003e data \u003d new ArrayList\u003c\u003e(List.of(name, phone, email, github, university, major, time, to, cap));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        Iterator\u003cString\u003e iter \u003d data.iterator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        LABELS.forEach(label -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            list.add(new FieldDataPair(label, iter.next()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        tableView.setItems(list);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 58,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/UserOverallPane.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Observable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Observer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * The entire portion that displays user\u0027s personal details"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class UserOverallPane extends UiPart\u003cRegion\u003e implements Observer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"UserOverallPane.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static String defaultProfilePicPath \u003d \"/images/Duke.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private UserProfilePane userProfile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Image profilePic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private UserDetailPane userDetail;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Person user;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String profilePicPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private HBox userProfilePlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private VBox userDetailPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Constructs the entire person pane with UserProfile and UserDetail."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public UserOverallPane(ObservablePerson person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        Hooks the Pane to the ObservablePerson object so that all changes to the person will trigger an update"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        by this object via the update method."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        person.addObserver(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        this.user \u003d person.getInternalPerson();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String dp \u003d this.user.getDisplayPicture().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String name \u003d this.user.getName().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String description \u003d this.user.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String phone \u003d this.user.getPhone().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String email \u003d this.user.getEmail().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String github \u003d this.user.getGithub().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String university \u003d this.user.getUniversity();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String major \u003d this.user.getMajor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String from \u003d this.user.getFrom().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String to \u003d this.user.getTo().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String cap \u003d String.valueOf(this.user.getCap());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        File imageFile \u003d new File(dp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (imageFile.exists()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            profilePic \u003d new Image(imageFile.toURI().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            profilePic \u003d new Image(MainApp.class.getResourceAsStream(defaultProfilePicPath));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userProfile \u003d new UserProfilePane(profilePic, name, description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userProfilePlaceholder.getChildren().add(userProfile.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userDetail \u003d new UserDetailPane(name, phone, email, github, university, major, from, to, cap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userDetailPlaceholder.getChildren().add(userDetail.getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * Update UI if there is any changes to the user profile."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     * @param updatedUser"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void updateUserProfile(Person updatedUser) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userDetailPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userProfilePlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String dp \u003d updatedUser.getDisplayPicture().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String name \u003d updatedUser.getName().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String description \u003d updatedUser.getDescription();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String phone \u003d updatedUser.getPhone().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String email \u003d updatedUser.getEmail().toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String github \u003d updatedUser.getGithub().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String university \u003d updatedUser.getUniversity();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String major \u003d updatedUser.getMajor();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String from \u003d updatedUser.getFrom().toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String to \u003d updatedUser.getTo().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        String cap \u003d String.valueOf(updatedUser.getCap());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        File imageFile \u003d new File(dp);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        if (!imageFile.exists()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            profilePicPath \u003d imageFile.toURI().toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            profilePic \u003d new Image(profilePicPath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userDetailPlaceholder.getChildren().add(new UserDetailPane(name, phone, email, github, university,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                major, from, to, cap).getRoot());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        UserProfilePane userProfilePane \u003d new UserProfilePane(profilePic, name, description);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        userProfilePlaceholder.getChildren().add(userProfilePane.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void update(Observable observable, Object o) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ObservablePerson observablePerson \u003d (ObservablePerson) observable;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        updateUserProfile(observablePerson.getInternalPerson());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 17,
      "nhamhung": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/personbio/UserProfilePane.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.ui.personbio;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " * Ui for user profile with user picture, name and description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class UserProfilePane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private static final String FXML \u003d \"UserProfilePane.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private ImageView profilePicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public UserProfilePane(Image profilePic, String userName, String userDescription) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.profilePicture.setImage(profilePic);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.name.setText(userName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        this.description.setText(userDescription);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 32
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "\u003cfx:root minHeight\u003d\"800\" minWidth\u003d\"1000\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" resizable\u003d\"false\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "      \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003cVBox fx:id\u003d\"HelpBox\" styleClass\u003d\"popUpBox\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003cLabel fx:id\u003d\"helpHeader\" styleClass\u003d\"popUpHeader\" text\u003d\"Header\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    \u003cLabel fx:id\u003d\"userGuideLink\" styleClass\u003d\"popUpText\" text\u003d\"Link\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" styleClass\u003d\"button\" text\u003d\"Copy\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003cTextArea fx:id\u003d\"helpText\" editable\u003d\"false\" layoutX\u003d\"10\" layoutY\u003d\"30\" styleClass\u003d\"popUpText\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                      VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "duongphammmm": 23
    }
  },
  {
    "path": "src/main/resources/view/ItemCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"itemPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cInsets left\u003d\"22.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cLabel fx:id\u003d\"summary\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$summary\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cInsets left\u003d\"22.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 5,
      "nhamhung": 13,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/ItemDisplayList.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cListView fx:id\u003d\"itemDisplayList\" stylesheets\u003d\"@ItemDisplay.css\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/ListView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 16
    }
  },
  {
    "path": "src/main/resources/view/ItemListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "  \u003cHBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003cLabel fx:id\u003d\"internshipLabel\" styleClass\u003d\"typeNotSelected\" text\u003d\"Internship\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets right\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    \u003cLabel fx:id\u003d\"skillLabel\" styleClass\u003d\"typeNotSelected\" text\u003d\"Skill\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets right\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    \u003cLabel fx:id\u003d\"projectLabel\" styleClass\u003d\"typeNotSelected\" text\u003d\"Project\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets right\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    \u003cLabel fx:id\u003d\"resumeLabel\" styleClass\u003d\"typeNotSelected\" text\u003d\"Resume\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cInsets right\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "      \u003cInsets bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "  \u003cListView fx:id\u003d\"itemListView\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 36,
      "nhamhung": 8,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cfx:root maxWidth\u003d\"1450\" minHeight\u003d\"600\" minWidth\u003d\"1000\" onCloseRequest\u003d\"#handleExit\" title\u003d\"ResuMe\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cHBox fx:id\u003d\"mainContainer\" minWidth\u003d\"700\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                  \u003cVBox fx:id\u003d\"userExperiencePlaceholder\" minWidth\u003d\"330.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"profilePlaceholder\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"notePlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                  \u003cVBox fx:id\u003d\"mainAppPlaceholder\" minWidth\u003d\"600.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cSplitPane fx:id\u003d\"userFeedback\" dividerPositions\u003d\"0.5\" minWidth\u003d\"600\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                       \u003citems\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                          \u003cVBox fx:id\u003d\"resultAndItem\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                             \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"200.0\" minWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                             \u003cStackPane fx:id\u003d\"itemDisplayPlaceholder\" minWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                     \u003cInsets bottom\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                 \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                             \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                    \u003cStackPane styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                             \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                      \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"320.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                          \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" minWidth\u003d\"300\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                       \u003c/items\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 8,
      "nhamhung": 33,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/NoteCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cHBox id\u003d\"noteCardPane\" stylesheets\u003d\"@NoteCard.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cVBox id\u003d\"indexBox\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cLabel id\u003d\"index\" fx:id\u003d\"id\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"40.0\" text\u003d\"\\\\\\$index\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cFont size\u003d\"9.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cVBox prefWidth\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003ctop\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cHBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cImageView fx:id\u003d\"tickBox\" fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cLabel fx:id\u003d\"title\" text\u003d\"\\\\\\$title\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/top\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003ccenter\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cHBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cVBox id\u003d\"box1\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cHBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                              \u003cImageView fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                 \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                 \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                 \u003cimage\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/summer.png\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                                 \u003c/image\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                              \u003cLabel id\u003d\"header\" text\u003d\"Time: \" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                              \u003cLabel id\u003d\"details\" fx:id\u003d\"time\" text\u003d\"\\\\\\$time\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                              \u003cInsets /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/center\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c!--      \u003cImageView fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e--\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c!--         \u003cimage\u003e--\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c!--            \u003cImage url\u003d\"@../../../../docs/images/notes.png\" /\u003e--\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c!--         \u003c/image\u003e--\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c!--         \u003cHBox.margin\u003e--\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c!--            \u003cInsets left\u003d\"10.0\" /\u003e--\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c!--         \u003c/HBox.margin\u003e\u003c/ImageView\u003e--\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 79
    }
  },
  {
    "path": "src/main/resources/view/NoteHelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            fx:controller\u003d\"view.NoteHelpWindow\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 14
    }
  },
  {
    "path": "src/main/resources/view/NoteListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cListView fx:id\u003d\"noteListView\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 14
    }
  },
  {
    "path": "src/main/resources/view/PreviewWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003cfx:root title\u003d\"Resume Preview\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"800\" minHeight\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \u003cVBox styleClass\u003d\"popUpBox\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u003cLabel fx:id\u003d\"previewHeader\" styleClass\u003d\"popUpHeader\" text\u003d\"Resume\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                \u003cTextArea fx:id\u003d\"previewText\" styleClass\u003d\"popUpText\" layoutX\u003d\"10\" layoutY\u003d\"30\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                          editable\u003d\"false\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 22,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xl version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/padding\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "nhamhung": 9,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/UserDetailPane.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"250.0\" minHeight\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cTableView fx:id\u003d\"tableView\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"field\" maxWidth\u003d\"150.0\" minWidth\u003d\"80.0\" text\u003d\"Field\" reorderable\u003d\"false\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                       sortable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"data\" text\u003d\"Data\" reorderable\u003d\"false\" sortable\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "nhamhung": 19
    }
  },
  {
    "path": "src/main/resources/view/UserOverallPane.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cVBox minWidth\u003d\"340\" prefHeight\u003d\"400.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cHBox fx:id\u003d\"userProfilePlaceholder\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cString fx:value\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cString fx:value\u003d\"user\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cVBox fx:id\u003d\"userDetailPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cString fx:value\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cString fx:value\u003d\"user\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 29
    }
  },
  {
    "path": "src/main/resources/view/UserProfilePane.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cImageView fx:id\u003d\"profilePicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cScrollPane fitToWidth\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003cVBox maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"name\" lineSpacing\u003d\"5.0\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"description\" lineSpacing\u003d\"5.0\" maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                         text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final Index fifthItemIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(fifthItemIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(fifthItemIndex.equals(fifthItemIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(fifthItemIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(fifthItemIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(fifthItemIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "duongphammmm": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "//import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "//import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "//import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.testutil.PersonalDetailBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item expectedItem \u003d new PersonalDetailBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.addPersonalDetail(expectedItem);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        public void saveAddressBook(ReadOnlyResumeBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "wardetu": 155,
      "-": 4,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddProjectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddResumeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddSkillCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.AddCommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalInternship;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalNote;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalProject;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResume;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalSkill;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL_WITHOUT_GOOGLE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBookCopy \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL_WITHOUT_GOOGLE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(resumeBook, new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel \u003d new ModelManager(resumeBookCopy, new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_newInternship_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validInternship \u003d TypicalInternship.GOOGLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.addInternship(validInternship);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setInternshipToDisplay();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new AddInternshipCommand(validInternship),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddCommandResult(validInternship.toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(AddInternshipCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                validInternship.getType().getFullType()), ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateInternship_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validInternship \u003d TypicalInternship.NINJA_VAN;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new AddInternshipCommand(validInternship),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(AddCommand.MESSAGE_DUPLICATE_ITEM));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_newNote_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note validNote \u003d TypicalNote.FINISH_HOMEWORK;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.addNote(validNote);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new AddNoteCommand(validNote),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddCommandResult(validNote.toString(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        AddNoteCommand.MESSAGE_SUCCESS, ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateNote_throwsCommandException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note validNote \u003d TypicalNote.FINISH_CS_2103;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new AddNoteCommand(validNote),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(AddNoteCommand.MESSAGE_DUPLICATE_ERROR));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_newResume_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validResume \u003d TypicalResume.SE_RESUME;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.addResume(validResume);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setResumeToDisplay();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new AddResumeCommand(validResume),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddCommandResult(validResume.toString(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(AddResumeCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                validResume.getType().getFullType()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ItemUtil.RESUME_ALIAS),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateResume_throwsCommandException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validResume \u003d TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new AddResumeCommand(validResume),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(AddCommand.MESSAGE_DUPLICATE_ITEM));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_newSkill_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validSkill \u003d TypicalSkill.GIT;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.addSkill(validSkill);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setSkillToDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new AddSkillCommand(validSkill),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddCommandResult(validSkill.toString(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(AddSkillCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                validSkill.getType().getFullType()),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ItemUtil.SKILL_ALIAS),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateSkill_throwsCommandException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validSkill \u003d TypicalSkill.REACT;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new AddSkillCommand(validSkill),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(AddCommand.MESSAGE_DUPLICATE_ITEM));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_newProject_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validProject \u003d TypicalProject.DUKE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.addProject(validProject);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setProjectToDisplay();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new AddProjectCommand(validProject),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddCommandResult(validProject.toString(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(AddProjectCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                validProject.getType().getFullType()),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ItemUtil.PROJECT_ALIAS),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validProject \u003d TypicalProject.ORBITAL;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new AddProjectCommand(validProject),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(AddCommand.MESSAGE_DUPLICATE_ITEM));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddCommand validInternship \u003d new AddInternshipCommand(TypicalInternship.GOOGLE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddCommand validProject \u003d new AddProjectCommand(TypicalProject.ORBITAL);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddCommand validResume \u003d new AddResumeCommand(TypicalResume.ME_RESUME);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddCommand validSkill \u003d new AddSkillCommand(TypicalSkill.REACT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddCommand validNote \u003d new AddNoteCommand(TypicalNote.FINISH_CS_2103);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validInternship, validNote);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validInternship, validProject);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validInternship, validResume);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validInternship, validSkill);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validNote, validProject);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validNote, validResume);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validNote, validSkill);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validProject, validResume);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validProject, validSkill);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(validResume, validSkill);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 143,
      "-": 36,
      "duongphammmm": 8,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.ClearCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Model model \u003d new ModelManager(new ResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ClearCommand(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ClearCommandResult(\" \","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ClearCommand.MESSAGE_SUCCESS, model.getDisplayType()),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Model model \u003d new ModelManager(new ResumeBookBuilder(TypicalResumeBook.TYPICAL_WITHOUT_GOOGLE).build(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ResumeBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ClearCommand(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ClearCommandResult(\" \","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ClearCommand.MESSAGE_SUCCESS, model.getDisplayType()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 16,
      "-": 21,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": " /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"\", \"feedback\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"\", \"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"\", \"feedback\", false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"\", \"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"\", \"feedback\", true, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"\", \"feedback\", false, true)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"\", \"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"\", \"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"\", \"different\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"\", \"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"\", \"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 11,
      "wardetu": 2,
      "-": 41,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    // RESUME"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_RESUME_NAME_SE \u003d \"Software Engineering Intern Resume\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_RESUME_NAME_ME \u003d \"Mechanical Engineering Intern Resume\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_NAME_ME \u003d \" \" + PREFIX_NAME + \" \" + VALID_RESUME_NAME_ME;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String ITEM_TYPE_RESUME \u003d \" \" + PREFIX_ITEM + \" res\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_RESUME_NAME_FILLED \u003d \"An already filled Resume\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // SKILL"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_SKILL_NAME_GIT \u003d \"Git and Github\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String VALID_SKILL_NAME_REACT \u003d \"React\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_NAME_REACT \u003d \" \" + PREFIX_NAME + \" \" + VALID_SKILL_NAME_REACT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String LEVEL_BASIC \u003d \"BASIC\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String LEVEL_INTERMEDIATE \u003d \"INTERMEDIATE\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_BASIC \u003d \" \" + PREFIX_LEVEL + \" \" + LEVEL_BASIC;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_INTERMEDIATE \u003d \" \" + PREFIX_LEVEL + \" \" + LEVEL_INTERMEDIATE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String ITEM_TYPE_SKILL \u003d \" \" + PREFIX_ITEM + \" ski\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // PROJECT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String ITEM_TYPE_PROJECT \u003d \" \" + PREFIX_ITEM + \" proj\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_PROJECT_NAME_ORBITAL \u003d \"Orbital\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String VALID_PROJECT_NAME_DUKE \u003d \"Duke\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_NAME_ORBITAL \u003d \" \" + PREFIX_NAME + \" \" + VALID_PROJECT_NAME_ORBITAL;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String PREFIXED_NAME_DUKE \u003d \" \" + PREFIX_NAME + \" \" + VALID_PROJECT_NAME_DUKE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALID_TIME_1 \u003d \"06-2020\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALID_TIME_2 \u003d \"08-2018\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String PREFIXED_TIME_ORBITAL \u003d \" \" + PREFIX_TIME + \" \" + VALID_TIME_1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String PREFIXED_TIME_2 \u003d \" \" + PREFIX_TIME + \" \" + VALID_TIME_2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALID_WEBSITE_ORBITAL \u003d \"myorbital.github.io\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALID_WEBSITE_DUKE \u003d \"www.duke.org\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String PREFIXED_WEBSITE_ORBITAL \u003d \" \" + PREFIX_WEBSITE + \" \" + VALID_WEBSITE_ORBITAL;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String PREFIXED_WEBSITE_DUKE \u003d \" \" + PREFIX_WEBSITE + \" \" + VALID_WEBSITE_DUKE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALID_DESCRIPTION_ORBITAL \u003d \"My first summer project!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String VALID_DESCRIPTION_DUKE \u003d \"For a little mod named CS2103T\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String PREFIXED_DESCRIPTION_ORBITAL \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            + \" \" + VALID_DESCRIPTION_ORBITAL;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String PREFIXED_DESCRIPTION_DUKE \u003d \" \" + PREFIX_DESCRIPTION + \" \" + VALID_DESCRIPTION_DUKE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TAG_JAVA \u003d \"Java\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TAG_JAVA \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // INTERNSHIP"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String ITEM_TYPE_INTERNSHIP \u003d \" \" + PREFIX_ITEM + \" int\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_INTERNSHIP_NAME_GOOGLE \u003d \"Google\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_NAME_GOOGLE \u003d \" \" + PREFIX_NAME + \" \" + VALID_INTERNSHIP_NAME_GOOGLE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_INTERNSHIP_ROLE_FRONTEND \u003d \"Frontend Web Engineer\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String VALID_INTERNSHIP_ROLE_BACKEND \u003d \"Backend Web Engineer\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_ROLE_FRONTEND \u003d \" \" + PREFIX_ROLE + \" \" + VALID_INTERNSHIP_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_ROLE_BACKEND \u003d \" \" + PREFIX_ROLE + \" \" + VALID_INTERNSHIP_ROLE_BACKEND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_FROM \u003d \"06-2020\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String VALID_FROM_2 \u003d \"07-2020\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TO \u003d \"12-2020\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String VALID_TO_2 \u003d \"11-2020\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TIME_FROM \u003d \" \" + PREFIX_FROM + \" \" + VALID_FROM;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_TIME_FROM_2 \u003d \" \" + PREFIX_FROM + \" \" + VALID_FROM_2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TIME_TO \u003d \" \" + PREFIX_TO + \" \" + VALID_TO;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_TIME_TO_2 \u003d \" \" + PREFIX_TO + \" \" + VALID_TO_2;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_INTERNSHIP_DESCRIPTION \u003d \"I did work, I made money\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_INTERNSHIP_DESCRIPTION \u003d \" \" + PREFIX_DESCRIPTION + \" \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            + VALID_INTERNSHIP_DESCRIPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TAG_FRONTEND \u003d \"Frontend\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TAG_FRONTEND \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    // NOTES"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String ITEM_TYPE_NOTE \u003d \" \" + PREFIX_ITEM + \" note\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String PREFIXED_NAME_NOTE \u003d \" \" + PREFIX_NAME + \" Finish CS2103\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    // INVALID ITEM"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String ITEM_TYPE_INVALID \u003d \" \" + PREFIX_ITEM + \" notee\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TAGS"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TAG_TECH \u003d \"tech\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TAG_TECH \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_TECH;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TAG_BACKEND \u003d \"backend\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String PREFIXED_TAG_BACKEND \u003d \" \" + PREFIX_TAG + \" \" + VALID_TAG_BACKEND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String VALID_TAG_NONE_USAGE \u003d \"noOneUseThis\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String INVALID_FROM_DESC \u003d \" \" + PREFIX_FROM + \"123-1998\"; // Time must be of format MM-YYYY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String INVALID_TO_DESC \u003d \" \" + PREFIX_TIME + \"123-1998\"; // Time must be of format MM-YYYY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String INVALID_WEBSITE_DESC \u003d \" \" + PREFIX_WEBSITE + \"dfadsf\"; // Must match regex of websit"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String INVALID_LEVEL_DESC \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            \" \" + PREFIX_LEVEL + \"basii\"; // basic / intermediate / advanced only"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_ITEM + \"skil\"; // ski / int / res / proj only"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \" 911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \" bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            assertEquals(expectedCommandResult.getDataToUser(), result.getDataToUser());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            assertEquals(expectedCommandResult.getFeedbackToUser(), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            assertEquals(expectedModel.getStatelessResumeBook(), actualModel.getStatelessResumeBook());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedData,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                            String expectedFeedback, Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedData, expectedFeedback, \"\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandException exception) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class, exception.getMessage(), () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonalDetailList().size());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Item item \u003d model.getFilteredPersonalDetailList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        final String[] splitName \u003d item.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        model.updateFilteredPersonalDetailList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(1, model.getFilteredPersonalDetailList().size());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 43,
      "-": 99,
      "duongphammmm": 16,
      "chrisjwelly": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteInternshipCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteProjectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteResumeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteSkillCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.DeleteCommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBookBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * TODO: TEST UNDO AND REDO TOO!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DeleteCommandIntegrationTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBookCopy \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(resumeBook, new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel \u003d new ModelManager(resumeBookCopy, new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteFirstInternship_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship internshipToDelete \u003d model.getInternshipByIndex(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteInternshipCommand deleteCommand \u003d new DeleteInternshipCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Internship\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d internshipToDelete.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteInternship(internshipToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setInternshipToDisplay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.INTERNSHIP_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteSecondInternship_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship internshipToDelete \u003d model.getInternshipByIndex(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteInternshipCommand deleteCommand \u003d new DeleteInternshipCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Internship\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d internshipToDelete.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteInternship(internshipToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setInternshipToDisplay();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.INTERNSHIP_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_invalidInternshipIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getInternshipSize() + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteInternshipCommand deleteCommand \u003d new DeleteInternshipCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteFirstProject_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project projectToDelete \u003d model.getProjectByIndex(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteProjectCommand deleteCommand \u003d new DeleteProjectCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Project\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d projectToDelete.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setProjectToDisplay();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.PROJECT_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteSecondProject_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project projectToDelete \u003d model.getProjectByIndex(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteProjectCommand deleteCommand \u003d new DeleteProjectCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Project\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d projectToDelete.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteProject(projectToDelete);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setProjectToDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.PROJECT_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_invalidProjectIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getProjectSize() + 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteProjectCommand deleteCommand \u003d new DeleteProjectCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteFirstSkill_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill skillToDelete \u003d model.getSkillByIndex(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteSkillCommand deleteCommand \u003d new DeleteSkillCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Skill\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d skillToDelete.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteSkill(skillToDelete);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setSkillToDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.SKILL_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteSecondSkill_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill skillToDelete \u003d model.getSkillByIndex(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteSkillCommand deleteCommand \u003d new DeleteSkillCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Skill\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d skillToDelete.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteSkill(skillToDelete);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setSkillToDisplay();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.SKILL_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_invalidSkillIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getSkillSize() + 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteSkillCommand deleteCommand \u003d new DeleteSkillCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteFirstResume_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume resumeToDelete \u003d model.getResumeByIndex(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteResumeCommand deleteCommand \u003d new DeleteResumeCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Resume\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d resumeToDelete.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteResume(resumeToDelete);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setResumeToDisplay();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.RESUME_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_deleteSecondResume_success() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume resumeToDelete \u003d model.getResumeByIndex(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteResumeCommand deleteCommand \u003d new DeleteResumeCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedFeedback \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, \"Resume\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedData \u003d resumeToDelete.toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.deleteResume(resumeToDelete);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setResumeToDisplay();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new DeleteCommandResult(expectedData, expectedFeedback,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.RESUME_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_invalidResumeIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getResumeSize() + 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteResumeCommand deleteCommand \u003d new DeleteResumeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(deleteCommand, model, new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteCommand deleteFirstInternshipCommand \u003d new DeleteInternshipCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteCommand deleteFirstProjectCommand \u003d new DeleteProjectCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteCommand deleteFirstResumeCommand \u003d new DeleteResumeCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DeleteCommand deleteFirstSkillCommand \u003d new DeleteSkillCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(deleteFirstInternshipCommand, deleteFirstProjectCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(deleteFirstInternshipCommand, deleteFirstResumeCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(deleteFirstInternshipCommand, deleteFirstSkillCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(deleteFirstProjectCommand, deleteFirstResumeCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(deleteFirstProjectCommand, deleteFirstSkillCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(deleteFirstResumeCommand, deleteFirstSkillCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 185,
      "duongphammmm": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.DoneCommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DoneCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBookCopy \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(resumeBook, new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel \u003d new ModelManager(resumeBookCopy, new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_setNoteToDone_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note doneItem \u003d expectedModel.getNote(validIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        doneItem.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(validIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(doneCommand,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new DoneCommandResult(doneItem.toString(), DoneCommand.MESSAGE_DONE_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        model.getDisplayType()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_invalidNoteIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index invalidIndex \u003d INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(invalidIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e doneCommand.execute(model));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_setNoteAsDoneTwice_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(validIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        doneCommand.execute(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                DoneCommand.MESSAGE_DONE_FAILURE, () -\u003e doneCommand.execute(model));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DoneCommand doneOneCommand \u003d new DoneCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        DoneCommand doneFourCommand \u003d new DoneCommand(INDEX_FOURTH_ITEM);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Copy and original are equals"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(doneOneCommand, new DoneCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Done command of different indexes are not equals"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(doneOneCommand, doneFourCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 72,
      "duongphammmm": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.PersonalDetailBuilder;*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d new PersonalDetailBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedItem).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.setPersonalDetail(model.getFilteredPersonalDetailList().get(0), editedItem);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonalDetailList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item lastItem \u003d model.getFilteredPersonalDetailList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        PersonalDetailBuilder personInList \u003d new PersonalDetailBuilder(lastItem);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.setPersonalDetail(lastItem, editedItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d model.getFilteredPersonalDetailList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item itemInFilteredList \u003d model.getFilteredPersonalDetailList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item editedItem \u003d new PersonalDetailBuilder(itemInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedItem);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new ResumeBook(model.getResumeBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedModel.setPersonalDetail(model.getFilteredPersonalDetailList().get(0), editedItem);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item firstItem \u003d model.getFilteredPersonalDetailList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstItem).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Item itemInList \u003d model.getResumeBook().getPersonalDetailList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new EditPersonDescriptorBuilder(itemInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonalDetailList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResumeBook().getPersonalDetailList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 138,
      "-": 29,
      "duongphammmm": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditItemDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class EditItemDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 39,
      "-": 15,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.ExitCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new ExitCommandResult(\"Exiting\", MESSAGE_EXIT_ACKNOWLEDGEMENT, model.getDisplayType()),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "duongphammmm": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.NINJA_VAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.PAYPAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalProject.ORBITAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalResume.SE_RESUME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalSkill.REACT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.find.FindInternshipCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.find.FindProjectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.find.FindResumeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.find.FindSkillCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.FindCommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class FindCommandIntegrationTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBookCopy \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(resumeBook, new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel \u003d new ModelManager(resumeBookCopy, new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findInternship \u003d new FindInternshipCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findProject \u003d new FindProjectCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findSkill \u003d new FindSkillCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findResume \u003d new FindResumeCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(findInternship, findProject);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(findInternship, findResume);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(findInternship, findSkill);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(findProject, findResume);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(findProject, findSkill);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(findResume, findSkill);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_zeroKeywords_noInternshipFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setInternshipToDisplay();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindInternshipCommand(predicate), model,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindCommandResult(\"\", String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Internships\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                ItemUtil.INTERNSHIP_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_multipleKeywords_multipleInternshipsFound() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setInternshipToDisplay();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Van PayPal\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindInternshipCommand(predicate), model,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindCommandResult(\"\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        String.format(Messages.MESSAGE_ITEMS_LISTED, 2, \"Internships\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(NINJA_VAN, PAYPAL), model.getFilteredItemList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_zeroKeywords_noProjectFound() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setProjectToDisplay();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindProjectCommand(predicate), model,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindCommandResult(\"\", String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Projects\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        ItemUtil.PROJECT_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_singleKeyword_singleProjectFound() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setProjectToDisplay();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Orbital\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindProjectCommand(predicate), model,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindCommandResult(\"\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        String.format(Messages.MESSAGE_ITEMS_LISTED, 1, \"Projects\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        ItemUtil.PROJECT_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(ORBITAL), model.getFilteredItemList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_zeroKeywords_noSkillFound() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setSkillToDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindSkillCommand(predicate), model,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindCommandResult(\"\", String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Skills\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        ItemUtil.SKILL_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_singleKeyword_singleSkillFound() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setSkillToDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"React\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindSkillCommand(predicate), model,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindCommandResult(\"\", String.format(Messages.MESSAGE_ITEMS_LISTED, 1, \"Skills\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        ItemUtil.SKILL_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(REACT), model.getFilteredItemList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_zeroKeywords_noResumeFound() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setResumeToDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindResumeCommand(predicate), model,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindCommandResult(\"\", String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Resumes\"),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        ItemUtil.RESUME_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItemList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_singleKeyword_multipleResumesFound() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel.setResumeToDisplay();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Engineering\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model.updateFilteredItemList(predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new FindResumeCommand(predicate), model,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new CommandResult(\"\", String.format(Messages.MESSAGE_ITEMS_LISTED, 2, \"Resumes\"),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        ItemUtil.RESUME_ALIAS), expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(ME_RESUME, SE_RESUME), model.getFilteredItemList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GenerateResumeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.generate.GenerateResumeCommand.MESSAGE_GENERATE_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.generate.GenerateResumeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.SkillBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class GenerateResumeTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Internship internship \u003d new InternshipBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Skill skill \u003d new SkillBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBuilder builder \u003d new ResumeBuilder().withInternship(internship)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withProject(project).withSkill(skill);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Resume resume \u003d builder.build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GenerateResumeCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStub modelStub \u003d new GenerateResumeTest.ModelStubWithResume(user, resume);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        GenerateResumeCommand generateResumeCommand \u003d new GenerateResumeCommand(invalidIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e generateResumeCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_validIndex_generateSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Person user \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume validItem \u003d new ResumeBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStub modelStub \u003d new GenerateResumeTest.ModelStubWithResume(user, validItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toGenerate \u003d modelStub.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        GenerateResumeCommand generateResumeCommand \u003d new GenerateResumeCommand(validIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d generateResumeCommand.execute(modelStub);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(MESSAGE_GENERATE_SUCCESS, toGenerate.getName().toString(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                toGenerate.getName().toString(), modelStub.getDisplayType()), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexA \u003d Index.fromZeroBased(5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexB \u003d Index.fromOneBased(19);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        GenerateResumeCommand generateACommand \u003d new GenerateResumeCommand(indexA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        GenerateResumeCommand generateBCommand \u003d new GenerateResumeCommand(indexB);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(generateACommand.equals(generateACommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        GenerateResumeCommand generateACommandCopy \u003d new GenerateResumeCommand(indexA);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(generateACommand.equals(generateACommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(generateACommand.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(generateACommand.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(generateACommand.equals(generateBCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that contains a single user and a single Resume."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubWithResume extends ModelStub {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final Person user;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final Resume item;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubWithResume(Person user, Resume item) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireAllNonNull(user, item);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.user \u003d user;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Person getUser() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.user;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasResume(Resume item) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getResumeSize() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Resume getResumeByIndex(Index index) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasInternshipId(int id) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return id \u003d\u003d internship.getId();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Internship getInternshipById(int id) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return internship;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasProjectId(int id) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return id \u003d\u003d project.getId();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Project getProjectById(int id) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return project;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasSkillId(int id) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return id \u003d\u003d skill.getId();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Skill getSkillById(int id) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return skill;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_COMMAND_SUMMARY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.core.Messages.HELP_START;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.help.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.help.HelpStartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.help.HelpSummaryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_helpSummary_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult expectedCommandResult \u003d new HelpCommandResult(\"\", SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                model.getDisplayType(), HELP_COMMAND_SUMMARY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new HelpSummaryCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_helpStart_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult expectedCommandResult \u003d new HelpCommandResult(\"\", SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                model.getDisplayType(), HELP_START);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandSuccess(new HelpStartCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "duongphammmm": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListInternshipCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListProjectCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListResumeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListSkillCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.ListCommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListCommandIntegrationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBookCopy \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(resumeBook, new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel \u003d new ModelManager(resumeBookCopy, new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_listInternship_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setInternshipToDisplay();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ListInternshipCommand(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ListCommandResult(\"\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(ListCommand.MESSAGE_SUCCESS, \"Internship\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_listNote_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ListNoteCommand(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ListCommandResult(\"\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(ListCommand.MESSAGE_SUCCESS, \"Note\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        expectedModel.getDisplayType()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_listProject_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setProjectToDisplay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ListProjectCommand(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ListCommandResult(\"\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(ListCommand.MESSAGE_SUCCESS, \"Project\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_listResume_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setResumeToDisplay();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ListResumeCommand(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ListCommandResult(\"\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(ListCommand.MESSAGE_SUCCESS, \"Resume\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_listSkill_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setSkillToDisplay();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ListSkillCommand(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ListCommandResult(\"\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        String.format(ListCommand.MESSAGE_SUCCESS, \"Skill\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ListCommand listInternships \u003d new ListInternshipCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ListCommand listProjects \u003d new ListProjectCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ListCommand listResumes \u003d new ListResumeCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ListCommand listSkills \u003d new ListSkillCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ListCommand listNotes \u003d new ListNoteCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listInternships, listNotes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listInternships, listProjects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listInternships, listResumes);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listInternships, listSkills);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listNotes, listProjects);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listNotes, listResumes);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listNotes, listSkills);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listProjects, listResumes);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listProjects, listSkills);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(listResumes, listSkills);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 103,
      "duongphammmm": 8,
      "chrisjwelly": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ResumeEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.ItemIndicesBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalInternship;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalProject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalResume;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalSkill;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ResumeEditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(TypicalResumeBook.TYPICAL_WITH_FILLED_RESUME, new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void constructor_nullInternship_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddInternshipCommand(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidResumeIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index invalidIndex \u003d INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(invalidIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidInternshipIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().add(3).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"internship\", \"3\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidInternshipIndexWithDuplicates_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().add(3).add(3).add(3).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"internship\", \"3\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidInternshipIndexMixedWithValid_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().add(4).add(1).add(3).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"internship\", \"4 3\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidProjectIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d new ItemIndicesBuilder().add(3).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"project\", \"3\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidProjectIndexMixedWithValid_throwsCommandException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d new ItemIndicesBuilder().add(4).add(1).add(3).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"project\", \"4 3\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidSkillIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().add(3).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"skill\", \"3\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidSkillIndexMixedWithValid_throwsCommandException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d Optional.empty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().add(4).add(1).add(3).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_REDIT_ITEM_INDEX, \"skill\", \"4 3\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e resumeEditCommand.execute(model));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_allThreeItemValidIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().add(2).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d new ItemIndicesBuilder().add(2).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.NINJA_VAN)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_intAndProjValidIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().add(2).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d new ItemIndicesBuilder().add(2).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.NINJA_VAN)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_intAndSkiValidIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().add(2).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.NINJA_VAN)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_onlyProjValidIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d new ItemIndicesBuilder().add(2).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_onlySkiValidIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_removeAll_success() throws CommandException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d new ItemIndicesBuilder().build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().build();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_removeSome_success() throws CommandException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().build();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_removeSomeWhileAdding_success() throws CommandException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d new ItemIndicesBuilder().build();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d new ItemIndicesBuilder().add(1).add(2).build();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().build();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_nothingSupplied_success() throws CommandException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.GIT)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_duplicateIndices_success() throws CommandException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndices \u003d ItemIndicesBuilder.empty();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndices \u003d new ItemIndicesBuilder().add(1).add(1).add(1).build();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand resumeEditCommand \u003d new ResumeEditCommand(validIndex, internshipIndices, projectIndices,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndices);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d resumeEditCommand.execute(model);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(\"Resume is updated\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume changedResume \u003d model.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(changedResume, expectedResume);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndicesA \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndicesA \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndicesA \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e internshipIndicesB \u003d new ItemIndicesBuilder().add(2).build();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e projectIndicesB \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Optional\u003cList\u003cInteger\u003e\u003e skillIndicesB \u003d new ItemIndicesBuilder().add(1).build();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index index \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand reditACommand \u003d new ResumeEditCommand(index, internshipIndicesA, projectIndicesA,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndicesA);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand reditBCommand \u003d new ResumeEditCommand(index, internshipIndicesB, projectIndicesB,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndicesB);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(reditACommand.equals(reditACommand));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ResumeEditCommand reditACommandCopy \u003d new ResumeEditCommand(index, internshipIndicesA, projectIndicesA,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                skillIndicesA);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(reditACommand.equals(reditACommandCopy));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertFalse(reditACommand.equals(1));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertFalse(reditACommand.equals(null));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // different indices -\u003e returns false"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertFalse(reditACommand.equals(reditBCommand));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "chrisjwelly": 381
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ResumePreviewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.ResumePreviewCommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalInternship;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalProject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalSkill;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ResumePreviewCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(TypicalResumeBook.TYPICAL_WITH_FILLED_RESUME, new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_invalidResumeIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index invalidIndex \u003d INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ResumePreviewCommand resumePreviewCommand \u003d new ResumePreviewCommand(invalidIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e resumePreviewCommand.execute(model));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_emptyResume_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalResumeBook.TYPICAL_WITH_FILLED_RESUME, new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ResumePreviewCommand resumePreviewCommand \u003d new ResumePreviewCommand(validIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String data \u003d createData(model.getUser(), model.getResumeByIndex(INDEX_FIRST_ITEM), new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(resumePreviewCommand,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ResumePreviewCommandResult(data, String.format(ResumePreviewCommand.MESSAGE_SUCCESS, 1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        model.getDisplayType()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_filledResume_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalResumeBook.TYPICAL_WITH_FILLED_RESUME, new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Index validIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ResumePreviewCommand resumePreviewCommand \u003d new ResumePreviewCommand(validIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ArrayList\u003cInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        internships.add(TypicalInternship.GOOGLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ArrayList\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        projects.add(TypicalProject.ORBITAL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ArrayList\u003cSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        skills.add(TypicalSkill.GIT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String data \u003d createData(model.getUser(), model.getResumeByIndex(INDEX_THIRD_ITEM), internships,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                projects, skills);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(resumePreviewCommand,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ResumePreviewCommandResult(data, String.format(ResumePreviewCommand.MESSAGE_SUCCESS, 3),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        model.getDisplayType()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Function that mimics the createData functionality in ResumePreviewCommand."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param person details of {@code person} to preview"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param resume details of {@code resume} to preview"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param internships list of {@code internships} to preview"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param projects list of {@code projects} to preview"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param skills list of {@code skills} to preview"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return data String to be shown in preview box."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String createData("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            Person person, Resume resume, List\u003cInternship\u003e internships, List\u003cProject\u003e projects, List\u003cSkill\u003e skills) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        StringBuilder data \u003d new StringBuilder(resume.getName() + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"PERSONAL DETAILS\\n\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(person.toPreview())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\\n\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"INTERNSHIPS\\n\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        internships.forEach(internship -\u003e data.append(internship.toPreview()).append(\"\\n\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"PROJECTS\\n\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        projects.forEach(project -\u003e data.append(project.toPreview()).append(\"\\n\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        data.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"SKILLS\\n\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                .append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        skills.forEach(skill -\u003e data.append(skill.toPreview()).append(\"\\n\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return data.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 115,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagPullCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NONE_USAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalInternship;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalProject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalResume;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.TypicalSkill;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TagPullCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private String feedbackToUser \u003d \"Items pulled:\\n%1$d internship(s), %2$d project(s), %3$d skill(s).\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(TypicalResumeBook.TYPICAL_WITH_FILLED_RESUME, new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_invalidResumeIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index invalidIndex \u003d INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_TECH));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TagPullCommand tagPullCommand \u003d new TagPullCommand(invalidIndex, tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e tagPullCommand.execute(model));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_validTag_successAndAllCountsIncrease() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index firstIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index thirdIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_TECH));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedFirstResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.NINJA_VAN)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.GIT)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedThirdResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.NINJA_VAN)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.GIT) // Order matters here"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Resume at first index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResultFirstIndex \u003d new TagPullCommand(firstIndex, tags).execute(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 2, 2, 2), commandResultFirstIndex.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume firstIndexResume \u003d model.getResumeByIndex(firstIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(firstIndexResume, expectedFirstResume);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Resume at third index"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResultThirdIndex \u003d new TagPullCommand(thirdIndex, tags).execute(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 1, 1, 1), commandResultThirdIndex.getFeedbackToUser());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume thirdIndexResume \u003d model.getResumeByIndex(thirdIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(thirdIndexResume, expectedThirdResume);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_validTag_successAndOnlyOneCountIncreases() throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index index \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_FRONTEND));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.GIT) // Order matters here"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d new TagPullCommand(index, tags).execute(model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 0, 0, 1), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume resume \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(resume, expectedResume);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_validTag_successAndTwoCountsIncreases() throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index index \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_FRONTEND));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d new TagPullCommand(index, tags).execute(model);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 1, 0, 1), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume resume \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(resume, expectedResume);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_validTag_successNoCountsIncreases() throws CommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index firstIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index thirdIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_NONE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedFirstResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedThirdResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.GIT) // Order matters here"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Resume at first index"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResultFirstIndex \u003d new TagPullCommand(firstIndex, tags).execute(model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 0, 0, 0), commandResultFirstIndex.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume firstIndexResume \u003d model.getResumeByIndex(firstIndex);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(firstIndexResume, expectedFirstResume);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Resume at third index"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResultThirdIndex \u003d new TagPullCommand(thirdIndex, tags).execute(model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 0, 0, 0), commandResultThirdIndex.getFeedbackToUser());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume thirdIndexResume \u003d model.getResumeByIndex(thirdIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(thirdIndexResume, expectedThirdResume);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_validTagCalledTwice_success() throws CommandException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index index \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_TECH));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.NINJA_VAN)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.GIT)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResult \u003d new TagPullCommand(index, tags).execute(model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 2, 2, 2), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume resume \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(resume, expectedResume);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResultAgain \u003d new TagPullCommand(index, tags).execute(model);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 0, 0, 0), commandResultAgain.getFeedbackToUser());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume resumeAgain \u003d model.getResumeByIndex(index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(resumeAgain, expectedResume);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void execute_multipleTags_success() throws CommandException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index firstIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index thirdIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_JAVA));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags.add(new Tag(VALID_TAG_FRONTEND));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedFirstResume \u003d new ResumeBuilder(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume expectedThirdResume \u003d new ResumeBuilder(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.GIT) // Order matters here"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Resume at first index"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResultFirstIndex \u003d new TagPullCommand(firstIndex, tags).execute(model);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 1, 1, 1), commandResultFirstIndex.getFeedbackToUser());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume firstIndexResume \u003d model.getResumeByIndex(firstIndex);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(firstIndexResume, expectedFirstResume);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Resume at third index"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        CommandResult commandResultThirdIndex \u003d new TagPullCommand(thirdIndex, tags).execute(model);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(String.format(feedbackToUser, 0, 1, 1), commandResultThirdIndex.getFeedbackToUser());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume thirdIndexResume \u003d model.getResumeByIndex(thirdIndex);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(thirdIndexResume, expectedThirdResume);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Index index \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tagsA \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tagsA.add(new Tag(VALID_TAG_JAVA));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tagsA.add(new Tag(VALID_TAG_FRONTEND));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tagsB \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tagsA.add(new Tag(VALID_TAG_TECH));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TagPullCommand tagPullACommand \u003d new TagPullCommand(index, tagsA);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TagPullCommand tagPullBCommand \u003d new TagPullCommand(index, tagsB);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(tagPullACommand.equals(tagPullACommand));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        TagPullCommand tagPullACommandCopy \u003d new TagPullCommand(index, tagsA);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(tagPullACommand.equals(tagPullACommandCopy));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertFalse(tagPullACommand.equals(1));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertFalse(tagPullACommand.equals(null));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertFalse(tagPullACommand.equals(tagPullBCommand));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "chrisjwelly": 258
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewInternshipCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewNoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewProjectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewResumeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewSkillCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.util.ItemUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBookBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalInternship;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalNote;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalProject;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResume;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResumeBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalSkill;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewCommand}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ViewCommandIntegrationTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL_WITHOUT_GOOGLE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBookCopy \u003d new ResumeBookBuilder(TypicalResumeBook.TYPICAL_WITHOUT_GOOGLE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        model \u003d new ModelManager(resumeBook, new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedModel \u003d new ModelManager(resumeBookCopy, new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_viewInternship_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validInternship \u003d TypicalInternship.NINJA_VAN;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setInternshipToDisplay();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ViewInternshipCommand(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandResult(validInternship.toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ViewInternshipCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_outOfBoundsInternship_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertCommandFailure(new ViewInternshipCommand(Index.fromOneBased(3)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_viewNote_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note validNote \u003d TypicalNote.FINISH_CS_2103;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ViewNoteCommand(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandResult(validNote.toString(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ViewNoteCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_outOfBoundsNote_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new ViewNoteCommand(Index.fromOneBased(3)),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_viewProject_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validProject \u003d TypicalProject.ORBITAL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setProjectToDisplay();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ViewProjectCommand(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandResult(validProject.toString(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ViewProjectCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_outOfBoundsProject_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new ViewProjectCommand(Index.fromOneBased(2)),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_viewResume_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validResume \u003d TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setResumeToDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ViewResumeCommand(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandResult(validResume.toString(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ViewResumeCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_outOfBoundsResume_throwsCommandException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new ViewResumeCommand(Index.fromOneBased(2)),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_viewSkill_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validSkill \u003d TypicalSkill.REACT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedModel.setSkillToDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandSuccess(new ViewSkillCommand(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandResult(validSkill.toString(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        ViewSkillCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemUtil.INTERNSHIP_ALIAS),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_outOfBoundsSkill_throwsCommandException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertCommandFailure(new ViewSkillCommand(Index.fromOneBased(2)),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new CommandException(Messages.MESSAGE_INVALID_INDEX));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewCommand viewInternship \u003d new ViewInternshipCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewCommand viewProject \u003d new ViewProjectCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewCommand viewResume \u003d new ViewResumeCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewCommand viewSkill \u003d new ViewSkillCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewInternship, viewProject);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewInternship, viewResume);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewInternship, viewSkill);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewProject, viewResume);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewProject, viewSkill);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewResume, viewSkill);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 156,
      "duongphammmm": 8,
      "chrisjwelly": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddInternshipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddInternshipCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullInternship_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddInternshipCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_internshipAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingInternshipAdded modelStub \u003d new ModelStubAcceptingInternshipAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validItem \u003d new InternshipBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddInternshipCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddInternshipCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.internships);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateInternship_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validItem \u003d new InternshipBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addCommand \u003d new AddInternshipCommand(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInternship(validItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddInternshipCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship itemA \u003d new InternshipBuilder().withName(\"NameA\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship itemB \u003d new InternshipBuilder().withName(\"NameB\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addACommand \u003d new AddInternshipCommand(itemA);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addBCommand \u003d new AddInternshipCommand(itemB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddInternshipCommand addACommandCopy \u003d new AddInternshipCommand(itemA);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different internship -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(addBCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single Internship."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithInternship extends ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Internship item;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithInternship(Internship item) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasInternship(Internship item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the Internship being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingInternshipAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            internships.add(internship);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddProjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddProjectCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddProjectCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_projectAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingProjectAdded modelStub \u003d new ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validItem \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddProjectCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddProjectCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.projects);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validItem \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addCommand \u003d new AddProjectCommand(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddProjectCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project itemA \u003d new ProjectBuilder().withName(\"NameA\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project itemB \u003d new ProjectBuilder().withName(\"NameB\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addACommand \u003d new AddProjectCommand(itemA);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addBCommand \u003d new AddProjectCommand(itemB);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddProjectCommand addACommandCopy \u003d new AddProjectCommand(itemA);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addACommand.equals(addACommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addACommand.equals(addBCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single Project."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithProject extends ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Project item;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithProject(Project item) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasProject(Project item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the Project being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingProjectAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            projects.add(project);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddResumeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddResumeCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullResume_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddResumeCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_resumeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingResumeAdded modelStub \u003d new ModelStubAcceptingResumeAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validItem \u003d new ResumeBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddResumeCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddResumeCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.resumes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateResume_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validItem \u003d new ResumeBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addCommand \u003d new AddResumeCommand(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithResume(validItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddResumeCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume java \u003d new ResumeBuilder().withName(\"Java\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume c \u003d new ResumeBuilder().withName(\"C\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addJavaCommand \u003d new AddResumeCommand(java);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addCCommand \u003d new AddResumeCommand(c);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddResumeCommand addJavaCommandCopy \u003d new AddResumeCommand(java);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different resume -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(addCCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single resume."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithResume extends ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Resume item;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithResume(Resume item) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasResume(Resume item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the resume being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingResumeAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cResume\u003e resumes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            resumes.add(resume);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/add/AddSkillCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.SkillBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class AddSkillCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullSkill_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSkillCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_skillAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubAcceptingSkillAdded modelStub \u003d new ModelStubAcceptingSkillAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validItem \u003d new SkillBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new AddSkillCommand(validItem).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(String.format(AddSkillCommand.MESSAGE_SUCCESS, validItem.getType().getFullType()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(Arrays.asList(validItem), modelStub.skills);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_duplicateSkill_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validItem \u003d new SkillBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addCommand \u003d new AddSkillCommand(validItem);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSkill(validItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddSkillCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill java \u003d new SkillBuilder().withName(\"NameA\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill c \u003d new SkillBuilder().withName(\"NameB\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addJavaCommand \u003d new AddSkillCommand(java);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addCCommand \u003d new AddSkillCommand(c);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        AddSkillCommand addJavaCommandCopy \u003d new AddSkillCommand(java);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertTrue(addJavaCommand.equals(addJavaCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different skill -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertFalse(addJavaCommand.equals(addCCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single skill."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubWithSkill extends ModelStub {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Skill item;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithSkill(Skill item) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public boolean hasSkill(Skill item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that always accept the skill being added."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private class ModelStubAcceptingSkillAdded extends ModelStub {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        final ArrayList\u003cSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            skills.add(skill);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 101,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/delete/DeleteInternshipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DeleteInternshipCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteInternshipCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship validItem \u003d new InternshipBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInternship(validItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteInternshipCommand deleteInternshipCommand \u003d new DeleteInternshipCommand(invalidIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e deleteInternshipCommand.execute(modelStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_validIndex_deleteSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingInternshipDeleted modelStub \u003d new ModelStubContainingInternshipDeleted();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship toDelete \u003d modelStub.getInternshipByIndex(validIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteInternshipCommand deleteInternshipCommand \u003d new DeleteInternshipCommand(validIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(toDelete), modelStub.internships);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d deleteInternshipCommand.execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(DeleteInternshipCommand.MESSAGE_DELETE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexA \u003d Index.fromZeroBased(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexB \u003d Index.fromOneBased(19);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteInternshipCommand deleteACommand \u003d new DeleteInternshipCommand(indexA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteInternshipCommand deleteBCommand \u003d new DeleteInternshipCommand(indexB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteInternshipCommand deleteACommandCopy \u003d new DeleteInternshipCommand(indexA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(deleteBCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that contains a single Internship."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubWithInternship extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final Internship item;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubWithInternship(Internship item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasInternship(Internship item) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always contain the Internship being deleted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubContainingInternshipDeleted extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ArrayList\u003cInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingInternshipDeleted() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            internships.add(new InternshipBuilder().withName(\"Stub internship\").build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Internship getInternshipByIndex(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return internships.get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getInternshipSize() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return internships.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void deleteInternship(Internship internship) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            internships.remove(internship);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 120,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/delete/DeleteProjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DeleteProjectCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteProjectCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project validItem \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index invalidIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand(invalidIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e deleteProjectCommand.execute(modelStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_validIndex_deleteSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingProjectDeleted modelStub \u003d new ModelStubContainingProjectDeleted();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project toDelete \u003d modelStub.getProjectByIndex(validIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteProjectCommand deleteProjectCommand \u003d new DeleteProjectCommand(validIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(toDelete), modelStub.projects);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d deleteProjectCommand.execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(DeleteProjectCommand.MESSAGE_DELETE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexA \u003d Index.fromZeroBased(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexB \u003d Index.fromOneBased(19);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteProjectCommand deleteACommand \u003d new DeleteProjectCommand(indexA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteProjectCommand deleteBCommand \u003d new DeleteProjectCommand(indexB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteProjectCommand deleteACommandCopy \u003d new DeleteProjectCommand(indexA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(deleteBCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that contains a single Project."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubWithProject extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final Project item;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubWithProject(Project item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasProject(Project item) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always contains the Project being deleted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubContainingProjectDeleted extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ArrayList\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingProjectDeleted() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            projects.add(new ProjectBuilder().withName(\"Stub project\").build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Project getProjectByIndex(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return projects.get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getProjectSize() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return projects.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void deleteProject(Project project) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            projects.remove(project);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 120,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/delete/DeleteResumeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DeleteResumeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteResumeCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume validItem \u003d new ResumeBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithResume(validItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteResumeCommand deleteResumeCommand \u003d new DeleteResumeCommand(invalidIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e deleteResumeCommand.execute(modelStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_validIndex_deleteSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingResumeDeleted modelStub \u003d new ModelStubContainingResumeDeleted();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume toDelete \u003d modelStub.getResumeByIndex(validIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteResumeCommand deleteResumeCommand \u003d new DeleteResumeCommand(validIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(toDelete), modelStub.resumes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d deleteResumeCommand.execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(DeleteResumeCommand.MESSAGE_DELETE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexA \u003d Index.fromZeroBased(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexB \u003d Index.fromOneBased(19);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteResumeCommand deleteACommand \u003d new DeleteResumeCommand(indexA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteResumeCommand deleteBCommand \u003d new DeleteResumeCommand(indexB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteResumeCommand deleteACommandCopy \u003d new DeleteResumeCommand(indexA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(deleteBCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that contains a single Resume."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubWithResume extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final Resume item;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubWithResume(Resume item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasResume(Resume item) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always contain the Resume being deleted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubContainingResumeDeleted extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ArrayList\u003cResume\u003e resumes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingResumeDeleted() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resumes.add(new ResumeBuilder().withName(\"Stub resume\").build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Resume getResumeByIndex(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return resumes.get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getResumeSize() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return resumes.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void deleteResume(Resume resume) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resumes.remove(resume);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 120,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/delete/DeleteSkillCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.SkillBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DeleteSkillCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteSkillCommand(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill validItem \u003d new SkillBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSkill(validItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index invalidIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteSkillCommand deleteSkillCommand \u003d new DeleteSkillCommand(invalidIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                Messages.MESSAGE_INVALID_INDEX, () -\u003e deleteSkillCommand.execute(modelStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_validIndex_deleteSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingSkillDeleted modelStub \u003d new ModelStubContainingSkillDeleted();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index validIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill toDelete \u003d modelStub.getSkillByIndex(validIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteSkillCommand deleteSkillCommand \u003d new DeleteSkillCommand(validIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(toDelete), modelStub.skills);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d deleteSkillCommand.execute(modelStub);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(DeleteSkillCommand.MESSAGE_DELETE_ITEM_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                toDelete.getType().getFullType()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexA \u003d Index.fromZeroBased(5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Index indexB \u003d Index.fromOneBased(19);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteSkillCommand deleteACommand \u003d new DeleteSkillCommand(indexA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteSkillCommand deleteBCommand \u003d new DeleteSkillCommand(indexB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        DeleteSkillCommand deleteACommandCopy \u003d new DeleteSkillCommand(indexA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(deleteACommand.equals(deleteBCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that contains a single Skill."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubWithSkill extends ModelStub {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final Skill item;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubWithSkill(Skill item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public boolean hasSkill(Skill item) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return this.item.isSame(item);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always contain the Skill being deleted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubContainingSkillDeleted extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ArrayList\u003cSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ModelStubContainingSkillDeleted() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            skills.add(new SkillBuilder().withName(\"Stub skill\").build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Skill getSkillByIndex(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return skills.get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getSkillSize() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return skills.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void deleteSkill(Skill skill) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            skills.remove(skill);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 120,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditInternshipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nhamhung": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditInternshipDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditInternshipDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"java\", \"backend\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Name name \u003d new Name(\"name\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String role \u003d \"role\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time from \u003d new Time(\"10-2020\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Time to \u003d new Time(\"12-2020\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String description \u003d \"description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private EditInternshipDescriptor editInternshipDescriptor \u003d new EditInternshipDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        editInternshipDescriptor.setName(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        editInternshipDescriptor.setRole(role);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        editInternshipDescriptor.setFrom(from);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        editInternshipDescriptor.setTo(to);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        editInternshipDescriptor.setDescription(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        editInternshipDescriptor.setTags(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        EditInternshipDescriptor editInternshipDescriptorToTest \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                new EditInternshipDescriptor(editInternshipDescriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // same name -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        assertEquals(editInternshipDescriptorToTest.getName().get(), name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        assertEquals(editInternshipDescriptorToTest.getRole().get(), role);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        assertEquals(editInternshipDescriptorToTest.getFrom().get(), from);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        assertEquals(editInternshipDescriptorToTest.getTo().get(), to);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        assertEquals(editInternshipDescriptorToTest.getDescription().get(), description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditProjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditProjectCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditProjectDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditProjectDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditResumeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditResumeCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditResumeDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditResumeDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditSkillCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditSkillCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/edit/EditSkillDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "package seedu.address.logic.commands.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "public class EditSkillDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/find/FindInternshipCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.NINJA_VAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.PAYPAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class FindInternshipCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindInternshipCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_emptyPredicate_noInternshipFound() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindInternshipCommandTest.ModelStubAcceptingInternshipAdded modelStub \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindInternshipCommandTest.ModelStubAcceptingInternshipAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addInternship(NINJA_VAN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate emptyPredicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(emptyPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindInternshipCommand(emptyPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Internships\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_oneKeyword_oneInternshipFound() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindInternshipCommandTest.ModelStubAcceptingInternshipAdded modelStub \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindInternshipCommandTest.ModelStubAcceptingInternshipAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addInternship(NINJA_VAN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate onePredicate \u003d preparePredicate(\"Ninja\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(onePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindInternshipCommand(onePredicate).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 1, \"Internships\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(NINJA_VAN), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_multipleKeywords_multipleInternshipsFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindInternshipCommandTest.ModelStubAcceptingInternshipAdded modelStub \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindInternshipCommandTest.ModelStubAcceptingInternshipAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addInternship(NINJA_VAN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addInternship(PAYPAL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate twoPredicate \u003d preparePredicate(\"Van PayPal\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(twoPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindInternshipCommand(twoPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 2, \"Internships\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(NINJA_VAN, PAYPAL), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindInternshipCommand findFirstCommand \u003d new FindInternshipCommand(firstPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindInternshipCommand findSecondCommand \u003d new FindInternshipCommand(secondPredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindInternshipCommand(firstPredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always accept the Internship being added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubAcceptingInternshipAdded extends ModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ObservableList\u003cItem\u003e internships \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final FilteredList\u003cItem\u003e filteredList \u003d new FilteredList\u003c\u003e(internships);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            internships.add(internship);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return filteredList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/find/FindProjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalProject.DUKE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalProject.ORBITAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class FindProjectCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindProjectCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_emptyPredicate_noProjectFound() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindProjectCommandTest.ModelStubAcceptingProjectAdded modelStub \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindProjectCommandTest.ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addProject(ORBITAL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate emptyPredicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(emptyPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindProjectCommand(emptyPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Projects\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_oneKeyword_oneProjectFound() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindProjectCommandTest.ModelStubAcceptingProjectAdded modelStub \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindProjectCommandTest.ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addProject(DUKE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate onePredicate \u003d preparePredicate(\"Duke\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(onePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindProjectCommand(onePredicate).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 1, \"Projects\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(DUKE), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_multipleKeywords_oneProjectFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindProjectCommandTest.ModelStubAcceptingProjectAdded modelStub \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindProjectCommandTest.ModelStubAcceptingProjectAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addProject(ORBITAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addProject(DUKE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate twoPredicate \u003d preparePredicate(\"Orbital Resume\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(twoPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindProjectCommand(twoPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 1, \"Projects\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(ORBITAL), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindProjectCommand findFirstCommand \u003d new FindProjectCommand(firstPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindProjectCommand findSecondCommand \u003d new FindProjectCommand(secondPredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindProjectCommand(firstPredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always accept the Project being added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubAcceptingProjectAdded extends ModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ObservableList\u003cItem\u003e projects \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final FilteredList\u003cItem\u003e filteredList \u003d new FilteredList\u003c\u003e(projects);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void addProject(Project project) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            projects.add(project);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return filteredList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/find/FindResumeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalResume.SE_RESUME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class FindResumeCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindResumeCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_emptyPredicate_noResumeFound() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindResumeCommandTest.ModelStubAcceptingResumeAdded modelStub \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindResumeCommandTest.ModelStubAcceptingResumeAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addResume(SE_RESUME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate emptyPredicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(emptyPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindResumeCommand(emptyPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Resumes\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_multipleKeywords_oneResumeFound() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindResumeCommandTest.ModelStubAcceptingResumeAdded modelStub \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindResumeCommandTest.ModelStubAcceptingResumeAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addResume(SE_RESUME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate onePredicate \u003d preparePredicate(\"Software Engineering\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(onePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindResumeCommand(onePredicate).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 1, \"Resumes\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(SE_RESUME), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_oneKeyword_multipleResumesFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindResumeCommandTest.ModelStubAcceptingResumeAdded modelStub \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindResumeCommandTest.ModelStubAcceptingResumeAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addResume(SE_RESUME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addResume(ME_RESUME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate twoPredicate \u003d preparePredicate(\"Engineering\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(twoPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindResumeCommand(twoPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 2, \"Resumes\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(SE_RESUME, ME_RESUME), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindResumeCommand findFirstCommand \u003d new FindResumeCommand(firstPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindResumeCommand findSecondCommand \u003d new FindResumeCommand(secondPredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindResumeCommand(firstPredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always accept the Resume being added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubAcceptingResumeAdded extends ModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ObservableList\u003cItem\u003e resumes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final FilteredList\u003cItem\u003e filteredList \u003d new FilteredList\u003c\u003e(resumes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            resumes.add(resume);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return filteredList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 1,
      "duongphammmm": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/find/FindSkillCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.commands.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalSkill.GIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalSkill.REACT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class FindSkillCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FindSkillCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_emptyPredicate_noSkillFound() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindSkillCommandTest.ModelStubAcceptingSkillAdded modelStub \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindSkillCommandTest.ModelStubAcceptingSkillAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addSkill(REACT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate emptyPredicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(emptyPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindSkillCommand(emptyPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 0, \"Skills\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_oneKeyword_oneSkillFound() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindSkillCommandTest.ModelStubAcceptingSkillAdded modelStub \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindSkillCommandTest.ModelStubAcceptingSkillAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addSkill(REACT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate onePredicate \u003d preparePredicate(\"react\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(onePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindSkillCommand(onePredicate).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 1, \"Skills\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(REACT), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void execute_multipleKeywords_multipleSkillsFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindSkillCommandTest.ModelStubAcceptingSkillAdded modelStub \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new FindSkillCommandTest.ModelStubAcceptingSkillAdded();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addSkill(REACT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.addSkill(GIT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate twoPredicate \u003d preparePredicate(\"React Git\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelStub.updateFilteredItemList(twoPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        CommandResult commandResult \u003d new FindSkillCommand(twoPredicate).execute(modelStub);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_ITEMS_LISTED, 2, \"Skills\"), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Arrays.asList(REACT, GIT), modelStub.getFilteredItemList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindSkillCommand findFirstCommand \u003d new FindSkillCommand(firstPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindSkillCommand findSecondCommand \u003d new FindSkillCommand(secondPredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindSkillCommand(firstPredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A Model stub that always accept the Skill being added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private class ModelStubAcceptingSkillAdded extends ModelStub {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final ObservableList\u003cItem\u003e skills \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        final FilteredList\u003cItem\u003e filteredList \u003d new FilteredList\u003c\u003e(skills);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            skills.add(skill);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return filteredList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/view/ViewInternshipTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalInternship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ViewInternshipTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullInternship_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewInternshipCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_internshipInModel_viewSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validItem \u003d TypicalInternship.GOOGLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInternship(validItem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new ViewInternshipCommand(Index.fromOneBased(1)).execute(modelStub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(ViewInternshipCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(validItem.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getDataToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_internshipInModel_indexOutOfBounds() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship validItem \u003d TypicalInternship.GOOGLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInternship(validItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ViewInternshipCommand(Index.fromOneBased(2)).execute(modelStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewInternshipCommand viewFirstIndex \u003d new ViewInternshipCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewInternshipCommand viewSecondIndex \u003d new ViewInternshipCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewInternshipCommand viewFirstIndexCopy \u003d new ViewInternshipCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndexCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(1, viewFirstIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(null, viewFirstIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different Internship -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewFirstIndex, viewSecondIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single internship."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static class ModelStubWithInternship extends ModelStub {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Internship item;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithInternship(Internship item) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getInternshipSize() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Internship getInternshipByIndex(Index index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/view/ViewProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalProject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ViewProjectTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewProjectCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_projectInModel_viewSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validItem \u003d TypicalProject.DUKE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validItem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new ViewProjectCommand(Index.fromOneBased(1)).execute(modelStub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(ViewProjectCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(validItem.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getDataToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_projectInModel_indexOutOfBounds() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project validItem \u003d TypicalProject.DUKE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ViewProjectCommand(Index.fromOneBased(2)).execute(modelStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewProjectCommand viewFirstIndex \u003d new ViewProjectCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewProjectCommand viewSecondIndex \u003d new ViewProjectCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewProjectCommand viewFirstIndexCopy \u003d new ViewProjectCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndexCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(1, viewFirstIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(null, viewFirstIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different Project -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewFirstIndex, viewSecondIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single project."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static class ModelStubWithProject extends ModelStub {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Project item;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithProject(Project item) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getProjectSize() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Project getProjectByIndex(Index index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/view/ViewResumeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalResume;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ViewResumeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullResume_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewResumeCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_resumeInModel_viewSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validItem \u003d TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithResume(validItem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new ViewResumeCommand(Index.fromOneBased(1)).execute(modelStub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(ViewResumeCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(validItem.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getDataToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_resumeInModel_indexOutOfBounds() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume validItem \u003d TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithResume(validItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ViewResumeCommand(Index.fromOneBased(2)).execute(modelStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewResumeCommand viewFirstIndex \u003d new ViewResumeCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewResumeCommand viewSecondIndex \u003d new ViewResumeCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewResumeCommand viewFirstIndexCopy \u003d new ViewResumeCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndexCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(1, viewFirstIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(null, viewFirstIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different resume -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewFirstIndex, viewSecondIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single resume."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static class ModelStubWithResume extends ModelStub {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Resume item;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithResume(Resume item) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getResumeSize() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Resume getResumeByIndex(Index index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/view/ViewSkillTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.commands.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalSkill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ViewSkillTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void constructor_nullSkill_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ViewSkillCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_skillInModel_viewSuccessful() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validItem \u003d TypicalSkill.REACT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSkill(validItem);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        CommandResult commandResult \u003d new ViewSkillCommand(Index.fromOneBased(1)).execute(modelStub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(ViewSkillCommand.MESSAGE_VIEW_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(validItem.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                commandResult.getDataToUser());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void execute_skillInModel_indexOutOfBounds() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill validItem \u003d TypicalSkill.REACT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithSkill(validItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ViewSkillCommand(Index.fromOneBased(2)).execute(modelStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewSkillCommand viewFirstIndex \u003d new ViewSkillCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewSkillCommand viewSecondIndex \u003d new ViewSkillCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ViewSkillCommand viewFirstIndexCopy \u003d new ViewSkillCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(viewFirstIndex, viewFirstIndexCopy);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(1, viewFirstIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(null, viewFirstIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // different Skill -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertNotEquals(viewFirstIndex, viewSecondIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * A Model stub that contains a single skill."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private static class ModelStubWithSkill extends ModelStub {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final Skill item;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        ModelStubWithSkill(Skill item) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            requireNonNull(item);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            this.item \u003d item;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public int getSkillSize() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Skill getSkillByIndex(Index index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FROM_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TO_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEBSITE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_INTERNSHIP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_NOTE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_RESUME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_SKILL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_BASIC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_DESCRIPTION_DUKE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_DESCRIPTION_ORBITAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_INTERMEDIATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_INTERNSHIP_DESCRIPTION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_DUKE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_GOOGLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_ME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_NOTE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_ORBITAL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_REACT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_ROLE_BACKEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_FRONTEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_JAVA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME_FROM;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME_FROM_2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME_ORBITAL;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME_TO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TIME_TO_2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_WEBSITE_DUKE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_WEBSITE_ORBITAL;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.GOOGLE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalNote.FINISH_CS_2103;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalProject.ORBITAL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalSkill.REACT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.add.AddInternshipCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddNoteCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.add.AddProjectCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddResumeCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddSkillCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.NoteBuilder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.SkillBuilder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_addAllInternshipFieldsPresent_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship expectedInternship \u003d new InternshipBuilder(GOOGLE).withTags(VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item types - last item type accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_PROJECT + ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item names - last name accepted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_REACT + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item roles - last role accepted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_BACKEND + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item froms - last from accepted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_BACKEND + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM_2 + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item to - last to accepted"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_BACKEND + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_TIME_TO_2 + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item description - last description accepted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_BACKEND + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item tags - all tags added"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedInternship \u003d new InternshipBuilder(GOOGLE).withTags(VALID_TAG_FRONTEND, VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_BACKEND + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TAG_FRONTEND + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_allAddNoteFieldsPresent_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note expectedNote \u003d new NoteBuilder(FINISH_CS_2103).withTags(VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_NOTE + PREFIXED_NAME_NOTE + PREFIXED_TIME_TO + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item types - last type accepted"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + ITEM_TYPE_NOTE + PREFIXED_NAME_NOTE + PREFIXED_TIME_TO + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item names - last name accepted"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_NOTE + PREFIXED_NAME_REACT + PREFIXED_NAME_NOTE + PREFIXED_TIME_TO + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item time - last time accepted"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_NOTE + PREFIXED_NAME_NOTE + \" t/ 12-2021\" + PREFIXED_TIME_TO + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item tags - all tags accepted"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedNote \u003d new NoteBuilder(FINISH_CS_2103).withTags(VALID_TAG_JAVA, VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_NOTE + PREFIXED_NAME_NOTE + PREFIXED_TIME_TO + PREFIXED_TAG_JAVA + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_allAddProjectFieldsPresent_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(ORBITAL).withTags(VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                + PREFIXED_TAG_JAVA, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item types - last type accepted"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_INTERNSHIP + ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TIME_ORBITAL + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TAG_JAVA, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item names - last name accepted"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_REACT + PREFIXED_NAME_ORBITAL"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TIME_ORBITAL + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TAG_JAVA, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item time - last time accepted"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_TO"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TIME_ORBITAL + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TAG_JAVA, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item website - last website accepted"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_WEBSITE_DUKE + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TAG_JAVA, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item description - last description accepted"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_DUKE + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TAG_JAVA, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item tags - all tags accepted"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(ORBITAL).withTags(VALID_TAG_JAVA, VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_TAG_JAVA + PREFIXED_TAG_FRONTEND, new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_addAllResumeFieldsPresent_success() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(ME_RESUME).withTags(VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_RESUME + PREFIXED_NAME_ME + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddResumeCommand(expectedResume));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item types - last type accepted"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + ITEM_TYPE_RESUME + PREFIXED_NAME_ME + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddResumeCommand(expectedResume));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item names - last name accepted"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_RESUME + PREFIXED_NAME_REACT + PREFIXED_NAME_ME + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddResumeCommand(expectedResume));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item tags - all tags accepted"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedResume \u003d new ResumeBuilder(ME_RESUME).withTags(VALID_TAG_FRONTEND, VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_RESUME + PREFIXED_NAME_REACT + PREFIXED_NAME_ME + PREFIXED_TAG_FRONTEND + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddResumeCommand(expectedResume));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_addAllSkillFieldsPresent_success() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill expectedSkill \u003d new SkillBuilder(REACT).withTags(VALID_TAG_FRONTEND).build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_SKILL + PREFIXED_NAME_REACT + PREFIXED_BASIC + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddSkillCommand(expectedSkill));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item types - last type accepted"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + ITEM_TYPE_SKILL + PREFIXED_NAME_REACT + PREFIXED_BASIC + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddSkillCommand(expectedSkill));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item names - last name accepted"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_SKILL + PREFIXED_NAME_DUKE + PREFIXED_NAME_REACT + PREFIXED_BASIC + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddSkillCommand(expectedSkill));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item levels - last level accepted"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_SKILL + PREFIXED_NAME_REACT + PREFIXED_INTERMEDIATE + PREFIXED_BASIC + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddSkillCommand(expectedSkill));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        expectedSkill \u003d new SkillBuilder(REACT).withTags(VALID_TAG_FRONTEND, VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // multiple item tags - all tags accepted"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_SKILL + PREFIXED_NAME_REACT + PREFIXED_BASIC + PREFIXED_TAG_FRONTEND + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddSkillCommand(expectedSkill));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Internship expectedInternship \u003d new InternshipBuilder(GOOGLE).withTags().build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // 0 tags"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddInternshipCommand(expectedInternship));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note expectedNote \u003d new NoteBuilder(FINISH_CS_2103).withTags().build();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // 0 tags"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_NOTE + PREFIXED_NAME_NOTE + PREFIXED_TIME_TO,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddNoteCommand(expectedNote));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(ORBITAL).withTags().build();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // 0 tags"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddProjectCommand(expectedProject));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Resume expectedResume \u003d new ResumeBuilder(ME_RESUME).withTags().build();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // 0 tags"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_RESUME + PREFIXED_NAME_ME,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddResumeCommand(expectedResume));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Skill expectedSkill \u003d new SkillBuilder(REACT).withTags().build();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // 0 tags"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_SKILL + PREFIXED_NAME_REACT + PREFIXED_BASIC,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new AddSkillCommand(expectedSkill));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_compulsoryItemTypeMissing_failure() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing item prefix"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // invalid item prefix"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                INVALID_TYPE_DESC + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \"Not a valid item type!\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parseInternship_fromLaterThanTo_failure() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + \" f/02-2022 \" + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                AddInternshipCommand.MESSAGE_FROM_TO_MISORDER);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedInternshipErrorMessage \u003d"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInternshipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_INTERNSHIP + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedInternshipErrorMessage);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing role prefix"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedInternshipErrorMessage);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing from prefix"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedInternshipErrorMessage);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing to prefix"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedInternshipErrorMessage);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_FROM + PREFIXED_TIME_TO + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedInternshipErrorMessage);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedNoteErrorMessage \u003d"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_NOTE + PREFIXED_TIME_TO + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedNoteErrorMessage);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_NOTE + PREFIXED_NAME_NOTE + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedNoteErrorMessage);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedProjectErrorMessage \u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_PROJECT + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                                + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedProjectErrorMessage);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_WEBSITE_ORBITAL + PREFIXED_DESCRIPTION_ORBITAL + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedProjectErrorMessage);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing website prefix"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_DESCRIPTION_ORBITAL + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedProjectErrorMessage);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_ORBITAL"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_WEBSITE_ORBITAL + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedProjectErrorMessage);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedResumeErrorMessage \u003d"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddResumeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_RESUME + PREFIXED_TAG_JAVA, expectedResumeErrorMessage);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        String expectedSkillErrorMessage \u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSkillCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_SKILL + PREFIXED_BASIC,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedSkillErrorMessage);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // missing level prefix"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_SKILL + PREFIXED_NAME_REACT,"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                expectedSkillErrorMessage);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                    ITEM_TYPE_INTERNSHIP + INVALID_NAME_DESC + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                    + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // invalid from"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND + INVALID_FROM_DESC"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // invalid TO"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + INVALID_TO_DESC + PREFIXED_INTERNSHIP_DESCRIPTION + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Time.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_INTERNSHIP + PREFIXED_NAME_GOOGLE + PREFIXED_ROLE_FRONTEND + PREFIXED_TIME_FROM"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + PREFIXED_TIME_TO + PREFIXED_INTERNSHIP_DESCRIPTION + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // invalid website"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_PROJECT + PREFIXED_NAME_ORBITAL + PREFIXED_TIME_TO"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + INVALID_WEBSITE_DESC + PREFIXED_DESCRIPTION_ORBITAL,"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                Website.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // invalid level"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ITEM_TYPE_SKILL + PREFIXED_NAME_REACT + INVALID_LEVEL_DESC + PREFIXED_TAG_FRONTEND,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \"Level of proficiency can only be one of these three types: basic, intermediate, \""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                        + \"advanced.\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 367,
      "-": 43,
      "duongphammmm": 6,
      "chrisjwelly": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 14,
      "-": 16,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_validIndex_returnsDoneCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"4\", new DoneCommand(INDEX_FOURTH_ITEM));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_noIndex_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"a\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"-1\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.edit.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "wardetu": 193,
      "-": 8,
      "duongphammmm": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "//import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "wardetu": 28,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GenerateResumeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.generate.GenerateResumeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class GenerateResumeCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private GenerateResumeCommandParser parser \u003d new GenerateResumeCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void parse_validIndex_returnsGenerateResumeCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseSuccess(parser, \"1\", new GenerateResumeCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseSuccess(parser, \"3\", new GenerateResumeCommand(INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void parse_validIndexAndName_returnsGenerateResumeCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseSuccess(parser, \"1 n/Resume\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new GenerateResumeCommand(INDEX_FIRST_ITEM, new Name(\"Resume\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseSuccess(parser, \"3 n/My Resume\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new GenerateResumeCommand(INDEX_THIRD_ITEM, new Name(\"My Resume\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void parse_noIndex_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                GenerateResumeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseFailure(parser, \"d\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseFailure(parser, \"0\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertParseFailure(parser, \"-1\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_INTERNSHIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_INVALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_RESUME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_SKILL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListInternshipCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListProjectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListResumeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListSkillCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_listAllInternships_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_INTERNSHIP, new ListInternshipCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_listAllNotes_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_NOTE, new ListNoteCommand());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_listAllProjects_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_PROJECT, new ListProjectCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_listAllResumes_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_RESUME, new ListResumeCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_listAllSkills_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, ITEM_TYPE_SKILL, new ListSkillCommand());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parser_missingType_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parser_withPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"abc \" + ITEM_TYPE_RESUME,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parser_invalidType_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_INVALID, \"Not a valid item type!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 4,
      "-": 166,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ResumeBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.delete.DeleteResumeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.find.FindInternshipCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.logic.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.list.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ResumeBookParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    private final ResumeBookParser parser \u003d new ResumeBookParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /*  @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: I thought the test would be identical to DeleteCommand but turns out not really.."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parseCommand_view() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ViewResumeCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" i/ res\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertEquals(new ViewResumeCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                DeleteResumeCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased() + \" i/ res\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(new DeleteResumeCommand(INDEX_FIRST_ITEM), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // TODO: Create DescriptorBuilders for testing puposes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        PersonalDetail person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(new EditInternshipCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void parseCommand_findInternship() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                (FindInternshipCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")) + \" i/int\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertEquals(new FindInternshipCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + HelpCommand.COMMAND_OPTION_SUMMARY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + HelpCommand.COMMAND_OPTION_START)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(ParseException.class, HelpCommand.MESSAGE_INVALID_OPTION, ()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            -\u003e parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" i/res\") instanceof ListCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" i/int\") instanceof ListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" i/res 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 10,
      "wardetu": 2,
      "-": 71,
      "duongphammmm": 16,
      "chrisjwelly": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ResumeEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERNSHIP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.model.util.ItemUtil.PROJECT_ALIAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.ResumeEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.testutil.ItemIndicesBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ResumeEditCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private ResumeEditCommandParser parser \u003d new ResumeEditCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_allItemsSpecified_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder internshipIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(3).add(4);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder projectIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder skillIndicesBuilder \u003d new ItemIndicesBuilder().add(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" \" + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + \" \" + skillIndicesBuilder.toString() + \" \" + PREFIX_PROJECT + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Shuffle the order of prefixes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT + \" \" + projectIndicesBuilder.toString() + \" \" + PREFIX_INTERNSHIP"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + \" \" + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + skillIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple project prefixes -- only last one accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT + \" 100 200 \" + PREFIX_INTERNSHIP + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + skillIndicesBuilder.toString() + \" \" + PREFIX_PROJECT + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple internship prefixes -- only last one accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" 100 200 \" + PREFIX_INTERNSHIP + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + skillIndicesBuilder.toString() + \" \" + PREFIX_PROJECT + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple skill prefixes -- only last one accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_SKILL + \" 100 200 \" + PREFIX_INTERNSHIP + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + skillIndicesBuilder.toString() + \" \" + PREFIX_PROJECT + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_intAndProjSpecified_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder internshipIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(3).add(4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder projectIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" \" + internshipIndicesBuilder.toString() + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + PREFIX_PROJECT + \" \" + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Shuffle the order of prefixes"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT + \" \" + projectIndicesBuilder.toString() + \" \" + PREFIX_INTERNSHIP"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + \" \" + internshipIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple internship prefixes -- only last one accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" 100 200 \" + PREFIX_INTERNSHIP + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + internshipIndicesBuilder.toString() + \" \" + PREFIX_PROJECT + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple project prefixes -- only last one accepted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT + \" 100 200 \" + PREFIX_INTERNSHIP + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + internshipIndicesBuilder.toString() + \" \" + PREFIX_PROJECT + \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_intAndSkiSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder internshipIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(3).add(4);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder skillIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" \" + internshipIndicesBuilder.toString() + \" \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + PREFIX_SKILL + \" \" + skillIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Shuffle the order of prefixes"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_SKILL + \" \" + skillIndicesBuilder.toString() + \" \" + PREFIX_INTERNSHIP"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + \" \" + internshipIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple internship prefixes -- only last one accepted"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" 100 200 \" + PREFIX_INTERNSHIP + \" \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL + \" \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + skillIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple skill prefixes -- only last one accepted"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_SKILL + \" 100 200 \" + PREFIX_INTERNSHIP + \" \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL + \" \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + skillIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_onlyProjSpecified_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder projectIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT + \" \" + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, ItemIndicesBuilder.empty(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple project prefixes -- only last one accepted"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT + \" 100 200 \" + PREFIX_PROJECT + \" \" + projectIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, ItemIndicesBuilder.empty(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_onlySkiSpecified_success() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder skillIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Standard"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_SKILL + \" \" + skillIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, ItemIndicesBuilder.empty(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // multiple skill prefixes -- only last one accepted"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_SKILL + \" 100 200 \" + PREFIX_SKILL + \" \" + skillIndicesBuilder.toString(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, ItemIndicesBuilder.empty(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_nothingSpecified_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, ItemIndicesBuilder.empty(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"4\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FOURTH_ITEM, ItemIndicesBuilder.empty(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_itemsSpecifiedButNoIndex_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder internshipIndicesBuilder \u003d new ItemIndicesBuilder();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder projectIndicesBuilder \u003d new ItemIndicesBuilder();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder skillIndicesBuilder \u003d new ItemIndicesBuilder();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // clear all"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" \" + PREFIX_PROJECT + \" \" + PREFIX_SKILL,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // clear only two"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" \" + PREFIX_SKILL,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT + \" \" + PREFIX_SKILL,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, ItemIndicesBuilder.empty(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // clear only one"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_PROJECT,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, ItemIndicesBuilder.empty(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        ItemIndicesBuilder.empty()));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_mixAndMatchItemSpecifiedButNoIndex_success() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder internshipIndicesBuilder \u003d new ItemIndicesBuilder().add(1).add(4).add(3);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder projectIndicesBuilder \u003d new ItemIndicesBuilder().add(2).add(4).add(1);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        ItemIndicesBuilder skillIndicesBuilder \u003d new ItemIndicesBuilder();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // fill up the internship and project, but empty the skill"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" \" + internshipIndicesBuilder.toString() + \" \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + PREFIX_PROJECT + \" \" + projectIndicesBuilder.toString() + \" \" + PREFIX_SKILL,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), projectIndicesBuilder.build(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // fill up the internship, but empty the skill"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1 \" + PREFIX_INTERNSHIP + \" \" + internshipIndicesBuilder.toString() + \" \" + PREFIX_SKILL,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new ResumeEditCommand(INDEX_FIRST_ITEM, internshipIndicesBuilder.build(), ItemIndicesBuilder.empty(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        skillIndicesBuilder.build()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_invalidResumeIndex_throwsParseException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // standard"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"a\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"-1\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // with some item prefixes"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"a \" + PREFIX_INTERNSHIP + \" 1 2 3 \" + PREFIX_PROJECT + \" 3 2 1 \""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                        + PREFIX_SKILL + \" 2 1\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"-1 \" + PREFIX_PROJECT + \" 4 1 2\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"1 1 \" + PREFIX_PROJECT + \" 4 1 2\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_invalidReditItemIndices_throwsParseException() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // standard"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_INTERNSHIP + \" a\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_INTERNSHIP + \" -1\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"2 \" + PREFIX_PROJECT + \" a\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"2 \" + PREFIX_PROJECT + \" -1\","
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"3 \" + PREFIX_SKILL + \" 0\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"3 \" + PREFIX_SKILL + \" 100@\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // mix valid and invalid"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"2 \" + PREFIX_PROJECT + \" -1 \" + PREFIX_SKILL + \" 1 2 3\","
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"2 \" + PREFIX_INTERNSHIP + \" 3 1 2 \" + PREFIX_SKILL + \" @\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"2 \" + PREFIX_INTERNSHIP + \" 3 2 \" + PREFIX_PROJECT + \" a\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // all invalid"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"2 \" + PREFIX_INTERNSHIP + \" -1 \" + PREFIX_PROJECT + \" a\","
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"3 \" + PREFIX_INTERNSHIP + \" -1 \" + PREFIX_PROJECT + \" a \""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                + PREFIX_SKILL + \" 0\","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_variousTypo_throwsParseException() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Forgot to specify index and go to item prefixes directly -- Parser expects an index"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, PREFIX_INTERNSHIP + \"1 2\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Space between slash and prefix, right after index -- Parser thinks that the mistyped prefix is part of index"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PROJECT_ALIAS + \" /\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Space between slash and prefix, right after a correct prefix -- Parser thinks it\u0027s part of the indices of"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // the correctly-written prefix"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_INTERNSHIP + \" 1 2 \" + PROJECT_ALIAS + \" / 2 3\","
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_REDIT_ITEM_INDEX);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 302
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ResumePreviewParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.ResumePreviewCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ResumePreviewParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private ResumePreviewCommandParser parser \u003d new ResumePreviewCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_validIndex_returnsResumePreviewCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ResumePreviewCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"4\", new ResumePreviewCommand(INDEX_FOURTH_ITEM));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_noIndex_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ResumePreviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"a\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"-1\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TagPullCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_NAME_GOOGLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_BACKEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_FRONTEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_JAVA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREFIXED_TAG_TECH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BACKEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FOURTH_ITEM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.logic.commands.TagPullCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TagPullCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private TagPullCommandParser parser \u003d new TagPullCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_validWithOneTag_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tagTech \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tagTech.add(new Tag(VALID_TAG_TECH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1\" + PREFIXED_TAG_TECH,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new TagPullCommand(INDEX_FIRST_ITEM, tagTech));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // Try another tag"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e tagJava \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tagJava.add(new Tag(VALID_TAG_JAVA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"4\" + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new TagPullCommand(INDEX_FOURTH_ITEM, tagJava));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_validWithMultipleTags_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e twoTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        twoTags.add(new Tag(VALID_TAG_JAVA));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        twoTags.add(new Tag(VALID_TAG_TECH));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1\" + PREFIXED_TAG_JAVA + PREFIXED_TAG_TECH,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new TagPullCommand(INDEX_FIRST_ITEM, twoTags));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Set\u003cTag\u003e manyTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        manyTags.add(new Tag(VALID_TAG_JAVA));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        manyTags.add(new Tag(VALID_TAG_TECH));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        manyTags.add(new Tag(VALID_TAG_FRONTEND));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        manyTags.add(new Tag(VALID_TAG_BACKEND));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                \"1\" + PREFIXED_TAG_JAVA + PREFIXED_TAG_TECH + PREFIXED_TAG_FRONTEND + PREFIXED_TAG_BACKEND,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                new TagPullCommand(INDEX_FIRST_ITEM, manyTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_invalidCommand_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // just index, without tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                TagPullCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                TagPullCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // other prefixes"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"1\" + PREFIXED_NAME_GOOGLE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                TagPullCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"-1\" + PREFIXED_ROLE_FRONTEND, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                TagPullCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public void parse_invalidResumeIndex_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"a\" + PREFIXED_TAG_FRONTEND, ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"-1\" + PREFIXED_TAG_JAVA, ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"0\" + PREFIXED_TAG_BACKEND, ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        // with multiple tags"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        assertParseFailure(parser, \"a\" + PREFIXED_TAG_FRONTEND + PREFIXED_TAG_JAVA,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_INTERNSHIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_INVALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_RESUME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ITEM_TYPE_SKILL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewInternshipCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewProjectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewResumeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.view.ViewSkillCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_viewInternship_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"3 \" + ITEM_TYPE_INTERNSHIP,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ViewInternshipCommand(TypicalIndexes.INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_viewNote_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"3 \" + ITEM_TYPE_NOTE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ViewNoteCommand(TypicalIndexes.INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_viewProject_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"3 \" + ITEM_TYPE_PROJECT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ViewProjectCommand(TypicalIndexes.INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_viewResume_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"3 \" + ITEM_TYPE_RESUME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ViewResumeCommand(TypicalIndexes.INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parse_viewSkill_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseSuccess(parser, \"3 \" + ITEM_TYPE_SKILL,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                new ViewSkillCommand(TypicalIndexes.INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parser_missingParameters_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Missing both"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Missing type"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"3 \", Item.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        // Missing index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, ITEM_TYPE_RESUME, ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parser_invalidIndex_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"abc \" + ITEM_TYPE_RESUME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void parser_invalidType_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        assertParseFailure(parser, \"3 \" + ITEM_TYPE_INVALID,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                \"Not a valid item type!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.BENSON;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(new ResumeBook(), new ResumeBook(modelManager.getResumeBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userPrefs.setResumeBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        userPrefs.setResumeBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setResumeBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.setResumeBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(path, modelManager.getResumeBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPersonalDetail(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(modelManager.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.addPersonalDetail(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(modelManager.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonalDetailList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook differentAddressBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.updateFilteredPersonalDetailList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        modelManager.updateFilteredPersonalDetailList(PREDICATE_SHOW_ALL_ITEMS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        differentUserPrefs.setResumeBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "-": 107,
      "duongphammmm": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ResumeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.UniqueItemList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ResumeBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final ResumeBook resumeBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(Collections.emptyList(), resumeBook.getPersonalDetailList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e resumeBook.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData_withValidReadOnlyResumeBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(newData, resumeBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cItem\u003e newItems \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBookStub newData \u003d new ResumeBookStub(newItems);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e resumeBook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_nullPersonalDetail_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e resumeBook.hasPersonalDetail(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_personalDetailNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(resumeBook.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_personalDetailInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addPersonalDetail(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(resumeBook.hasPersonalDetail(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void hasPersonalDetail_personalDetailWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.addPersonalDetail(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(resumeBook.hasPersonalDetail(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void getPersonalDetailList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e resumeBook.getPersonalDetailList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private static class ResumeBookStub implements ReadOnlyResumeBook {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        private Person person \u003d new Person(new DisplayPicture(\"/images/Duke.png\"), new Name(\"Default name\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                \"Default description\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "                new Phone(\"000\"), new Email(\"000@gmail.com\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new Github(\"000\"), \"Default university\", \"Default major\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                new Time(\"12-9999\"), new Time(\"12-9999\"), 5.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        private ObservablePerson observableUser \u003d new ObservablePerson(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        private final ObservableList\u003cItem\u003e itemsToDisplay \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final UniqueItemList\u003cInternship\u003e internships \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final UniqueItemList\u003cProject\u003e projects \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final UniqueItemList\u003cSkill\u003e skills \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        private final UniqueItemList\u003cResume\u003e resumes \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        private final UniqueItemList\u003cNote\u003e notes \u003d new UniqueItemList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBookStub(Collection\u003cItem\u003e itemsToDisplay) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            this.itemsToDisplay.setAll(itemsToDisplay);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // TODO: fix the stub methods"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasSkillId(int i) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public Person getUser() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return observableUser.getInternalPerson();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public ObservableList\u003cItem\u003e getItemToDisplayList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return itemsToDisplay;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        public ObservableList\u003cNote\u003e getNoteToDisplayList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public UniqueItemList\u003cInternship\u003e getInternshipList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return internships;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public UniqueItemList\u003cProject\u003e getProjectList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return projects;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public UniqueItemList\u003cSkill\u003e getSkillList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return skills;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public UniqueItemList\u003cResume\u003e getResumeList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return resumes;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        public UniqueItemList\u003cNote\u003e getNoteList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public ObservablePerson getObservableUser() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        public void addNote(Note note) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasResumeId(int resumeIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasInternshipId(int i) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        public boolean hasProjectId(int i) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Internship getInternshipByIndex(Index index) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new Internship(new Name(\"Company 1\"), \"Software Engineer\", new Time(\"02-2019\"),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                    new Time(\"05-2020\"), \"I did nothing\", new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        public List\u003cInternship\u003e getInternshipsByTag(Tag tag) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Internship getInternshipById(int id) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new Internship(new Name(\"Company 1\"), \"Software Engineer\", new Time(\"02-2019\"),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    new Time(\"05-2020\"), \"I did nothing\", new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Project getProjectByIndex(Index index) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new Project(new Name(\"Project 1\"), new Time(\"01-2020\"), new Website(\"www.website.com\"),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    \"I did nothing\", new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        public List\u003cProject\u003e getProjectsByTag(Tag tag) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Project getProjectById(int id) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new Project(new Name(\"Project 1\"), new Time(\"01-2020\"), new Website(\"www.website.com\"),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                    \"I did nothing\", new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Skill getSkillByIndex(Index index) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            return new Skill(new Name(\"Useless skill 1\"), Level.ADVANCED, new HashSet\u003c\u003e(), -1);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        public List\u003cSkill\u003e getSkillsByTag(Tag tag) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        public Skill getSkillById(int id) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return new Skill(new Name(\"Useless skill 1\"), Level.ADVANCED, new HashSet\u003c\u003e(), -1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public Resume getResumeByIndex(Index index) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            return new Resume(new Name(\"Resume 1\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getInternshipSize() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getProjectSize() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getSkillSize() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        public int getResumeSize() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        public Note getNoteByIndex(Index index) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        public int getNoteListSize() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 24,
      "wardetu": 35,
      "nhamhung": 36,
      "duongphammmm": 162,
      "chrisjwelly": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setResumeBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 3,
      "-": 17,
      "duongphammmm": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/InternshipTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_NAME_GOOGLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.GOOGLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.NINJA_VAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalInternship.PAYPAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class InternshipTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship internship \u003d new InternshipBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e internship.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isSameInternship() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(PAYPAL.isSame(PAYPAL));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(PAYPAL.isSame(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different role and description -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship editedPaypal \u003d new InternshipBuilder(PAYPAL).withRole(VALID_INTERNSHIP_ROLE_FRONTEND)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .withDescription(VALID_INTERNSHIP_DESCRIPTION).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(PAYPAL.isSame(editedPaypal));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedPaypal \u003d new InternshipBuilder(PAYPAL).withName(VALID_INTERNSHIP_NAME_GOOGLE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(PAYPAL.isSame(editedPaypal));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship ninjaCopy \u003d new InternshipBuilder(NINJA_VAN).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(NINJA_VAN.equals(ninjaCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(NINJA_VAN.equals(NINJA_VAN));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different internship -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(GOOGLE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Internship editedNinja \u003d new InternshipBuilder(NINJA_VAN).withName(VALID_INTERNSHIP_NAME_GOOGLE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(editedNinja));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different role -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedNinja \u003d new InternshipBuilder(NINJA_VAN).withRole(VALID_INTERNSHIP_ROLE_FRONTEND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(editedNinja));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different from -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedNinja \u003d new InternshipBuilder(NINJA_VAN).withFrom(\"05-2019\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(editedNinja));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different to -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedNinja \u003d new InternshipBuilder(NINJA_VAN).withTo(\"02-2018\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(editedNinja));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedNinja \u003d new InternshipBuilder(NINJA_VAN).withTags(VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(NINJA_VAN.equals(editedNinja));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.model.util.ItemUtil.DEFAULT_USER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Person defaultUser \u003d DEFAULT_USER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Person user1 \u003d new Person(new DisplayPicture(\"/images/Duke.png\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            new Name(\"Your Name\"), \"Your Description\", new Phone(\"000\"), new Email(\"youremail@gmail.com\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            new Github(\"yourgithub\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            \"Your University\", \"Your Major\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            new Time(\"12-9999\"), new Time(\"12-9999\"), 0.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Person user2 \u003d new Person(new DisplayPicture(\"/images/Duke.png\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            new Name(\"My Name\"), \"My Description\", new Phone(\"000\"), new Email(\"myemail@gmail.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            new Github(\"mygithub\"), \"My University\", \"My Major\", new Time(\"12-9999\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "            new Time(\"12-9999\"), 0.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(user1.toString(), defaultUser.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(user1.toString(), user2.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(user1, null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(user1, 5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(user1, user2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(user1, defaultUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 5,
      "duongphammmm": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ORBITAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_DUKE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_ORBITAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_DUKE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_ORBITAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalProject.DUKE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalProject.ORBITAL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ProjectTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e project.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isSameProject() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(DUKE.isSame(DUKE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(DUKE.isSame(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different website and description -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project editedDuke \u003d new ProjectBuilder(DUKE).withWebsite(VALID_WEBSITE_ORBITAL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ORBITAL).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(DUKE.isSame(editedDuke));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedDuke \u003d new ProjectBuilder(DUKE).withName(VALID_PROJECT_NAME_ORBITAL).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(DUKE.isSame(editedDuke));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project orbitalCopy \u003d new ProjectBuilder(ORBITAL).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(ORBITAL.equals(orbitalCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(ORBITAL.equals(ORBITAL));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ORBITAL.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ORBITAL.equals(5));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ORBITAL.equals(DUKE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Project editedOrbital \u003d new ProjectBuilder(ORBITAL).withName(VALID_PROJECT_NAME_DUKE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ORBITAL.equals(editedOrbital));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different website -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedOrbital \u003d new ProjectBuilder(ORBITAL).withWebsite(VALID_WEBSITE_DUKE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ORBITAL.equals(editedOrbital));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedOrbital \u003d new ProjectBuilder(ORBITAL).withTime(\"05-2019\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ORBITAL.equals(editedOrbital));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedOrbital \u003d new ProjectBuilder(ORBITAL).withTags(VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(ORBITAL.equals(editedOrbital));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/ResumeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalResume.ME_RESUME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalResume.SE_RESUME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ResumeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Resume resume \u003d new ResumeBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e resume.getTags().remove(0));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(SE_RESUME.equals(SE_RESUME));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(SE_RESUME.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different object -\u003e return false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(SE_RESUME.equals(ME_RESUME));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/SkillTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_NAME_REACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalSkill.GIT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalSkill.REACT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.SkillBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class SkillTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill skill \u003d new SkillBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e skill.getTags().remove(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill gitCopy \u003d new SkillBuilder(GIT).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(GIT.equals(gitCopy));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(GIT.equals(GIT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(GIT.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(GIT.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different skill -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(GIT.equals(REACT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Skill editedGit \u003d new SkillBuilder(GIT).withName(VALID_SKILL_NAME_REACT).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(GIT.equals(editedGit));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different level -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        editedGit \u003d new SkillBuilder(GIT).withLevel(Level.ADVANCED).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(GIT.equals(editedGit));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/UniqueItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static seedu.address.testutil.TypicalPersonalDetails.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.exceptions.DuplicateItemException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.exceptions.ItemNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.testutil.PersonalDetailBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class UniqueItemListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // TODO: add this test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private final UniqueItemList uniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(uniqueItemList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(uniqueItemList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(uniqueItemList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.add(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(null, ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(ALICE, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.setItem(ALICE, ALICE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItem(ALICE, ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Item editedAlice \u003d new PersonalDetailBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItem(ALICE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(editedAlice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItem(ALICE, BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItem(ALICE, BOB));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.remove(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.remove(ALICE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.remove(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((UniqueItemList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItems(expectedUniqueItemList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((List\u003cItem\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cItem\u003e itemList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        uniqueItemList.setItems(itemList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        expectedUniqueItemList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(expectedUniqueItemList, uniqueItemList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        List\u003cItem\u003e listWithDuplicateItems \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItems(listWithDuplicateItems));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            -\u003e uniqueItemList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 22,
      "duongphammmm": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/DisplayPictureTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class DisplayPictureTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private DisplayPicture pic1 \u003d new DisplayPicture(\"/Users/nhamquochung/Desktop/test.png\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private DisplayPicture pic2 \u003d new DisplayPicture(\"/images/duke.png\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DisplayPicture(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(pic1.toString(), \"/Users/nhamquochung/Desktop/test.png\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(pic2, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(pic2, 5);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(pic2, pic1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(pic2, new DisplayPicture(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 1,
      "duongphammmm": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/GithubTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class GithubTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Github(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_invalidGitHub_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String invalidGithub \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Github(invalidGithub));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isValidGithub_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Github.isValidGithub(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isValidGithub() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // blank github"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Github.isValidGithub(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Github.isValidGithub(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Github.isValidGithub(\"duong#$!\")); // special characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Github.isValidGithub(\"duo---ng\")); // multiple consecutive hyphens"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Github.isValidGithub(\"-duong\")); // begins with a hyphen"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Github.isValidGithub(\"duong-\")); // ends with a hyphen"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Github.isValidGithub(\"phamthuyduongphamthuyduongphamthuyduongg\")); // more than 39 characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // valid github"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Github.isValidGithub(\"duongphammmm\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Github.isValidGithub(\"helloImHai\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Github.isValidGithub(\"wardetu\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Github.isValidGithub(\"chrisjwelly\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Github.isValidGithub(\"nhamhung\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isEqual() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Github git1 \u003d new Github(\"duongphammmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Github git2 \u003d new Github(\"helloImHai\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different type"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(git1.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(git1.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same Github"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(git1.equals(git1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // same value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(git1.equals(new Github(\"duongphammmm\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // different value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(git1.equals(git2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.InternshipBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.ResumeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.testutil.SkillBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"AWS\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new InternshipBuilder().withName(\"AWS Software Engineering\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"UX\", \"UI\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new SkillBuilder().withName(\"UX UI\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Orbital\", \"Mobile\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new ProjectBuilder().withName(\"Orbital Project\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"reSuMe\", \"soFtwaRe\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(predicate.test(new ResumeBuilder().withName(\"Software Engineering Resume\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(predicate.test(new ProjectBuilder().withName(\"Orbital\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Github\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(predicate.test(new SkillBuilder().withName(\"Adobe Photoshop\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // Keywords match role, from, to and description, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"intern\", \"05-2020\", \"08-2020\", \"helloImHai\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(predicate.test(new InternshipBuilder().withName(\"Ninja Van\").withRole(\"intern\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .withFrom(\"05-2020\").withTo(\"08-2020\").withDescription(\"helloImHai\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 1,
      "duongphammmm": 20,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 1,
      "duongphammmm": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/TimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isValidTime_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // blank time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // invalid pattern"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Time.isValidTime(\"09-01-1998\")); // extra date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Time.isValidTime(\"1998\")); // missing month"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Time.isValidTime(\"01\")); // missing year"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Time.isValidTime(\"09/01/1998\")); // wrong format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Time.isValidTime(\"duongpham\")); // wrong format, not parsable"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Time.isValidTime(\"01-1998\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void format_successful() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        Time validTime \u003d new Time(\"01-1998\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(validTime.format(), \"Jan 1998\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/TypeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class TypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Type resume \u003d Type.generate(\"res\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Type skill \u003d Type.generate(\"ski\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Type internship \u003d Type.generate(\"int\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Type project \u003d Type.generate(\"proj\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Type invalid \u003d Type.generate(\"hello\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void generate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Type.generate(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void getAlias() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(resume.getAlias(), \"res\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(skill.getAlias(), \"ski\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(resume.getAlias(), skill.getAlias());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void getFullType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(internship.getFullType(), \"Internship\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(project.getFullType(), \"Project\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(internship.getFullType(), project.getFullType());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(invalid.getFullType(), \"Not a valid type\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertEquals(resume, Type.generate(\"res\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(resume, internship);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertNotEquals(resume, invalid);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/item/field/WebsiteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.model.item.field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class WebsiteTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Website(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void constructor_invalidWebsite_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        String invalidWebsite \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Website(invalidWebsite));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public void isValidWebsite() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // null website"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Website(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // blank website"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Website.isValidWebsite(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Website.isValidWebsite(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Website.isValidWebsite(\"orbital\")); // missing domain"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Website.isValidWebsite(\"orbital.\")); // missing domain name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Website.isValidWebsite(\"orbital//www.orbital.com\")); // invalid http"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertFalse(Website.isValidWebsite(\"https://www.orbital--orbital.com\")); // invalid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        // valid website"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Website.isValidWebsite(\"https://www.orbital.com\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Website.isValidWebsite(\"www.orbital.com\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        assertTrue(Website.isValidWebsite(\"orbital.com\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/ItemUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "public class ItemUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void yieldId_withoutIdAtFirst_doFromZeroToAHundred() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; i++) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "            assertEquals(i, ItemUtil.yieldId(\"yieldIdTest\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setBaseId_legalValues_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"setBaseIdTest\", 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assertEquals(1, ItemUtil.yieldId(\"setBaseIdTest\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assertEquals(2, ItemUtil.yieldId(\"setBaseIdTest\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"setBaseIdTest\", 1000000);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assertEquals(1000000, ItemUtil.yieldId(\"setBaseIdTest\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void setBaseId_illegalValues_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Plain new item"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"The id value cannot be negative.\", () -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                ItemUtil.setBaseIdOfItemType(\"setBaseIdTest1\", -1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        // Existing item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.setBaseIdOfItemType(\"setBaseIdTest\", 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ItemUtil.yieldId(\"setBaseIdTest\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"The id value cannot be negative.\", () -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                ItemUtil.setBaseIdOfItemType(\"setBaseIdTest1\", -10000));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedItemTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "////import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "////import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wardetu"
        },
        "content": "////import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wardetu"
        },
        "content": "////import static seedu.address.testutil.TypicalPersonalDetails.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wardetu"
        },
        "content": "///*import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.field.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import seedu.address.model.item.field.Phone;*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//public class JsonAdaptedItemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.TypicalPersonalDetails.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyResumeBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ResumeBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ReadOnlyResumeBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.addPersonalDetail(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.removePersonalDetail(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.addPersonalDetail(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void saveAddressBook(ReadOnlyResumeBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new ResumeBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 88,
      "-": 13,
      "duongphammmm": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.testutil.TypicalPersonalDetails;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonSerializableResumeBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                JsonSerializableResumeBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ResumeBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        ResumeBook typicalPersonsAddressBook \u003d TypicalPersonalDetails.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        //assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonSerializableResumeBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                JsonSerializableResumeBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        JsonSerializableResumeBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "                JsonSerializableResumeBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableResumeBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 17,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.UserPrefs;*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        userPrefs.setResumeBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 101,
      "-": 21,
      "duongphammmm": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;*/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.testutil.TypicalPersonalDetails.getTypicalAddressBook;*/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.UserPrefs;*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ResumeBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        ReadOnlyResumeBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        //assertEquals(original, new ResumeBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wardetu"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 48,
      "-": 13,
      "duongphammmm": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InternshipBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Internship objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class InternshipBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Duke\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_FROM \u003d \"03-2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_TO \u003d \"06-2020\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"Software engineering intern\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Did some work, made some money\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"java\", \"backend\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String role;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public InternshipBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        from \u003d new Time(DEFAULT_FROM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        to \u003d new Time(DEFAULT_TO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        role \u003d DEFAULT_ROLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder(Internship internshipToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        name \u003d internshipToCopy.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        from \u003d internshipToCopy.getFrom();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        to \u003d internshipToCopy.getTo();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        role \u003d internshipToCopy.getRole();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        description \u003d internshipToCopy.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(internshipToCopy.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a InternshipBuilder with a certain name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return InternshipBuilder with new name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public InternshipBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain role."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param role String role"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new role"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withRole(String role) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain to."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param to String to"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new to"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withTo(String to) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.to \u003d new Time(to);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain from."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param from String from"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new from"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withFrom(String from) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.from \u003d new Time(from);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a InternshipBuilder with a certain description."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param description String description"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return InternshipBuilder with new description"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Internship} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public InternshipBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Internship build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Internship(name, role, from, to, description, tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 54,
      "chrisjwelly": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItemIndicesBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A builder class to support testing of ResumeEditCommand and TagPullCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class ItemIndicesBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cInteger\u003e itemIndices;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ItemIndicesBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        itemIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Initializes the ItemIndicesBuilder with the data of {@code itemIndices}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param itemIndices"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ItemIndicesBuilder(List\u003cInteger\u003e itemIndices) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.itemIndices \u003d itemIndices;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns the ItemIndicesBuilder which has included index i."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param i an Integer representing the index of an item."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ItemIndicesBuilder with the specified index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ItemIndicesBuilder add(Integer i) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        itemIndices.add(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Returns an empty Optional which represents the item prefix not supplied in the argument of the command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return An empty Optional."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static Optional\u003cList\u003cInteger\u003e\u003e empty() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public Optional\u003cList\u003cInteger\u003e\u003e build() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return Optional.of(itemIndices);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return itemIndices"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrisjwelly": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ReadOnlyResumeBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wardetu"
        },
        "content": "import seedu.address.model.item.ObservablePerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Path getResumeBookFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setResumeBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setResumeBook(ReadOnlyResumeBook resumeBook) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ReadOnlyResumeBook getResumeBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ReadOnlyResumeBook getStatelessResumeBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setUser(Person person) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public Person getUser() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wardetu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public ObservablePerson getObservableUser() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public boolean hasNote(Note note) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void setNote(Note target, Note editedNote) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void deleteNote(Note note) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public Note getNote(Index index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortNotes(Comparator\u003cNote\u003e sortComparator) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public int getNoteListSize() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasInternship(Internship internship) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void addInternship(Internship internship) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setInternship(Internship target, Internship editedInternship) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void deleteInternship(Internship internship) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Internship getInternshipByIndex(Index index) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Internship getInternshipById(int id) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cInternship\u003e getInternshipsByTag(Tag tag) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortInternships(Comparator\u003cInternship\u003e sortComparator) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getInternshipSize() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setInternshipToDisplay() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasProject(Project project) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void addProject(Project project) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setProject(Project target, Project editedProject) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void deleteProject(Project key) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Project getProjectByIndex(Index index) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Project getProjectById(int id) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cProject\u003e getProjectsByTag(Tag tag) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortProjects(Comparator\u003cProject\u003e sortComparator) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getProjectSize() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setProjectToDisplay() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasSkill(Skill skill) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void addSkill(Skill skill) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setSkill(Skill target, Skill editedSkill) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void deleteSkill(Skill key) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Skill getSkillByIndex(Index index) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Skill getSkillById(int id) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public List\u003cSkill\u003e getSkillsByTag(Tag tag) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortSkills(Comparator\u003cSkill\u003e sortComparator) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getSkillSize() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setSkillToDisplay() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasResume(Resume resume) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void addResume(Resume resume) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setResume(Resume target, Resume editedResume) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void editResume(Resume target, List\u003cInteger\u003e internshipsId, List\u003cInteger\u003e projectsId,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "                           List\u003cInteger\u003e skillsId) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasResumeId(int resumeIndex) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void deleteResume(Resume resume) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Resume getResumeByIndex(Index index) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    public void sortResumes(Comparator\u003cResume\u003e sortComparator) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wardetu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public int getResumeSize() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setResumeToDisplay() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ObservableList\u003cItem\u003e getFilteredItemList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void setItemsToDisplay(String typeString) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public ObservableList\u003cNote\u003e getFilteredNoteList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public void updateFilteredNoteList(Predicate\u003cItem\u003e predicate) {}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public String getDisplayType() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean canUndoResumeBook() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean canRedoResumeBook() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void undoResumeBook() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void redoResumeBook() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public void commitResumeBook() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasInternshipId(int i) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasProjectId(int i) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public boolean hasSkillId(int i) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 303,
      "wardetu": 33,
      "nhamhung": 39,
      "chrisjwelly": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NoteBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Note objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class NoteBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Finish homework\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"03-2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"java\", \"2103\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Boolean done;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public NoteBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public NoteBuilder(Note noteToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d noteToCopy.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        time \u003d noteToCopy.getTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        done \u003d noteToCopy.isDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(noteToCopy.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a NoteBuilder with a certain name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return NoteBuilder with new name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public NoteBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a NoteBuilder with a certain time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param time String time"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return NoteBuilder with new time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public NoteBuilder withTime(String time) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a NoteBuilder done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return NoteBuilder with done set to true."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public NoteBuilder done() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Note} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public NoteBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Returns a note."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return note as as specified by descriptions of NoteBuilder."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Note build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        Note note \u003d new Note(name, time, tags);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            note.markAsDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "import seedu.address.model.item.field.DisplayPicture;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Github;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String DEFAULT_DP \u003d \"/images/Duke.png\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"I am an aspiring software engineer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_GITHUB \u003d \"alicepauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_UNIVERSITY \u003d \"National University of Singapore\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_MAJOR \u003d \"Bachelor of Computing\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_FROM \u003d \"08-2018\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String DEFAULT_TO \u003d \"05-2022\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final double DEFAULT_CAP \u003d 5.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private DisplayPicture displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Github github;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private String university;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private String major;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Time from;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private Time to;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private double cap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        displayPicture \u003d new DisplayPicture(DEFAULT_DP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        github \u003d new Github(DEFAULT_GITHUB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        university \u003d DEFAULT_UNIVERSITY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        major \u003d DEFAULT_MAJOR;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        from \u003d new Time(DEFAULT_FROM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        to \u003d new Time(DEFAULT_TO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        cap \u003d DEFAULT_CAP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        displayPicture \u003d personToCopy.getDisplayPicture();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        description \u003d personToCopy.getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        github \u003d personToCopy.getGithub();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        university \u003d personToCopy.getUniversity();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        major \u003d personToCopy.getMajor();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        from \u003d personToCopy.getFrom();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        to \u003d personToCopy.getTo();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        cap \u003d personToCopy.getCap();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nhamhung"
        },
        "content": "        return new Person(displayPicture, name, description, phone, email, github, university, major, from, to, cap);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nhamhung": 10,
      "-": 58,
      "duongphammmm": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.logic.commands.add.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 1,
      "-": 30,
      "duongphammmm": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProjectBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Website;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Project objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Duke\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"03-2020\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_WEBSITE \u003d \"duke.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"For a little module called CS2103T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"java\", \"2103\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Website website;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ProjectBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        website \u003d new Website(DEFAULT_WEBSITE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder(Project projectToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        name \u003d projectToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        time \u003d projectToCopy.getTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        website \u003d projectToCopy.getWebsite();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        description \u003d projectToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(projectToCopy.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a ProjectBuilder with a certain name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return ProjectBuilder with new name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ProjectBuilder withName(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ProjectBuilder with a certain time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param time String time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ProjectBuilder with new time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withTime(String time) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ProjectBuilder with a certain website."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param website String website"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ProjectBuilder with new website"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withWebsite(String website) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.website \u003d new Website(website);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ProjectBuilder with a certain description."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param description String description"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ProjectBuilder with new desc"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Project} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ProjectBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Project(name, time, website, description, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 52,
      "chrisjwelly": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ResumeBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building ResumeBook objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " *     {@code ResumeBook ab \u003d new ResumeBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "public class ResumeBookBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private ResumeBook resumeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBookBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBookBuilder(ResumeBook resumeBook) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumeBook \u003d new ResumeBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        this.resumeBook.setUser(new PersonBuilder(resumeBook.getUser()).build());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.getInternshipList().getItemList().stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .map(x -\u003e new InternshipBuilder((Internship) x).build())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .forEach(x -\u003e this.resumeBook.addInternship(x));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.getSkillList().getItemList().stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .map(x -\u003e new SkillBuilder((Skill) x).build())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .forEach(x -\u003e this.resumeBook.addSkill(x));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.getProjectList().getItemList().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .map(x -\u003e new ProjectBuilder((Project) x).build())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .forEach(x -\u003e this.resumeBook.addProject(x));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.getResumeList().getItemList().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .map(x -\u003e new ResumeBuilder((Resume) x).build())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .forEach(x -\u003e this.resumeBook.addResume(x));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.getNoteList().getItemList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .map(x -\u003e new NoteBuilder((Note) x).build())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "                .forEach(x -\u003e this.resumeBook.addNote(x));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Sets a new {@code Person} to the {@code ResumeBook} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        resumeBook.setUser(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Adds an internship to the resume book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param internship internship to add."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return builder object with added internship."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBookBuilder withInternship(Internship internship) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumeBook.addInternship(internship);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Adds a project to the resume book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param project project to add."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return builder object with added project."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBookBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumeBook.addProject(project);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Adds a note to the resume book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param note note to add."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return builder object with added note."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBookBuilder withNote(Note note) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumeBook.addNote(note);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Adds a resume to the resume book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param resume resume to add."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return builder object with added resume."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBookBuilder withResume(Resume resume) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumeBook.addResume(resume);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Adds a skill to the resume book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param skill skill to add."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return builder object with added skill."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBookBuilder withSkill(Skill skill) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        resumeBook.addSkill(skill);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public ResumeBook build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return resumeBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 59,
      "duongphammmm": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ResumeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Resume objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class ResumeBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Company A\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"backend\", \"naps\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // The actual Resume uses ids, but during building I will use the objects and map it to its ids"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    private List\u003cSkill\u003e skills \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBuilder(Resume resumeToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d resumeToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(resumeToCopy.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a ResumeBuilder with a certain name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return ResumeBuilder with new name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Resume} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public ResumeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ResumeBuilder with a newly added Internship."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param internship the Internship to be added."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ResumeBuilder with a newly added Internship."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ResumeBuilder withInternship(Internship internship) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        internships.add(internship);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ResumeBuilder with a newly added Project."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param project the Project to be added."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ResumeBuilder with a newly added Project."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ResumeBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        projects.add(project);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Creates a ResumeBuilder with a newly added Skill."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @param skill the Skill to be added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return ResumeBuilder with a newly added Skill."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public ResumeBuilder withSkill(Skill skill) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        skills.add(skill);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * Builds the Resume based on data that has been added to the ResumeBuilder."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     * @return the Resume that has been built."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Resume build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        Resume resume \u003d new Resume(name, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e internshipIds \u003d internships"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(Internship::getId)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e projectIds \u003d projects"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(Project::getId)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        List\u003cInteger\u003e skillIds \u003d skills"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .map(Skill::getId)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        resume.setInternshipIds(internshipIds);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        resume.setProjectIds(projectIds);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        resume.setSkillIds(skillIds);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "        return resume;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 55,
      "chrisjwelly": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SkillBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class to help with building Skill objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class SkillBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"React\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final String[] DEFAULT_TAGS \u003d {\"web\", \"frontend\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Level level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public SkillBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        level \u003d Level.BASIC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        tags.addAll(Arrays.stream(DEFAULT_TAGS).map(Tag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public SkillBuilder(Skill skill) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        name \u003d skill.getName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        level \u003d skill.getLevel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        tags.addAll(skill.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a SkillBuilder with a certain name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param name String name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return SkillBuilder with new name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public SkillBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Creates a SkillBuilder with a certain skill."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @param level Level of skill"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * @return SkillBuilder with new level"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public SkillBuilder withLevel(Level level) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Skill} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public SkillBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public Skill build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "        return new Skill(name, level, tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 62,
      "duongphammmm": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Index.fromOneBased(model.getFilteredItemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return Index.fromOneBased(model.getFilteredItemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static Item getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return model.getFilteredItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "duongphammmm": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Index INDEX_FOURTH_ITEM \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 3,
      "-": 9,
      "chrisjwelly": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalInternship.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FROM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_NAME_GOOGLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERNSHIP_ROLE_FRONTEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BACKEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Internship;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A utility class containing a list of {@code Internship} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TypicalInternship {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final Internship PAYPAL \u003d new InternshipBuilder().withName(\"PayPal\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withRole(\"Backend Software Intern\").withFrom(\"05-2020\").withTo(\"07-2020\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withDescription(\"I am learning new things\").withTags(VALID_TAG_BACKEND, \"SE\", VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final Internship NINJA_VAN \u003d new InternshipBuilder().withName(\"Ninja Van\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withRole(\"Ninja Intern\").withFrom(\"05-2020\").withTo(\"07-2020\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withDescription(\"My journey to become a better ninja\").withTags(\"UX\", VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Manually added - internship\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Internship GOOGLE \u003d new InternshipBuilder().withName(VALID_INTERNSHIP_NAME_GOOGLE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withRole(VALID_INTERNSHIP_ROLE_FRONTEND).withFrom(VALID_FROM).withTo(VALID_TO)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withDescription(VALID_INTERNSHIP_DESCRIPTION)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withTags(VALID_TAG_FRONTEND, VALID_TAG_JAVA, VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final String KEYWORD_MATCHING_SOFTWARE \u003d \"software\"; // A keyword that matches SOFTWARE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private TypicalInternship() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns a {@code ResumeBook} with all the typical internships."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static ResumeBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook rb \u003d new ResumeBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (Internship internship : getTypicalInternships()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            rb.addInternship(internship);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return rb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static List\u003cInternship\u003e getTypicalInternships() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PAYPAL, NINJA_VAN, GOOGLE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "duongphammmm": 34,
      "chrisjwelly": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNote.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class containing a list of {@code Note} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class TypicalNote {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Note FINISH_HOMEWORK \u003d new NoteBuilder()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withName(\"Finish Homework\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withTime(\"03-2020\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withTags()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Note FINISH_CS_2103 \u003d new NoteBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withName(\"Finish CS2103\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withTime(\"12-2020\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withTags()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPerson.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "/*import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import seedu.address.model.item.PersonalDetail;*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": " * A utility class containing a list of {@code PersonalDetail} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class TypicalPerson {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail BENSON \u003d new PersonalDetailBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail CARL \u003d new PersonalDetailBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail DANIEL \u003d new PersonalDetailBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail ELLE \u003d new PersonalDetailBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail FIONA \u003d new PersonalDetailBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail GEORGE \u003d new PersonalDetailBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail HOON \u003d new PersonalDetailBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail IDA \u003d new PersonalDetailBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail AMY \u003d new PersonalDetailBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final PersonalDetail BOB \u003d new PersonalDetailBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    private TypicalPersonalDetails() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical personal details."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static ResumeBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        ResumeBook ab \u003d new ResumeBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "        for (PersonalDetail pd : getTypicalPersonalDetails()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            ab.addItem(pd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static List\u003cPersonalDetail\u003e getTypicalPersonalDetails() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 8,
      "-": 44,
      "duongphammmm": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_DUKE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ORBITAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_DUKE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PROJECT_NAME_ORBITAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_JAVA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_DUKE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEBSITE_ORBITAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import seedu.address.model.item.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " * A utility class containing a list of {@code Project} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "public class TypicalProject {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    // Manually added - project\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Project ORBITAL \u003d new ProjectBuilder().withName(VALID_PROJECT_NAME_ORBITAL)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withTime(VALID_TIME_1).withWebsite(VALID_WEBSITE_ORBITAL)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_ORBITAL).withTags(VALID_TAG_TECH).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Project DUKE \u003d new ProjectBuilder().withName(VALID_PROJECT_NAME_DUKE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withTime(VALID_TIME_2).withWebsite(VALID_WEBSITE_DUKE).withDescription(VALID_DESCRIPTION_DUKE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withTags(VALID_TAG_TECH, VALID_TAG_JAVA).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 2,
      "duongphammmm": 7,
      "chrisjwelly": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalResume.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_NAME_FILLED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_NAME_ME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_NAME_SE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Resume;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class containing a list of {@code Resume} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class TypicalResume {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Resume SE_RESUME \u003d new ResumeBuilder().withName(VALID_RESUME_NAME_SE).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Resume ME_RESUME \u003d new ResumeBuilder().withName(VALID_RESUME_NAME_ME).build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "    public static final Resume FILLED_RESUME \u003d new ResumeBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withName(VALID_RESUME_NAME_FILLED)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withSkill(TypicalSkill.GIT)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 14,
      "chrisjwelly": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalResumeBook.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.ResumeBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class containing a list of {@code ResumeBook} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class TypicalResumeBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final ResumeBook TYPICAL \u003d new ResumeBookBuilder()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withInternship(new InternshipBuilder(TypicalInternship.GOOGLE).build())"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withInternship(new InternshipBuilder(TypicalInternship.NINJA_VAN).build())"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withInternship(new InternshipBuilder(TypicalInternship.PAYPAL).build())"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withNote((new NoteBuilder(TypicalNote.FINISH_CS_2103).build()))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withPerson(new PersonBuilder(TypicalPerson.ALICE).build())"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withProject(new ProjectBuilder(TypicalProject.ORBITAL).build())"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withProject(new ProjectBuilder(TypicalProject.DUKE).build())"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withSkill(new SkillBuilder(TypicalSkill.REACT).build())"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withSkill(new SkillBuilder(TypicalSkill.GIT).build())"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withResume(new ResumeBuilder(TypicalResume.ME_RESUME).build())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withResume(new ResumeBuilder(TypicalResume.SE_RESUME).build())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final ResumeBook TYPICAL_WITHOUT_GOOGLE \u003d new ResumeBookBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withInternship(new InternshipBuilder(TypicalInternship.NINJA_VAN).build())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withInternship(new InternshipBuilder(TypicalInternship.PAYPAL).build())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withNote(new NoteBuilder(TypicalNote.FINISH_CS_2103).build())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withPerson(new PersonBuilder(TypicalPerson.ALICE).build())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withProject(new ProjectBuilder(TypicalProject.ORBITAL).build())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withSkill(new SkillBuilder(TypicalSkill.REACT).build())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withResume(new ResumeBuilder(TypicalResume.ME_RESUME).build())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // This TypicalResumeBook is used mainly for the ResumeEdit and TagPull Command tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    // It will be best not to add more things, nor add Tags to the Items that are added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "    public static final ResumeBook TYPICAL_WITH_FILLED_RESUME \u003d new ResumeBookBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withInternship(TypicalInternship.GOOGLE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withInternship(TypicalInternship.NINJA_VAN)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withPerson(TypicalPerson.ALICE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withProject(TypicalProject.ORBITAL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withProject(TypicalProject.DUKE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withSkill(TypicalSkill.REACT)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withSkill(TypicalSkill.GIT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withResume(TypicalResume.ME_RESUME)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withResume(TypicalResume.SE_RESUME)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .withResume(TypicalResume.FILLED_RESUME)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "duongphammmm"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 29,
      "duongphammmm": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSkill.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_NAME_GIT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_NAME_REACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRONTEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TECH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.Skill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "import seedu.address.model.item.field.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "helloImHai"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " * A utility class containing a list of {@code Skill} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "helloImHai"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "public class TypicalSkill {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Skill GIT \u003d new SkillBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withName(VALID_SKILL_NAME_GIT)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withLevel(Level.BASIC)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withTags(VALID_TAG_TECH)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "    public static final Skill REACT \u003d new SkillBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withName(VALID_SKILL_NAME_REACT)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .withLevel(Level.BASIC)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrisjwelly"
        },
        "content": "            .withTags(VALID_TAG_TECH, VALID_TAG_FRONTEND)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "helloImHai"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "helloImHai": 21,
      "chrisjwelly": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wardetu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nhamhung"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wardetu": 1,
      "nhamhung": 1,
      "-": 35
    }
  }
]
