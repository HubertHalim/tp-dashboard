[
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.ui.ContactTracingMainApp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Application.launch(ContactTracingMainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/AppLogic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.commands.AppCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.conditions.Conditions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * Contact tracing application logic rendering"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public interface AppLogic\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Fetches all pings stored in model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ObservableList\u003cT\u003e getAll();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Same as {@code AppLogic} but returns pings on filter condition"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ObservableList\u003cT\u003e filterBy(Conditions\u003cT\u003e cond);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandResult execute(String command) throws ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/AppLogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.commands.AppCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.conditions.Conditions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.CommandRouter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.storage.AppStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class AppLogicManager\u003cT, M\u003e implements AppLogic\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private AppStorage\u003cT\u003e dao;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AppLogicManager.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Asserts that the user must always declare type M which is subclass of {@code AppStorage}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   dao        Data access object implementation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @throws  Exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppLogicManager(M dao) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        assert (dao instanceof AppStorage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.dao \u003d (AppStorage) dao;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Fetches all pings from the database"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return  ObservableList\u003cT\u003e   List of all pings for rendering to UI"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ObservableList\u003cT\u003e getAll() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        ArrayList\u003cT\u003e results \u003d this.dao.search();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return FXCollections.observableArrayList(results);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Fetches all pings that satisfies a conditional filter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   cond                {@code seedu.address.conditions.Conditions Class} Conditional class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return  ObservableList\u003cT\u003e   List of all pings in condition for rendering to UI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ObservableList\u003cT\u003e filterBy(Conditions\u003cT\u003e cond) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        ArrayList\u003cT\u003e results \u003d this.dao.search(cond);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return FXCollections.observableArrayList(results);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandResult execute(String command) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + command + \"]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        AppCommandResult result \u003d new CommandRouter().parse(command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JKOK005": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AppCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public interface AppCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Command interface"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   arguments           Arguments for command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return  CommandResult"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @throws  ParseException      Invalid argument case"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandResult execute(String arguments) throws ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AppCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class AppCommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        AppCommandResult otherCommandResult \u003d (AppCommandResult) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterTimestampCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class FilterTimestampCommand implements AppCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"from\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandResult execute(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/conditions/Conditions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic.conditions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public interface Conditions\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Given a class, enforce logic to see if certain properties of the class meets the condition"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * This may be used in conjunction with filtering logic"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Boolean satisfies(T objToTest);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/conditions/LiterallyNoConditions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic.conditions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * Literally no conditional filtering is being done here"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class LiterallyNoConditions\u003cT\u003e implements Conditions\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Like I said. Literally no conditional filtering is being done here."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   objToTest"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return  Always True"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Boolean satisfies(T objToTest) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CommandRouter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.commands.AppCommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.commands.FilterTimestampCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class CommandRouter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandResult parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        case FilterTimestampCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return new FilterTimestampCommand().execute(arguments);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bluetooth/BluetoothPings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.model.bluetooth;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class BluetoothPings {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private Long epochTs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private List\u003cInteger\u003e userIDs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public BluetoothPings(Long epochTs, List\u003cInteger\u003e userPairs) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.epochTs \u003d epochTs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.userIDs \u003d userPairs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public List\u003cInteger\u003e getUserIDs() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.userIDs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Long getEpochTs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.epochTs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bluetooth/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.model.bluetooth;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private int userID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Person(String name, int age, int userID) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.name   \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.age    \u003d age;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.userID \u003d userID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.age;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public int getUserID() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.userID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bluetooth/Timestamps.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.model.bluetooth;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.model.bluetooth.formatter.DateFormatterInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.model.bluetooth.formatter.SimpleDateFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class Timestamps {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private Long timestamp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private DateFormatterInterface formatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Creates a timestamp class initialized to an epoch timing"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Epoch timings are chosen by default and conversion to other timings / strings will use this value as ground truth"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param epochTs   Timestamp in unix epoch format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Timestamps(Long epochTs) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.timestamp \u003d epochTs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.formatter \u003d new SimpleDateFormatter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Defines if the given timestamp is greater or equal to a relative value"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param epochStart   Lower limit value"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return              Is this timestamp greater or equal to the lower limit?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Boolean isGreaterOrEq(int epochStart) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.timestamp \u003e\u003d epochStart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Defines if the given timestamp is smaller or equal to a relative value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param epochEnd      Upper limit value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return              Is this timestamp smaller or equal than the upper limit?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Boolean isSmallerOrEq(int epochEnd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.timestamp \u003c\u003d epochEnd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Defines if the given timestamp is within a bounded window of timing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param epochStart    Start of the window"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param epochEnd      End of the window"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return              Is this timestamp bounded within the window?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Boolean isBound(int epochStart, int epochEnd){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.isGreaterOrEq(epochStart) \u0026\u0026 this.isSmallerOrEq(epochEnd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Makes the timestamp nice looking cause people hate numbers"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return              Formatted timestamp string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.formatter.format(this.timestamp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bluetooth/formatter/DateFormatterInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.model.bluetooth.formatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public interface DateFormatterInterface {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public String format(long epochTs);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/bluetooth/formatter/SimpleDateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.model.bluetooth.formatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.TimeZone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class SimpleDateFormatter implements DateFormatterInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public String format(long epochTs) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Date date \u003d new Date(epochTs);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yy\", Locale.US);  // IDK what I\u0027m doing here. All I know is that I am converting the epoch timestamp to some timezone."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return format.format(date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/router/UiRouter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.router;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class UiRouter implements Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AppStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.conditions.Conditions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public interface AppStorage\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void create(T templateClass);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void delete(T templateClass);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void update(T oldTemplateClass, T newTemplateClass);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Given a condition, return all valid objects"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @param   cond            {@code Condition} interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return  ArrayList\u003cT\u003e    Filtered results"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ArrayList\u003cT\u003e search(Conditions cond);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ArrayList\u003cT\u003e search();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BluetoothPingsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.model.bluetooth.BluetoothPings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class BluetoothPingsStorage extends InMemoryStorage\u003cBluetoothPings\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public BluetoothPingsStorage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.init();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * TODO: Would be nice if can read from JSON file to initialize fake data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private ArrayList\u003cBluetoothPings\u003e genFakeData() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        ArrayList\u003cBluetoothPings\u003e fakePings \u003d new ArrayList\u003cBluetoothPings\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        fakePings.add(new BluetoothPings(15000000L, Arrays.asList(1, 2)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        fakePings.add(new BluetoothPings(15000100L, Arrays.asList(1, 2)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        fakePings.add(new BluetoothPings(15000200L, Arrays.asList(1, 2)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        fakePings.add(new BluetoothPings(15000300L, Arrays.asList(1, 2)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        fakePings.add(new BluetoothPings(15000400L, Arrays.asList(1, 2)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        fakePings.add(new BluetoothPings(15000500L, Arrays.asList(1, 2)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return fakePings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.fakeStorage \u003d this.genFakeData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InMemoryStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.conditions.Conditions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.conditions.LiterallyNoConditions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * Storage is maintained in memory"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * All transactions are done via memory"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * This does not work for large scale data but suffices for this project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public abstract class InMemoryStorage\u003cT\u003e implements AppStorage\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    protected ArrayList\u003cT\u003e fakeStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void delete(T templateClass) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        // TODO: Write some code here"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void create(T templateClass) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        // TODO: Write some code here"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void update(T oldTemplateClass, T newTemplateClass) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        // TODO: write some code here"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ArrayList\u003cT\u003e search(Conditions cond) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return  this.fakeStorage.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                .filter(each -\u003e cond.satisfies(each))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public ArrayList\u003cT\u003e search() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Conditions\u003cT\u003e cond \u003d new LiterallyNoConditions\u003cT\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return this.search(cond);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppCommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.commands.AppCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class AppCommandBox  extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private final AppCommandBox.CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppCommandBox(AppCommandBox.CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void handleCommandEntered() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "         *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        AppCommandResult execute(String commandText) throws ParseException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppMainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.AppLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.commands.AppCommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class AppMainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String FXML \u003d \"AppMainWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private AppLogic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private BluetoothPingPanel bluetoothPingPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private StackPane bluetoothPingPanelPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppMainWindow(Stage primaryStage, AppLogic logic) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.bluetoothPingPanel \u003d new BluetoothPingPanel(logic.getAll());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.bluetoothPingPanelPlaceholder.getChildren().add(this.bluetoothPingPanel.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(this.resultDisplay.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        AppCommandBox commandBox \u003d new AppCommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private AppCommandResult executeCommand(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            AppCommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            logger.warning(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AppUiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.AppLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class AppUiManager implements Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppUiManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private AppLogic logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private AppMainWindow mainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public AppUiManager(AppLogic logic) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            mainWindow \u003d new AppMainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, Alert.AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BluetoothPingCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.model.bluetooth.BluetoothPings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class BluetoothPingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String FXML \u003d \"BluetoothPingCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public final BluetoothPings bluetoothPings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private Label contacts;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private Label timestamp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public BluetoothPingCard(BluetoothPings bluetoothPings, int displayedIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.bluetoothPings \u003d bluetoothPings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        contacts.setText(bluetoothPings.getUserIDs().toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        timestamp.setText(bluetoothPings.getEpochTs().toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public boolean equals(Object other) {return true;}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BluetoothPingPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.model.bluetooth.BluetoothPings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class BluetoothPingPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final String FXML \u003d \"BluetoothPingPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BluetoothPingPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private ListView\u003cBluetoothPings\u003e bluetoothPingsListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public BluetoothPingPanel(ObservableList\u003cBluetoothPings\u003e bluetoothPingsList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        bluetoothPingsListView.setItems(bluetoothPingsList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        bluetoothPingsListView.setCellFactory(listView -\u003e new BluetoothPingsListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    class BluetoothPingsListViewCell extends ListCell\u003cBluetoothPings\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        protected void updateItem(BluetoothPings bluetoothPings, boolean empty) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            super.updateItem(bluetoothPings, empty);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            if (empty || bluetoothPings \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                setGraphic(new BluetoothPingCard(bluetoothPings, getIndex() +1).getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ContactTracingMainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.AppParameters;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.AppLogic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.logic.AppLogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.storage.AppStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import seedu.address.storage.BluetoothPingsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "public class ContactTracingMainApp extends Application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ContactTracingMainApp.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    protected AppLogic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    protected AppStorage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Contact tracing app ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        initLogging(this.config);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.storage    \u003d new BluetoothPingsStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.logic      \u003d new AppLogicManager(this.storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        this.ui         \u003d new AppUiManager(this.logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        logger.info(\"Starting Contact tracking app \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Contact tracking app ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    private StackPane timeFilterWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 3,
      "-": 193
    }
  },
  {
    "path": "src/main/resources/view/AppMainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"bluetoothPingPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 45
    }
  },
  {
    "path": "src/main/resources/view/BluetoothPingCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cLabel text\u003d\"Time recorded: \" /\u003e \u003cLabel fx:id\u003d\"timestamp\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cLabel text\u003d\"\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "            \u003cLabel text\u003d\"Contacts\" /\u003e \u003cLabel fx:id\u003d\"contacts\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 26
    }
  },
  {
    "path": "src/main/resources/view/BluetoothPingPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JKOK005"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "    \u003cListView fx:id\u003d\"bluetoothPingsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JKOK005"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JKOK005": 8
    }
  }
]
