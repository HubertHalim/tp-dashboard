[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        \u0027site-name\u0027: \u0027NUSProductivity\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 154,
      "watsheldon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    //testing travis, delete later"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                userPrefs.getDiaryBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 182,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns the user prefs\u0027 diary book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getDiaryBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an unmodifiable view of list of diaries */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cDiaryEntry\u003e getDiaryList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns an list of String that contains what is currently in the folder"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilesInFolderList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calender Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns a list of deadline Tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cTask\u003e getDeadlineTaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Profile Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNusModule\u003e getModulesListTaken();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "zhouxinwei97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getDiaryList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getDiaryBookFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getFilesInFolderList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getDeadlineTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getModulesListTaken();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "zhouxinwei97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Adds a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadlineAdd\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds deadline. Format of input should be:\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \" deadlineAdd desc/\u003cdescription\u003e by/{DD-MM-YYYY} cat/\u003cCategory\u003e\\n \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: deadlineAdd desc/CS2101 presentation script by/02-04-2020 cat/School Work\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline added: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Task deadlineToAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddDeadlineCommand (Task deadline) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        deadlineToAdd \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.getDeadlineTaskList().add(deadlineToAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        if (model.isEmptyDeadline(deadlineToAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new CommandException(\"There is no task to be added!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        model.addDeadline(deadlineToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + deadlineToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "                || (other instanceof AddDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "                \u0026\u0026 deadlineToAdd.equals(((AddDeadlineCommand) other).deadlineToAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 44,
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES_TAKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Adds a module to our application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"moduleAdd\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for adding modules \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"GRADE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"A+ \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module added: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final NusModule toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code NusModule}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public AddModuleCommand(NusModule module) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (model.hasModule(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(\"module already exist\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateModulesListTaken(PREDICATE_SHOW_ALL_MODULES_TAKEN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 57,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Adds a todo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds todo. Format of input should be:\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            + \" todo \u003cdescription\u003e \\n\" + \"Example: todo water plants\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Todo added: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Your todo seems to be empty!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Task todoToAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddToDoCommand(Task todoToAdd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(todoToAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.todoToAdd \u003d todoToAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        if (model.isEmptyToDo(todoToAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new CommandException(\"There is no task to be added!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        model.addToDo(todoToAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + todoToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "                || (other instanceof seedu.address.logic.commands.AddToDoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "                \u0026\u0026 todoToAdd.equals(((seedu.address.logic.commands.AddToDoCommand) other).todoToAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 48,
      "zhouxinwei97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CapCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Calculates current CAP based on NUS modules the user has taken."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class CapCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cap\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculates your current CAP based on the modules\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CAP calculated\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double result \u003d model.getCap();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String message \u003d MESSAGE_SUCCESS + \"\\n Current CAP: \" + result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.ui.CalenderDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.ui.CalenderPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Adds a deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DeleteDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadlineDelete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete deadline. Format of input should be:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \" deadlineDelete index/{num} \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: deadlineDelete index/2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline Deleted: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"No such deadline exists\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Task deadlineToDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DeleteDeadlineCommand (Task deadlineToDelete) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(deadlineToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.deadlineToDelete \u003d deadlineToDelete;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (Task.getDeadlineTaskList().size() \u003c deadlineToDelete.getIndex()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task removed \u003d Task.getDeadlineTaskList().remove(deadlineToDelete.getIndex() - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        removeUiDot(removed);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + removed);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof DeleteDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 deadlineToDelete \u003d\u003d deadlineToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy doc."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param removed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void removeUiDot(Task removed) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String[] date \u003d removed.getDate().split(\"-\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(removed);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String day \u003d date[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (CalenderPanel.getYear() \u003d\u003d year \u0026\u0026 CalenderPanel.getCurrentMonth() \u003d\u003d month) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            CalenderDate calenderDate \u003d CalenderPanel.getCalenderDatesArrayList().get(Integer.parseInt(day) - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            calenderDate.decreaseCount();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            calenderDate.decreaseCount();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            System.out.println(\"decreasedCount \" + calenderDate.getCount());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Deletes a NUS module identified using given module code from the module book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"moduleDel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for deleting modules \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: MODULE CODE \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module deleted\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode targetModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code NusModule}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DeleteModuleCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        targetModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(targetModuleCode)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(\"module does not exist!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.deleteModule(targetModuleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetModuleCode));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetModuleCode.equals(((DeleteModuleCommand) other).targetModuleCode));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DiaryAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryAddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryAdd\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for adding diary entries \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_CONTENT + \"ENTRY CONTENT\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_CONTENT + \"I failed my midterm today :( \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Diary entry added:\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final DiaryEntry diaryEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryAddCommand(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(diaryEntry);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.diaryEntry \u003d diaryEntry;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (model.isEmptyDiaryEntry(diaryEntry)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new CommandException(\"The diary entry is empty!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        model.addDiaryEntry(diaryEntry);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS + diaryEntry.getHeading()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 40,
      "zhouxinwei97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DiaryLogCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryLogCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryLog\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": shows the log of added diary entries\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String diaryLogs \u003d model.showDiaryLog();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(diaryLogs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 20,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GradeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES_TAKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Updates a module\u0027s grade in our module book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class GradeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"grade\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \": Adds or changes a grade to a module in the module book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"GRADE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"A+ \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module grade updated: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final Grade gradeToBeUpdated;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode targetModuleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public GradeCommand(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        targetModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        gradeToBeUpdated \u003d grade;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(targetModuleCode)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(\"module does not exist!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.gradeModule(targetModuleCode, gradeToBeUpdated);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateModulesListTaken(PREDICATE_SHOW_ALL_MODULES_TAKEN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + targetModuleCode + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + gradeToBeUpdated.getText());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof GradeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetModuleCode.equals(((GradeCommand) other).targetModuleCode));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 61,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_OPERATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * NotesCommand is created when a notecommand is parsed, to return what operation to be done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * implementation is not yet completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notes\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String HOME_DIRECTORY \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for creating, deleting and opening of new file \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_OPERATION + \"OPERATION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"PATH \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_OPERATION + \"open \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"test.docx \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_OPEN_SUCCESS \u003d \"Opened file \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_OPEN_FAIL \u003d \"Failed to open file \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_FIND \u003d \"Unable to find file to open \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_CREATE_SUCCESS \u003d \"File is successfully created at \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_CREATE_FAIL \u003d \"File is unable to be created at \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_NOTHING_HAPPENED \u003d \"Nothing Happened \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_MAKEDIR_SUCCESSFUL \u003d \"Directory is successfully created \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_MAKEDIR_UNSUCCESSFUL \u003d \"Directory is unable to be created \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_LISTED_DIR \u003d \"Listed Directory at \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_LISTED_DIR_FAIL \u003d \"Unable to list directory at \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String DUMMY_TEST \u003d \"Dummy test \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String notesOperation;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a new NotesCommand to Create/Open/Delete a new note."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param note the operation and location that will be done to the note."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesCommand(Notes note) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.notesOperation \u003d note.getOperation();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d note.getPath(); // the path will be with respect to the Desktop."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Opens a document at the specified path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path the given path that the document resides in."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a CommandResult based on whether the operation succeed or failed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult openDoc(String path) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                Desktop.getDesktop().open(myFile);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_OPEN_SUCCESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_OPEN_FAIL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_UNABLE_TO_FIND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a document at the specified path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path the given path that the created document will reside in."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a CommandResult based on whether the operation succeed or failed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult createDoc(String path) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String currentDirectory \u003d path.split(\"/\")[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            myFile.createNewFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes.setList(listfilesArray(currentDirectory));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_CREATE_SUCCESS + pathName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_CREATE_FAIL + pathName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a folder at the specified path."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path the given path that the created document will reside in."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a CommandResult based on whether the operation succeed or failed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult createFolder(String path) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.mkdir()) { // return true if directory is created"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes.setList(listfilesArray(path));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_MAKEDIR_SUCCESSFUL + pathName);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_MAKEDIR_UNSUCCESSFUL + pathName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Tentative, may remove this function."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path dummy"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return dummy"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult listFiles(String path) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cNotes\u003e filesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File[] allFiles \u003d myFile.listFiles();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (File f : allFiles) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] allFileName \u003d f.toString().split(File.separator);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String filename \u003d allFileName[allFileName.length - 1];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (filename.charAt(0) \u003d\u003d (\u0027.\u0027)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes note \u003d new Notes(filename);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            filesArrayList.add(note);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setList(filesArrayList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setCurrentDirectory(\"Current Directory: \" + pathName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_LISTED_DIR + pathName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Tentative, to be updated."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path dummy"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return dummy"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ArrayList\u003cNotes\u003e listfilesArray(String path) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cNotes\u003e filesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File[] allFiles \u003d myFile.listFiles();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (File f : allFiles) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] allFileName \u003d f.toString().split(File.separator);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String filename \u003d allFileName[allFileName.length - 1];"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (filename.charAt(0) \u003d\u003d (\u0027.\u0027)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes note \u003d new Notes(filename);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            filesArrayList.add(note);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return filesArrayList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.notesOperation.equals(\"open\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return openDoc(this.path);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (this.notesOperation.equals(\"create\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return createDoc(this.path);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (this.notesOperation.equals(\"createfolder\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return createFolder(this.path);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (this.notesOperation.equals(\"list\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return listFiles(this.path);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_NOTHING_HAPPENED);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override // not yet finish implementing"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return other \u003d\u003d this;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 197
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.searcher.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eSearch Command Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Handler for Search Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"Use search to perform a module search. Syntax is search \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    + \"Example: search CS1101S\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String SEARCH_FAILURE \u003d \"There is no such Module\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String SYNTAX_FAILURE \u003d \"Your command seems to be wrong\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String modToSearch;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public SearchCommand(String modToSearch) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.modToSearch \u003d modToSearch;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        Module myMod;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            myMod \u003d Search.findModule(modToSearch);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return new CommandResult(myMod.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return new CommandResult(SYNTAX_FAILURE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person person \u003d new Person(name, phone, email, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDeadlineCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class AddDeadlineCommandParser implements Parser\u003cAddDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_DESC, PREFIX_DEADLINE_DATE, PREFIX_TASK_CAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_DESC, PREFIX_DEADLINE_DATE, PREFIX_TASK_CAT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_TASK_DESC).get(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_DEADLINE_DATE).get(), argMultimap.getValue(PREFIX_TASK_CAT).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new AddDeadlineCommand(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap1 \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap2 \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (arePrefixesPresent(argMultimap1, PREFIX_MODULE_CODE, PREFIX_GRADE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap1.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    argMultimap1.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Module moduleInfo \u003d Search.findModule(moduleCode.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            int moduleCredit \u003d moduleInfo.getCredits();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Grade grade \u003d ParserUtil.parseGrade(argMultimap1.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            NusModule module \u003d new NusModule(moduleCode, moduleCredit, false, Optional.of(grade));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap2, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap2.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    argMultimap2.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Module moduleInfo \u003d Search.findModule(moduleCode.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            int moduleCredit \u003d moduleInfo.getCredits();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            NusModule module \u003d new NusModule(moduleCode, moduleCredit, true, Optional.empty());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddToDoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class AddToDoCommandParser implements Parser\u003cAddToDoCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddToDoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_DESC);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_DESC)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task todo \u003d ParserUtil.parseTodo(argMultimap.getValue(PREFIX_TASK_DESC).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new AddToDoCommand(todo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CapCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.DiaryAddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.DiaryLogCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.GradeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case NotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new NotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryLogCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryLogCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case GradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new GradeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new CapCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case AddToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new AddToDoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new AddDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case DeleteDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new DeleteDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 4,
      "Kangwkk": 16,
      "-": 75,
      "zhouxinwei97": 16,
      "watsheldon": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_NOTES_OPERATION \u003d new Prefix(\"ops/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_NOTES_PATH \u003d new Prefix(\"loc/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final Prefix PREFIX_ENTRY_CONTENT \u003d new Prefix(\"ec/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_DESC \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_DATE \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_CAT \u003d new Prefix(\"cat/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_OPERATION \u003d new Prefix(\"op/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_INDEX \u003d new Prefix(\"index/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 15,
      "zhouxinwei97": 10,
      "watsheldon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteDeadlineCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DeleteDeadlineCommandParser implements Parser\u003cDeleteDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DeleteDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_INDEX)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    DeleteDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task deadline \u003d ParserUtil.parseRemoveDeadline(argMultimap.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new DeleteDeadlineCommand(deadline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new DeleteModuleCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiaryAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.DiaryAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy Java docs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryAddCommandParser implements Parser\u003cDiaryAddCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy Java docs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ENTRY_CONTENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ENTRY_CONTENT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DiaryAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String entryContent \u003d argMultimap.getValue(PREFIX_ENTRY_CONTENT).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        DiaryEntry diaryEntry \u003d new DiaryEntry(entryContent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new DiaryAddCommand(diaryEntry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 38,
      "zhouxinwei97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.GradeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new GradeCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class GradeCommandParser implements Parser\u003cGradeCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GradeCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an GradeCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public GradeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_GRADE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GradeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Module moduleInfo \u003d Search.findModule(moduleCode.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        int moduleCredit \u003d moduleInfo.getCredits();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new GradeCommand(moduleCode, grade);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 52,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NotesCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_OPERATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new NotesCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCommandParser implements Parser\u003cNotesCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotesCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an NotesCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NOTES_OPERATION, PREFIX_NOTES_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTES_OPERATION, PREFIX_NOTES_PATH)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes note \u003d ParserUtil.parseNotesOperation(argMultimap.getValue(PREFIX_NOTES_OPERATION).get(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_NOTES_PATH).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new NotesCommand(note);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.ToDo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String NotesOperation, @code String path} into a {@code Notes}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param notesOperation operation done, to check if it is either open, create or delete."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path path and filename to be created"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a new note object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException when the given {@code notesoperation} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Notes parseNotesOperation(String notesOperation, String path) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(notesOperation);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedOperation \u003d notesOperation.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Notes.isValidOperation(trimmedOperation)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Notes.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Notes(notesOperation, path);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses a {@code String moduleCode} into an {@code ModuleCode}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim().toUpperCase();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses a {@code String grade} into an {@code Grade}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Grade parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedGrade \u003d grade.trim().toUpperCase();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Grade.getGrade(trimmedGrade);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String description, @code String date} into an {@code Deadline}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Task parseDeadline(String description, String date, String category) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(description, date);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Deadline.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Deadline(trimmedDescription, trimmedDate, trimmedCategory, \"add\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String description, @code String date} into an {@code Deadline}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Task parseRemoveDeadline(String index) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        int indexInt \u003d Integer.parseInt(index.trim());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Deadline(indexInt, \"delete\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String Description} into an {@code Todo}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Task parseTodo(String description) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new ToDo(trimmedDescription);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 32,
      "-": 108,
      "zhouxinwei97": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eSearchCommandParserClass\u003c/h1\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Simple Parser for Search Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Search Command Parser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param args String of Module Code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return Search Command Object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @throws ParseException Incase you type wrong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.SYNTAX_FAILURE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return new SearchCommand(args.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private DiaryBook diaryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook \u003d new DiaryBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setDiaryEntry(newData.getDiaryList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setDiaryEntry(ObservableList\u003cDiaryEntry\u003e diaryEntry) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryBook.setDiary(diaryEntry);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * dummy java docs."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param entry"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public boolean isEmptyDiaryEntry(DiaryEntry entry) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        // implement later"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return diaryBook.getObservableList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addDiaryEntry(DiaryEntry diaryentry) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.diaryBook.getObservableList().add(diaryentry);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 120,
      "watsheldon": 9,
      "zhouxinwei97": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Predicate\u003cNotes\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASK \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Predicate\u003cNusModule\u003e PREDICATE_SHOW_ALL_MODULES_TAKEN \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getDiaryBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Diary Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    boolean isEmptyDiaryEntry(DiaryEntry diaryEntry);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    void addDiaryEntry(DiaryEntry diaryEntry);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    String showDiaryLog();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cDiaryEntry\u003e getDiaryList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an list of String that contains what is currently in the folder */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilesInFolderList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Updates the notes list by the given {@code predicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void updateNotesList(Predicate\u003cNotes\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CAP Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    boolean hasModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code module} must not already exist in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void addModule(NusModule module);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void deleteModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void gradeModule(ModuleCode moduleCode, Grade grade);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    double getCap();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNusModule\u003e getModulesListTaken();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deadline \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Adds deadline."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void addDeadline(Task deadline);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Checks if content of deadline is empty"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    boolean isEmptyDeadline(Task deadline);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an list of Deadline that is currently in the list */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cTask\u003e getDeadlineTaskList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Updates the deadline list by the given {@code predicate}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TD \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Adds todo."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void addToDo(Task todo);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Checks if content of todo is empty"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    boolean isEmptyToDo(Task todo);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 19,
      "xuanxinng": 20,
      "-": 87,
      "watsheldon": 4,
      "zhouxinwei97": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final ObservableList\u003cDiaryEntry\u003e diaryEntries;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private DiaryBook diaryBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final FilteredList\u003cNotes\u003e filesInFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private ModuleBook moduleBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final FilteredList\u003cTask\u003e deadlineTaskList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final FilteredList\u003cNusModule\u003e moduleListTaken;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryEntries \u003d this.addressBook.getDiaryList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook \u003d new DiaryBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesInFolder \u003d new FilteredList\u003c\u003e(Notes.getAllFilesInFolder());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList \u003d new FilteredList\u003c\u003e(Task.getNewDeadlineTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moduleListTaken \u003d new FilteredList\u003c\u003e(moduleBook.getModulesTakenList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Diary Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void addDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook.addEntry(diaryEntry);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public boolean isEmptyDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        // implement later"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String showDiaryLog() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryBook.showLog();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return userPrefs.getDiaryBookFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return diaryEntries;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cap Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.hasModule(moduleCode);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModule(module);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.deleteModule(moduleCode);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void gradeModule(ModuleCode moduleCode, Grade updatedGrade) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.gradeModule(moduleCode, updatedGrade);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.getCap();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return moduleListTaken;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moduleListTaken.setPredicate(predicate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an list of String that contains what is currently in the folder */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return filesInFolder;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void updateNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesInFolder.setPredicate(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deadline Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Dummy java docs"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param deadline contains task"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addDeadline(Task deadline) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean isEmptyDeadline(Task deadline) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an list of String that contains what is currently in the folder */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineTaskList;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList.setPredicate(predicate);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TD Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addToDo(Task todo) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean isEmptyToDo(Task todo) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 32,
      "xuanxinng": 27,
      "-": 151,
      "watsheldon": 19,
      "zhouxinwei97": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns a list of diary entries"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cDiaryEntry\u003e getDiaryList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "zhouxinwei97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Path diaryBookFilePath \u003d Paths.get(\"data\", \"stub-diaryEntries.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    // Diary Book entry at startup"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return diaryBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 87,
      "zhouxinwei97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/DiaryBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * dummy javadocs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryBook {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private List\u003cDiaryEntry\u003e diaryEntries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final ObservableList\u003cDiaryEntry\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryBook() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.diaryEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryBook(List\u003cDiaryEntry\u003e diaryEntries) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.diaryEntries \u003d diaryEntries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setDiary(ObservableList\u003cDiaryEntry\u003e diaryEntry) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.internalList.addAll(diaryEntry);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cDiaryEntry\u003e getObservableList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String showLog() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (diaryEntries.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return \"There are currently no entries in your diary book!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        int entryId \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        for (DiaryEntry entry : diaryEntries) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            sb.append(entryId++).append(\". \").append(entry.getHeading()).append(\"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String showEntry(int entryId) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryEntries.get(entryId - 1).toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.internalList.add(diaryEntry);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 33,
      "zhouxinwei97": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/DiaryEntry.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryEntry {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private Optional\u003cWeather\u003e weather;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private Optional\u003cMood\u003e mood;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private String entryContent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryEntry(LocalDate date, Weather weather, Mood mood, String entryContent) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.weather \u003d Optional.ofNullable(weather);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.mood \u003d Optional.ofNullable(mood);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.entryContent \u003d entryContent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryEntry(String entryContent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this(LocalDate.now(), null, null, entryContent);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String getHeading() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String heading \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        heading +\u003d \" DATE: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" | \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        heading +\u003d \"WEATHER: \" + (weather.isPresent() ? weather.get().toString() : \"N.A.\") + \" | \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        heading +\u003d \"MOOD: \" + (mood.isPresent() ? mood.get().toString() : \"N.A.\") + \" | \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return heading + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getEntryContent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return entryContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cWeather\u003e getWeather() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return weather;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cMood\u003e getMood() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return mood;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String dairyDisplay \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        dairyDisplay +\u003d getHeading();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        dairyDisplay +\u003d \"_\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        dairyDisplay +\u003d entryContent + \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return dairyDisplay;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 41,
      "zhouxinwei97": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/CalmMood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class CalmMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CalmMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"calm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/HappyMood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class HappyMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public HappyMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"happy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/Mood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public abstract class Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final String mood;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    protected Mood(String mood) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return \"[\" + mood + \"]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 14,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/SadMood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class SadMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public SadMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"sad\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/StressedMood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class StressedMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public StressedMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"stressed\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/CloudyWeather.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class CloudyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CloudyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"cloudy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/RainyWeather.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class RainyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public RainyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"rainy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/SunnyWeather.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class SunnyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public SunnyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"sunny\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/Weather.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public abstract class Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final String weather;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    protected Weather(String weather) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return \"[\" + weather + \"]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 14,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/WindyWeather.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy javadocs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class WindyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public WindyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"windy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 7,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/Notes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Represents a Note to be created."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class Notes {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"operation should contain open, create, createfolder and delete only and it should not be left blank.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String HOME_DIRECTORY \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static String currentDirectory \u003d \"Current Directory: \" + HOME_DIRECTORY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String[] validOperationsDummy \u003d {\"open\", \"create\", \"delete\", \"createfolder\", \"list\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final HashSet\u003cString\u003e VALID_OPERATIONS \u003d new HashSet\u003c\u003e(Arrays.asList(validOperationsDummy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ObservableList\u003cNotes\u003e filesArrayListFiltered;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String operation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes(String operation, String path) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.operation \u003d operation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes(String path) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.operation \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static boolean isValidOperation(String operation) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return VALID_OPERATIONS.contains(operation.toLowerCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ObservableList\u003cNotes\u003e getAllFilesInFolder() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(HOME_DIRECTORY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cNotes\u003e filesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File[] allFiles \u003d myFile.listFiles();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (File f : allFiles) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] allFileName \u003d f.toString().split(Pattern.quote(File.separator));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String fileName \u003d allFileName[allFileName.length - 1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (fileName.charAt(0) \u003d\u003d (\u0027.\u0027)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes note \u003d new Notes(fileName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            filesArrayList.add(note);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesArrayListFiltered \u003d FXCollections.observableArrayList(filesArrayList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return filesArrayListFiltered;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void setList(ArrayList\u003cNotes\u003e notesList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesArrayListFiltered.setAll(notesList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static String getCurrentDirectory() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return currentDirectory;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void setCurrentDirectory(String directory) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        currentDirectory \u003d directory;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getOperation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.operation;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/Capulator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a device that can help NUS students to calculate their current CAP based on their graded modules."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class Capulator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private List\u003cNusModule\u003e modules;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Capulator(List\u003cNusModule\u003e modules) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * calculates the CAP based on graded NUS modules in records."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @return a double represents the CAP gotten."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double calculateCap() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double sumOfGradePoints \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double sumOfModularCredits \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getGrade().isPresent() \u0026\u0026 !module.getGrade().get().isSued()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                sumOfModularCredits +\u003d module.modularCredit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                sumOfGradePoints +\u003d module.modularCredit * module.getGradePoint();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (sumOfModularCredits \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return sumOfGradePoints / sumOfModularCredits;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/Grade.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents the grades obtained by a NUS student for any specific module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public enum Grade {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    APLUS(5.0, \"A+\", true, true),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    A(5.0, \"A\", true, true),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    AMINUS(4.5, \"A-\", true, true),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    BPLUS(4.0, \"B+\", true, true),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    B(3.5, \"B\", true, true),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    BMINUS(3.0, \"B-\", true, true),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    CPLUS(2.5, \"C+\", true, true),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    C(2.0, \"C\", true, true),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    DPLUS(1.5, \"D+\", true, false),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    D(1.0, \"D\", true, false),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    F(0.0, \"F\", false, false),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    S(0.0, \"S\", true, true),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    U(0.0, \"U\", false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter valid grade.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final double point;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final boolean isPassed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final boolean isSatisfactory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Grade(double point, String text, boolean isPassed, boolean isSatisfactory) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.point \u003d point;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.isPassed \u003d isPassed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.isSatisfactory \u003d isSatisfactory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Grade getGrade(String text) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Grade grade \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Grade g : values()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (g.text.equals(text)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                grade \u003d g;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Grade getGradeAfterSu(String text) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Grade g : values()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (g.text.equals(text) \u0026\u0026 g.isSatisfactory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                return S;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return U;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * checks whether the Grade object represents a grade that has been SUed or not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @return true if the Grade object represents a grade that has been SUed or false if otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean isSued() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (this.equals(S) || this.equals(U)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getPoint() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.point;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.text;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns if a given string is a valid grade."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static boolean isValidGrade(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Grade g : values()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (g.text.equals(test)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/ModuleBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Wraps all module-related data at the module-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ModuleBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private List\u003cNusModule\u003e modules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ObservableList\u003cNusModule\u003e modulesTakenList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleBook(List\u003cNusModule\u003e modules) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Adds a module to the module book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * The module must not already exist in the module book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules.add(module);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.modulesTakenList.add(module);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Removes {@code NusModule} that has the same module code as given from this {@code ModuleBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * such nus module must exist in the module book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (modules.get(i).getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        modules.remove(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.modulesTakenList.remove(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Updates the grade of the {@code NusModule} that has the same module code as given from this {@code ModuleBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * such nus module must exist in the module book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void gradeModule(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                modulesTakenList.remove(module);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                module.setGrade(grade);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                modulesTakenList.add(module);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if a module with the same module code as {@code NusModule} exists in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNusModule\u003e getModulesTakenList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTakenList \u003d FXCollections.observableArrayList(modules);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return modulesTakenList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Capulator capulator \u003d new Capulator(modules);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return capulator.calculateCap();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 76,
      "zhouxinwei97": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/ModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a NUS module\u0027s module code."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter valid module code\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleCode(String code) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns if a given string is a valid module code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Search.findModule(test);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 code.equals(((ModuleCode) other).code)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/NusModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a module in NUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class NusModule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public final int modularCredit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private boolean isTaking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public NusModule(ModuleCode moduleCode, int modularCredit, boolean isTaking, Optional\u003cGrade\u003e grade) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modularCredit \u003d modularCredit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.isTaking \u003d isTaking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getGradePoint() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.grade.get().getPoint();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.grade;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.grade \u003d Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleCode.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof NusModule // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((NusModule) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 3,
      "-": 109,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/Classes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eClasses Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * A class to hold information about each class timetable slot"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class Classes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String classNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String lessonType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public Classes(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.classNo \u003d input.substring(3, input.indexOf(\"startTime\") - 3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.startTime \u003d input.substring(input.indexOf(\"startTime\") + 12, input.indexOf(\"endTime\") - 3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.endTime \u003d input.substring(input.indexOf(\"endTime\") + 10, input.indexOf(\"weeks\") - 3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.size \u003d Integer.parseInt(input.substring(input.indexOf(\"size\") + 6));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.venue \u003d input.substring(input.indexOf(\"venue\") + 8, input.indexOf(\"\\\"day\\\":\") - 3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.day \u003d input.substring(input.indexOf(\"\\\"day\\\":\") + 7, input.indexOf(\"lessonType\") - 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.lessonType \u003d input.substring(input.indexOf(\"lessonType\") + 13, input.indexOf(\"size\") - 3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Class ID: \" + this.classNo + \" \" + this.lessonType + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Start Time: \" + this.startTime + \" End Time: \" + this.endTime + \" \" + this.day + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Size: \" + this.size + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Venue: \" + this.venue + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getLessonType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.lessonType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getClassNo() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.classNo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.classNo;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.venue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/ModPlanLogic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eModule Planner Logic Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Just a class to handle logic behind module planning"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class ModPlanLogic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Function to check if Modules, myMod and toCheck,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * have clashing lecture slots"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param myMod module in question"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param toCheck module to check"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param sem which sem you planning"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return true if there is a clash, false otherwise"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static boolean checkLectureClash (Module myMod, Module toCheck, int sem) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        ArrayList\u003cClasses\u003e myModLectures;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        ArrayList\u003cClasses\u003e toCheckLectures;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (sem \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            myModLectures \u003d myMod.getSem1Lectures();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            toCheckLectures \u003d toCheck.getSem1Lectures();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            myModLectures \u003d myMod.getSem2Lectures();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            toCheckLectures \u003d toCheck.getSem2Lectures();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (Classes myModCurr : myModLectures) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String myModCurrDay \u003d myModCurr.getDay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            int myModCurrStart \u003d Integer.parseInt(myModCurr.getStartTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            int myModCurrEnd \u003d Integer.parseInt(myModCurr.getEndTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            for (Classes toCheckCurr : toCheckLectures) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                String toCheckCurrDay \u003d toCheckCurr.getDay();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                int toCheckCurrStart \u003d Integer.parseInt(toCheckCurr.getStartTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                int toCheckCurrEnd \u003d Integer.parseInt(toCheckCurr.getEndTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                if (myModCurrDay.equals(toCheckCurrDay)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    if (myModCurrStart \u003e\u003d toCheckCurrStart) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        if (myModCurrStart \u003e\u003d toCheckCurrEnd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        if (myModCurrEnd \u003c\u003d toCheckCurrStart) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eModule Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * A simple class to hold module information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String workload;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private int credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String sem1Exam \u003d \"NA\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String sem2Exam \u003d \"NA\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Lectures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Others \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Lectures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Others \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Constructor for module class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Parses info from http request into module"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * access information easily by using class functions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param input this is raw HTTP data to be parsed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public Module(String input) throws StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.preclusion \u003d input.substring(input.indexOf(\"preclusion\") + 13, input.indexOf(\"description\") - 3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.description \u003d input.substring(input.indexOf(\"description\") + 14, input.indexOf(\"title\\\":\") - 3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.title \u003d input.substring(input.indexOf(\"title\") + 8, input.indexOf(\"department\") - 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.department \u003d input.substring(input.indexOf(\"department\") + 13, input.indexOf(\"faculty\") - 3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.faculty \u003d input.substring(input.indexOf(\"faculty\") + 10, input.indexOf(\"workload\") - 3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.workload \u003d input.substring(input.indexOf(\"workload\") + 10, input.indexOf(\"moduleCredit\") - 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.credits \u003d Integer.parseInt(input.substring(input.indexOf(\"moduleCredit\") + 15,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                input.indexOf(\"moduleCode\") - 3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            this.code \u003d input.substring(input.indexOf(\"moduleCode\") + 13, input.indexOf(\"attributes\") - 3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            this.code \u003d input.substring(input.indexOf(\"moduleCode\") + 13, input.indexOf(\"semesterData\") - 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String semesterData \u003d input.substring(input.indexOf(\"semester\\\":\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        semesterData \u003d semesterData.split(\"prereqTree\")[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        semesterData \u003d semesterData.split(\"fulfillRequirements\")[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        parseSemData(semesterData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        splitClassByType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Helper function for search function to parse class timetable information"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param input string of class information"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private void parseSemData(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        boolean hasSem1 \u003d input.contains(\"semester\\\":1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        boolean hasSem2 \u003d input.contains(\"semester\\\":2\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        boolean hasExam \u003d input.contains(\"examDate\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String sem1Data \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String sem2Data \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (hasSem1 \u0026\u0026 hasExam) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem1Data \u003d input.substring(input.indexOf(\"timetable\") + 12, input.indexOf(\"examDate\") - 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem1Exam \u003d input.substring(input.indexOf(\"examDate\") + 11, input.indexOf(\"examDuration\") - 3).split(\"T\")[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } else if (hasSem1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (hasSem2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Data \u003d input.substring(input.indexOf(\"timetable\") + 12, input.indexOf(\"semester\\\":2\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Data \u003d input.substring(input.indexOf(\"timetable\") + 12);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String[] classes \u003d sem1Data.split(\"classNo\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (int i \u003d 1; i \u003c classes.length; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String temp \u003d classes[i];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            temp \u003d temp.split(\"},\\\\{\")[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            Classes myClass \u003d new Classes(temp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem1Classes.add(myClass);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (hasSem2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (hasExam) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Data \u003d input.substring(input.lastIndexOf(\"timetable\") + 12,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        input.lastIndexOf(\"examDate\") - 4);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Exam \u003d input.substring(input.lastIndexOf(\"examDate\") + 11,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        input.lastIndexOf(\"examDuration\") - 3).split(\"T\")[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Data \u003d input.substring(input.lastIndexOf(\"timetable\") + 12);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        classes \u003d sem2Data.split(\"classNo\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (int i \u003d 1; i \u003c classes.length; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String temp \u003d classes[i];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            temp \u003d temp.split(\"},\\\\{\")[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            Classes myClass \u003d new Classes(temp);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem2Classes.add(myClass);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Helper Function for Constructor"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private void splitClassByType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (Classes curr : sem1Classes) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (curr.getLessonType().equals(\"Lecture\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Lectures.add(curr);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else if (curr.getLessonType().equals(\"Tutorial\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Tutorials.add(curr);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Others.add(curr);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (Classes curr : sem2Classes) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (curr.getLessonType().equals(\"Lecture\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Lectures.add(curr);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else if (curr.getLessonType().equals(\"Tutorial\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Tutorials.add(curr);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Others.add(curr);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Classes() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem1Classes;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getSem1_exam() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem1Exam;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Classes() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem2Classes;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getSem2_exam() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem2Exam;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public int getCredits() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.credits;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Lectures() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem1Lectures;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Tutorials() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem1Tutorials;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Others() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem1Others;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Lectures() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem2Lectures;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Tutorials() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem2Tutorials;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Others() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem2Others;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + this.code + \" \" + this.title + \"\\n\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Faculty: \" + this.faculty + \"\\n\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Department: \" + this.department + \"\\n\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Credit Units: \" + this.credits + \"\\n\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Workload: \" + this.workload + \"\\n\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + this.description + \"\\n\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (!sem1Exam.equals(\"\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            output \u003d output + \"Semester 1 Exam: \" + sem1Exam + \"\\n\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (!sem2Exam.equals(\"\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            output \u003d output + \"Semester 2 Exam: \" + sem2Exam + \"\\n\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/Search.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import javax.net.ssl.HttpsURLConnection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eSearch Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Class provides simple search function which takes in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * a module code and outputs simple module information"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * taken from NUSMODs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class Search {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Function takes in module code and returns Module Object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * For more info on Module Object, look at module Class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param moduleCode input Module Code all caps"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static Module findModule(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String fileName \u003d moduleCode + \".txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File tempFile \u003d new File(\".\" + File.separator + \"src\" + File.separator + \"main\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + File.separator + \"java\" + File.separator + \"seedu\" + File.separator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + \"address\" + File.separator + \"searcher\" + File.separator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + \"cache\" + File.separator + fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            BufferedReader myReader \u003d new BufferedReader(new FileReader(tempFile));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String tempString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            while ((tempString \u003d myReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                output \u003d tempString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String httpsUrl \u003d \"https://api.nusmods.com/v2/2019-2020/modules/\" + moduleCode + \".json\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            URL url;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                url \u003d new URL(httpsUrl);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                HttpsURLConnection con \u003d (HttpsURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                output \u003d print_content(con);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } catch (IOException d) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                d.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                BufferedWriter myWriter \u003d new BufferedWriter(new FileWriter(tempFile));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                myWriter.write(output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                myWriter.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } catch (IOException f) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                f.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return new Module(output);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Function to get HTTP information"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param con just java stuff"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return Raw HTTP info in string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static String print_content(HttpsURLConnection con) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (con !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                BufferedReader br \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        new BufferedReader("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                                new InputStreamReader(con.getInputStream()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                String input;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                while ((input \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    output \u003d input;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 88,
      "zhouxinwei97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1231.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"MA1100, CS1231S\",\"description\":\"This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications.  (2) Relations and Functions: Equivalence relations and partitions.  Partially ordered sets.  Well-Ordering Principle. Function equality.  Boolean/identity/inverse functions.  Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle.  Number of relations on a set, number of injections from one finite set to another, Diagonalisation proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset.  Subsets of countable sets are countable.\",\"title\":\"Discrete Structures\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[3,1,0,3,3],\"prerequisite\":\"A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS1231\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"10\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"11\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"15\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"18\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"SR_LT19\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"04\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"12\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"16\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"17\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"06\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":300},{\"classNo\":\"2\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":300},{\"classNo\":\"25\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"20\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"08\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"09\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":300},{\"classNo\":\"2\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":300}],\"examDate\":\"2019-11-30T05:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"04\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"06\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"08\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"09\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"10\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"1\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT15\",\"day\":\"Wednesday\",\"lessonType\":\"Sectional Teaching\",\"size\":232},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT15\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":232},{\"classNo\":\"05\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"02\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":25}],\"examDate\":\"2020-04-27T01:00:00.000Z\",\"examDuration\":120}],\"fulfillRequirements\":[\"CS5232\",\"CS5241\",\"CS5469\",\"CS2102\",\"CS2309\",\"CS3230\",\"CS4232\",\"CS3234\",\"CS3243\",\"CS4236\",\"CS2102R\",\"CS3236\",\"CS2040S\",\"CS4269\",\"MA3219\",\"MA3205\",\"MA2219\",\"MA2214\",\"MA2202S\",\"MA2202\",\"UIS5951R\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2100.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1104 or Students from Department of ECE\",\"description\":\"The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.\",\"title\":\"Computer Organisation\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[3,1,1,3,2],\"prerequisite\":\"CS1010 or its equivalent\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2100\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"06\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"10\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"11\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"12\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"13\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"14\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"06\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"07\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"03\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"05\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"04\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"15\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"08\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"01\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"02\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"08\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"10\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"1\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":314},{\"classNo\":\"12\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"01\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"04\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"09\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":314},{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"15\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21}],\"examDate\":\"2019-11-28T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"2\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"05\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"15\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"19\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"20\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"19\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"20\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"15\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"16\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"17\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"16\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"18\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"06\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"18\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"17\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-04-30T05:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":\"CS1010\",\"fulfillRequirements\":[\"CS6284\",\"CS3237\",\"CS2106\",\"CS3210\",\"EE5902\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2101.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS2103 Software Engineering, IS2101 Business Technical Communication or its equivalent, ES2002, ES2007D, and ES1601.\",\"description\":\"This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will\\nbe adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural\\ncommunication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.\",\"title\":\"Effective Communication for Computing Professionals\",\"department\":\"Center for Engl Lang Comms\",\"faculty\":\"Computing\",\"workload\":[0,4,0,4,2],\"prerequisite\":\"Students have to complete ES1000 and/or ES1103 (if required to take the module/s) before reading this module.\",\"corequisite\":\"Students have to read CS2103T Software Engineering at the same time as this module.\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2101\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[]},{\"semester\":2,\"timetable\":[]}],\"prereqTree\":{\"or\":[\"ES1000\",\"ES1103\"]},\"fulfillRequirements\":[\"CP3880\",\"CS3201\",\"IS4010\",\"IS3103\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2102.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS2102S, IT2002\",\"description\":\"The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.\",\"title\":\"Database Systems\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1.5,0.5,3,3],\"prerequisite\":\"((CS1020 or its equivalent) or CS2020 or CS2030 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent))\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2102\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"11\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"10\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":233},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22}],\"examDate\":\"2019-11-27T05:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":230},{\"classNo\":\"08\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"11\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"12\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"05\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"07\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"01\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"02\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"03\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"09\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"10\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":23}],\"examDate\":\"2020-04-28T01:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"and\":[{\"or\":[\"CS1020\",\"CS2020\",\"CS2030\",\"CS2040\"]},{\"or\":[\"MA1100\",\"CS1231\"]}]},\"fulfillRequirements\":[\"CP3106\",\"CS5228\",\"CS6284\",\"CS5346\",\"CS5425\",\"CS3223\",\"CS4225\",\"IS4302\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2106.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CG2271 or EE4214. CEG students are not allowed to take this module.\",\"description\":\"This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.\",\"title\":\"Introduction to Operating Systems\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,1,0,6],\"prerequisite\":\"CS2100 or EE2007 or EE2024 or EE2028\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2106\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":250},{\"classNo\":\"02\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"13\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":20}],\"examDate\":\"2019-12-03T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"13\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"09\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"10\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"03\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"04\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"07\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":280},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"12\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"10\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"06\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"01\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"04\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"14\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-04-27T09:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"CS2100\",\"EE2007\",\"EE2024\",\"EE2028\"]},\"fulfillRequirements\":[\"CS6280\",\"CS6211\",\"CS5272\",\"CS6219\",\"CS5248\",\"CS5250\",\"CS3235\",\"CS4344\",\"CS4223\",\"CS3211\",\"CS3221\",\"CS3220\",\"EE5903\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns the file path of the data file for diary book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getDiaryBookFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see #getDiaryBookFilePath()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readDiaryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDiary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Jackson-friendly version of {@link DiaryEntry}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class JsonAdaptedDiary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Diary\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String entryContent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String weather;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String mood;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Constructs a {@code JsonAdaptedDiary} with the given person details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAdaptedDiary(@JsonProperty(\"entry_content\") String entryContent, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            @JsonProperty(\"weather\") String weather,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            @JsonProperty(\"mood\") String mood) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.entryContent \u003d entryContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param source param"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAdaptedDiary(DiaryEntry source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        entryContent \u003d source.getEntryContent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        weather \u003d source.getWeather().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        mood \u003d source.getMood().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Converts this Jackson-friendly adapted DiaryEntry object into the model\u0027s {@code DiaryEntry} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryEntry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new DiaryEntry(entryContent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Path diaryBookPath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAddressBookStorage(Path filePath, Path diaryBookPath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.diaryBookPath \u003d diaryBookPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.diaryBookPath \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return diaryBookPath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Reads the diary book json file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readDiaryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "zhouxinwei97": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final List\u003cJsonAdaptedDiary\u003e diary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                       @JsonProperty(\"diary\") List\u003cJsonAdaptedDiary\u003e diary) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (diary !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            this.diary.addAll(diary);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (source.getDiaryList() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            diary.addAll(source.getDiaryList().stream().map(JsonAdaptedDiary::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (JsonAdaptedDiary jsonAdaptedDiary: diary) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            DiaryEntry diaryentry \u003d jsonAdaptedDiary.toModelType();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            addressBook.addDiaryEntry(diaryentry);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "zhouxinwei97": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getDiaryBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d diaryBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return addressBookStorage.getDiaryBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readDiaryBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return addressBookStorage.readDiaryBook(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "zhouxinwei97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/todolist/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "package seedu.address.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * \u003ch1\u003e Deadline Class \u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Returns an extended type of Task, Deadline, where tasks have to be completed by a set date"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter valid Date in the format DD-MM-YYYY\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected String operation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Constructor for deadline class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param description describes content of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param by sets targeted completion date of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Deadline(String description, String by, String category, String operation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.operation \u003d operation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Deadline(int index, String operation) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(\"Delete task\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.operation \u003d operation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * dummy docs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] splittedDate \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int month \u003d Integer.parseInt(splittedDate[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int day \u003d Integer.parseInt(splittedDate[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getOperation() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.operation;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return super.toString() + \" (\" + by + \")\" + \"(\" + category + \")\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 23,
      "zhouxinwei97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/todolist/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "package seedu.address.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * \u003ch1\u003e Task Class \u003c/h1\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Represents general \u003ccode\u003e Task \u003c/code\u003e class such that it can be extended into more specific classes (Deadlines,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " *  To Dos)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " *  description must specify a task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ObservableList\u003cTask\u003e deadlineTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Constructor for task class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param description describes content of task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @return icon for status (tick or cross) to display if task is completed or not"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @return description of task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @return status icon of tick as task is marked as done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return getStatusIcon();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ObservableList\u003cTask\u003e getNewDeadlineTaskList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cTask\u003e deadlineTaskListDummy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList \u003d FXCollections.observableArrayList(deadlineTaskListDummy);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineTaskList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineTaskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return \"None\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return \"None\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getOperation() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return \"None\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 56,
      "zhouxinwei97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/todolist/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "package seedu.address.todolist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * \u003ch1\u003e To Do Class \u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Returns an extended type of Task, To Dos, where general tasks are added"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Constructor for to do class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param description describes content of to do"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * CalenderPanel that holds the month"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderDate extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"CalenderDate.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalenderDate.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private int count \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label calenderDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderDate(String date, String day) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDate.setText(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setCircleNotVisible();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setCssStyles();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setCssStyles() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDate.setStyle(\"-fx-text-fill: #fb7b6b\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setCircleNotVisible() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        circle.setVisible(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void increaseCount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        count++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void decreaseCount() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        count--;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.count;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setCircleVisible() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        circle.setVisible(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderDeadline extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"CalenderDeadline.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final Task deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderDeadline(Task deadline, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        category.setText(deadline.getCategory());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        description.setText(deadline.getDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        date.setText(\"Deadline: \" + deadline.getDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof CalenderDeadline)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"CalenderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalenderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cTask\u003e calenderDeadlineListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderListPanel(ObservableList\u003cTask\u003e deadlineList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDeadlineListView.setItems(deadlineList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDeadlineListView.setCellFactory(listView -\u003e new DeadlineListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class DeadlineListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(Task deadline, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(deadline, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(new CalenderDeadline(deadline, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                System.out.println(\"Else\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                String[] date \u003d deadline.getDate().split(\"-\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                String day \u003d date[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                /** problem with setting circle to not visible"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                 *  is that this else runs random number of time, so you dont know how many count to --"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                System.out.println(CalenderPanel.getYear());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                System.out.println(CalenderPanel.getCurrentMonth());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                if (CalenderPanel.getYear() \u003d\u003d year"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u0026\u0026 CalenderPanel.getCurrentMonth() \u003d\u003d month) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    CalenderDate calenderDate \u003d CalenderPanel.getCalenderDatesArrayList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            .get(Integer.parseInt(day) - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    calenderDate.setCircleVisible();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    calenderDate.increaseCount();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        private void setCircleNotVisible() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (CalenderDate calenderDate : CalenderPanel.getCalenderDatesArrayList()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                if (calenderDate.getCount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    calenderDate.setCircleNotVisible();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * CalenderPanel that holds the month"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static int year;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static int monthNow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ArrayList\u003cCalenderDate\u003e calenderDatesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"Calender.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalenderPanel.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String[] monthsArray \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HashMap\u003cString, Integer\u003e datesArray \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String todayMonth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String todayYear;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Text month;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Text todayDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private GridPane calenderGrid;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label mon1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderPanel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.setMonth();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.setDatesArray();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.setDates();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderGrid.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setMonth() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String[] currentDateArray \u003d dtf.format(now).split(\"/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String currentMonth \u003d currentDateArray[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String currentYear \u003d currentDateArray[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String date \u003d currentDateArray[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        todayMonth \u003d currentMonth;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        todayYear \u003d currentYear;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        int currentMonthInt \u003d Integer.parseInt(currentMonth);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        monthNow \u003d currentMonthInt;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        year \u003d Integer.parseInt(todayYear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String currentMonthAndYear \u003d monthsArray[currentMonthInt - 1] + \" \" + currentYear;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        month.setText(currentMonthAndYear);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        todayDate.setText(\"Today: \" + date + \" \" + currentMonthAndYear);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setDates() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String firstDay \u003d getCalenderDates();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int firstDayInt \u003d datesArray.get(firstDay);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            System.out.println(firstDayInt);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (int i \u003d 1; i \u003c 32; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                calenderDatesArrayList.add(new CalenderDate(Integer.toString(i), \"Mon\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int x \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (int col \u003d firstDayInt; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                System.out.println(col);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                calenderGrid.add(calenderDatesArrayList.get(x).getRoot(), col, 1, 1, 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                x++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (int row \u003d 2; row \u003c 7; row++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    if (x \u003e\u003d 31) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    calenderGrid.add(calenderDatesArrayList.get(x).getRoot(), col, row, 1, 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    x++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            logger.info(ex.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String getCalenderDates() throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String inputDate \u003d String.format(\"01/%s/%s\", todayMonth, todayYear);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        SimpleDateFormat format1 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Date dt1 \u003d format1.parse(inputDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DateFormat format2 \u003d new SimpleDateFormat(\"EEEE\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String finalDay \u003d format2.format(dt1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return finalDay;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ArrayList\u003cCalenderDate\u003e getCalenderDatesArrayList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return calenderDatesArrayList;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static int getYear() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static int getCurrentMonth() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return monthNow;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private void setDatesArray() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Monday\", 0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Tuesday\", 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Wednesday\", 2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Thursday\", 3);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Friday\", 4);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Saturday\", 5);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Sunday\", 6);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DiaryEntriesCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DiaryEntriesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"DiaryListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final DiaryEntry diaryEntry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryEntriesCard(DiaryEntry diaryEntry, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.diaryEntry \u003d diaryEntry;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        text.setText(diaryEntry.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DiaryListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of Notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DiaryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"DiaryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DiaryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cDiaryEntry\u003e diaryListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryListPanel(ObservableList\u003cDiaryEntry\u003e diaryList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (DiaryEntry d : diaryList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            System.out.println(d instanceof DiaryEntry);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListView.setItems(diaryList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListView.setCellFactory(listView -\u003e new DiaryListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Notes} using a {@code NotesCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class DiaryListViewCell extends ListCell\u003cDiaryEntry\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(DiaryEntry diaryEntries, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(diaryEntries, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || diaryEntries.toString() \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(new DiaryEntriesCard(diaryEntries, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-W16-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private NotesListPanel notesListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private DiaryListPanel diaryListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private CalenderPanel calenderPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private CalenderListPanel calenderListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ModulesTakenListPanel modulesTakenListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private StackPane notesListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private StackPane diaryListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane modulesTaken;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane profile;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane calenderPanelPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane deadlinePanelPlaceholder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private SplitPane profileSplitPane;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private SplitPane calenderSplitPane;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Tab addBookTab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Helper method to build image to tabs"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param imgPatch image path"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ImageView buildImage(String imgPatch) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Image i \u003d new Image(imgPatch);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ImageView imageView \u003d new ImageView();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        //You can set width and height"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        imageView.setFitHeight(16);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        imageView.setFitWidth(16);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        imageView.setImage(i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return imageView;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        defaultSettings();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListPanel \u003d new DiaryListPanel(logic.getDiaryList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListPanelPlaceholder.getChildren().add(diaryListPanel.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListPanel \u003d new NotesListPanel(logic.getFilesInFolderList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListPanelPlaceholder.getChildren().add(notesListPanel.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderPanel \u003d new CalenderPanel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderPanelPlaceholder.getChildren().add(calenderPanel.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(calenderPanelPlaceholder, calenderPanelPlaceholder.getChildren().get(0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderListPanel \u003d new CalenderListPanel(logic.getDeadlineTaskList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlinePanelPlaceholder.getChildren().add(calenderListPanel.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(deadlinePanelPlaceholder, deadlinePanelPlaceholder.getChildren().get(0));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTakenListPanel \u003d new ModulesTakenListPanel(logic.getModulesListTaken());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTaken.getChildren().add(modulesTakenListPanel.getRoot());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(modulesTaken, modulesTaken.getChildren().get(0));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Default Settings."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void defaultSettings() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profileSplitPane.setDividerPositions(0.25f, 0.75f);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profileSplitPane.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderSplitPane.setDividerPositions(0.25f, 0.75f);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderSplitPane.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void setAnchorPaneSize(AnchorPane anchorPane, Node node) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setTopAnchor(node, 0.0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setRightAnchor(node, 0.0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setLeftAnchor(node, 0.0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setBottomAnchor(node, 0.0);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 195,
      "zhouxinwei97": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"ModuleTaken.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final NusModule module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label grade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private GridPane grid;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModuleCard(NusModule module) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moduleName.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!module.getGrade().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            grade.setText(module.getGrade().get().getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            grade.setText(\"No Grade is Entered\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModulesTakenListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModulesTakenListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"ModulesTakenListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModulesTakenListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cNusModule\u003e modulesTaken;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModulesTakenListPanel(ObservableList\u003cNusModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTaken.setItems(moduleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTaken.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cNusModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(NusModule module, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(new ModuleCard(module).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"NotesListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final Notes note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label directory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesCard(Notes note, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        directory.setText(note.getPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of Notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"NotesListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NotesListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cNotes\u003e notesListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Text currentDirectory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private StackPane placeholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesListPanel(ObservableList\u003cNotes\u003e notesList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListView.setItems(notesList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListView.setCellFactory(listView -\u003e new NotesListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        currentDirectory.setText(\"Current Directory: \" + Notes.HOME_DIRECTORY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Notes} using a {@code NotesCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class NotesListViewCell extends ListCell\u003cNotes\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(Notes note, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || note.getPath() \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(new NotesCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                currentDirectory.setText(Notes.getCurrentDirectory());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 59
    }
  },
  {
    "path": "src/main/resources/view/Calender.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"54.0\" prefWidth\u003d\"456.0\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cText fx:id\u003d\"month\" fill\u003d\"#b27878\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Month\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"455.5126953125\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"70.0\" prefWidth\u003d\"456.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cText fx:id\u003d\"todayDate\" fill\u003d\"#b27878\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"todayDate\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"455.5126953125\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"273.0\" prefWidth\u003d\"409.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cGridPane fx:id\u003d\"calenderGrid\" gridLinesVisible\u003d\"true\" prefHeight\u003d\"343.0\" prefWidth\u003d\"409.0\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Mon\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Mon\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Tue\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Tue\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Wed\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Wed\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Thurs\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Thurs\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Fri\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Fri\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Sat\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Sat\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Sun\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Sun\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 98
    }
  },
  {
    "path": "src/main/resources/view/CalenderDate.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"35.0\" prefWidth\u003d\"31.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cLabel fx:id\u003d\"calenderDate\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"16.0\" prefWidth\u003d\"28.0\" text\u003d\"Date\" translateX\u003d\"50.0\" translateY\u003d\"-10.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#ff1f6b\" radius\u003d\"5.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" translateX\u003d\"10.0\" translateY\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 12
    }
  },
  {
    "path": "src/main/resources/view/CalenderDeadline.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                           \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                           \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 44
    }
  },
  {
    "path": "src/main/resources/view/CalenderListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cListView fx:id\u003d\"calenderDeadlineListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/resources/view/DiaryListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"text\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 31
    }
  },
  {
    "path": "src/main/resources/view/DiaryListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cListView fx:id\u003d\"diaryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"NUSProductivity\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"259.0\" prefWidth\u003d\"395.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPane\" prefHeight\u003d\"600.0\" prefWidth\u003d\"200.0\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003ctabs\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cTab id\u003d\"diaryTab\" fx:id\u003d\"diaryTab\" text\u003d\"Diary\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"diaryListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cTab fx:id\u003d\"modPlanTab\" text\u003d\"Mod plan\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"addBookTab\" text\u003d\"Add Book\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Tab\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"calenderTab\" text\u003d\"Calender\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cSplitPane fx:id\u003d\"calenderSplitPane\" dividerPositions\u003d\"0.29797979797979796\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"deadlinePanelPlaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"167.0\" prefWidth\u003d\"79.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"calenderPanelPlaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"167.0\" prefWidth\u003d\"288.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"notesTab\" text\u003d\"Notes\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"notesListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"profileTab\" text\u003d\"Profile\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cSplitPane fx:id\u003d\"profileSplitPane\" dividerPositions\u003d\"0.29797979797979796\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"modulesTaken\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"profile\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"10\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "zhouxinwei97": 47
    }
  },
  {
    "path": "src/main/resources/view/ModuleTaken.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"66.0\" prefWidth\u003d\"224.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cGridPane fx:id\u003d\"grid\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"66.0\" prefWidth\u003d\"154.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"moduleName\" prefHeight\u003d\"26.0\" prefWidth\u003d\"114.0\" style\u003d\"-fx-font-size: 25; -fx-font-family: Noteworthy;\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"moduleName\" translateX\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cLabel fx:id\u003d\"grade\" style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 25; -fx-text-fill: #679b9b679b9b;\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"grade\" translateX\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 33
    }
  },
  {
    "path": "src/main/resources/view/ModulesTakenListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cListView fx:id\u003d\"modulesTaken\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/resources/view/NotesListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"directory\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 32
    }
  },
  {
    "path": "src/main/resources/view/NotesListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cStackPane fx:id\u003d\"placeholder\" prefHeight\u003d\"45.0\" prefWidth\u003d\"624.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cText fx:id\u003d\"currentDirectory\" fill\u003d\"#cd7474\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"currentdirectory\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"1030.982852935791\" StackPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/Text\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cListView fx:id\u003d\"notesListView\" prefHeight\u003d\"400.0\" prefWidth\u003d\"795.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 20
    }
  },
  {
    "path": "src/main/resources/view/Profile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.3093645484949833\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cVBox prefHeight\u003d\"398.0\" prefWidth\u003d\"181.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.6565656565656566\" layoutX\u003d\"1.0\" layoutY\u003d\"1.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"398.0\" prefWidth\u003d\"409.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"241.0\" prefWidth\u003d\"383.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 23
    }
  },
  {
    "path": "src/main/resources/view/ProfilePanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.29797979797979796\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"modulesTaken\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"profile\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super(filePath, filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 157,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.todolist.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean isEmptyDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String showDiaryLog() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void gradeModule(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addDeadline(Task deadline) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyDeadline(Task deadline) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addToDo(Task todo) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyToDo(Task todo) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 65,
      "xuanxinng": 16,
      "-": 194,
      "zhouxinwei97": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY ,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 18,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 9,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        private final ObservableList\u003cDiaryEntry\u003e diary \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return diary;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 99,
      "zhouxinwei97": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/CapulatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class CapulatorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void calculateCap() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module1 \u003d new NusModule(new ModuleCode(\"CS2030\"), 4, false, Optional.of(Grade.BPLUS));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module2 \u003d new NusModule(new ModuleCode(\"CS2040\"), 4, false, Optional.of(Grade.A));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module3 \u003d new NusModule(new ModuleCode(\"CS2100\"), 4, false, Optional.of(Grade.AMINUS));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module4 \u003d new NusModule(new ModuleCode(\"GES1012\"), 4, false, Optional.of(Grade.CPLUS));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module5 \u003d new NusModule(new ModuleCode(\"GEQ1000\"), 4, false, Optional.of(Grade.S));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module6 \u003d new NusModule(new ModuleCode(\"CS2103T\"), 4, true, Optional.empty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        List\u003cNusModule\u003e modules \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module4);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module6);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double result \u003d new Capulator(modules).calculateCap();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(4.0, result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/GradeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class GradeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getGrade() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"A\"), Grade.A);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"B\"), Grade.B);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"C\"), Grade.C);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"F\"), Grade.F);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertNull(Grade.getGrade(\"fewhfk\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getGradeAfterSu() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"A\"), Grade.S);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"B\"), Grade.S);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"C\"), Grade.S);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"F\"), Grade.U);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"dfsfsd\"), Grade.U);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void isSued() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(Grade.A.isSued());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(Grade.S.isSued());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(Grade.U.isSued());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/NusModuleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class NusModuleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getGradePoint() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module1 \u003d new NusModule(new ModuleCode(\"CS2030\"), 4, false, Optional.of(Grade.A));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(5.0, module1.getGradePoint());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module2 \u003d new NusModule(new ModuleCode(\"CS2030\"), 4, false, Optional.of(Grade.C));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(2.0, module2.getGradePoint());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 3,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 7,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "zhouxinwei97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new Person(name, phone, email, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 81,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 10,
      "-": 63
    }
  }
]
